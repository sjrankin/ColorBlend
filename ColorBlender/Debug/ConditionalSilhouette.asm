; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Users\Stuart\Desktop\Projects4\ColorBlend\ColorBlender\ConditionalSilhouette.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_SilhouetteIf@80
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4076800000000000
EXTRN	_RGBtoHSL2@24:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@4076800000000000
CONST	SEGMENT
__real@4076800000000000 DQ 04076800000000000r	; 360
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\conditionalsilhouette.cpp
_TEXT	SEGMENT
_HalfRange$1 = -80					; size = 8
_HalfHueRange$2 = -72					; size = 8
_L$3 = -64						; size = 8
_S$4 = -56						; size = 8
_H$5 = -48						; size = 8
_RowOffset$6 = -40					; size = 4
_PixelSize$ = -36					; size = 4
_Src$ = -32						; size = 4
_Column$7 = -28						; size = 4
_Row$8 = -24						; size = 4
_ApplySilhouetteColor$9 = -20				; size = 4
_Dest$ = -16						; size = 4
_Index$10 = -12						; size = 4
_A$11 = -8						; size = 1
_SilhouetteB$ = -7					; size = 1
_SilhouetteG$ = -6					; size = 1
_SilhouetteR$ = -5					; size = 1
_SilhouetteA$ = -4					; size = 1
_B$12 = -3						; size = 1
_G$13 = -2						; size = 1
_R$14 = -1						; size = 1
_Source$ = 8						; size = 4
_Width$ = 12						; size = 4
_Height$ = 16						; size = 4
_Stride$ = 20						; size = 4
_Destination$ = 24					; size = 4
_UseHue$ = 28						; size = 4
_HueThreshold$ = 32					; size = 8
_HueRange$ = 40						; size = 8
_UseSaturation$ = 48					; size = 4
_SaturationThreshold$ = 52				; size = 8
_SaturationRange$ = 60					; size = 8
_UseLuminance$ = 68					; size = 4
_LuminanceThreshold$ = 72				; size = 8
_LuminanceGreaterThan$ = 80				; size = 4
_SilhouetteColor$ = 84					; size = 4
_SilhouetteIf@80 PROC

; 15   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H

; 16   :     if (Source == NULL)

	cmp	DWORD PTR _Source$[ebp], 0
	jne	SHORT $LN8@Silhouette

; 17   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@Silhouette
$LN8@Silhouette:

; 18   :     if (Destination == NULL)

	cmp	DWORD PTR _Destination$[ebp], 0
	jne	SHORT $LN9@Silhouette

; 19   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@Silhouette
$LN9@Silhouette:

; 20   :     if (!UseHue && !UseSaturation && !UseLuminance)

	cmp	DWORD PTR _UseHue$[ebp], 0
	jne	SHORT $LN10@Silhouette
	cmp	DWORD PTR _UseSaturation$[ebp], 0
	jne	SHORT $LN10@Silhouette
	cmp	DWORD PTR _UseLuminance$[ebp], 0
	jne	SHORT $LN10@Silhouette

; 21   :         return NoActionTaken;

	mov	eax, 12					; 0000000cH
	jmp	$LN1@Silhouette
$LN10@Silhouette:

; 22   : 
; 23   :     if (UseHue)

	cmp	DWORD PTR _UseHue$[ebp], 0
	je	SHORT $LN15@Silhouette

; 24   :     {
; 25   :         if (HueThreshold < 0.0)

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _HueThreshold$[ebp]
	jbe	SHORT $LN12@Silhouette

; 26   :             HueThreshold = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _HueThreshold$[ebp], xmm0
$LN12@Silhouette:

; 27   :         if (HueThreshold > 360.0)

	movsd	xmm0, QWORD PTR _HueThreshold$[ebp]
	comisd	xmm0, QWORD PTR __real@4076800000000000
	jbe	SHORT $LN13@Silhouette

; 28   :             HueThreshold = (double)((int)HueThreshold % 360);

	cvttsd2si eax, QWORD PTR _HueThreshold$[ebp]
	cdq
	mov	ecx, 360				; 00000168H
	idiv	ecx
	cvtsi2sd xmm0, edx
	movsd	QWORD PTR _HueThreshold$[ebp], xmm0
$LN13@Silhouette:

; 29   :         if (HueRange < 0.0)

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _HueRange$[ebp]
	jbe	SHORT $LN14@Silhouette

; 30   :             HueRange = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _HueRange$[ebp], xmm0
$LN14@Silhouette:

; 31   :         if (HueRange > 360.0)

	movsd	xmm0, QWORD PTR _HueRange$[ebp]
	comisd	xmm0, QWORD PTR __real@4076800000000000
	jbe	SHORT $LN15@Silhouette

; 32   :             HueRange = 360.0;

	movsd	xmm0, QWORD PTR __real@4076800000000000
	movsd	QWORD PTR _HueRange$[ebp], xmm0
$LN15@Silhouette:

; 33   :     }
; 34   :     if (UseSaturation)

	cmp	DWORD PTR _UseSaturation$[ebp], 0
	je	SHORT $LN20@Silhouette

; 35   :     {
; 36   :         if (SaturationThreshold < 0.0)

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _SaturationThreshold$[ebp]
	jbe	SHORT $LN17@Silhouette

; 37   :             SaturationThreshold = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _SaturationThreshold$[ebp], xmm0
$LN17@Silhouette:

; 38   :         if (SaturationThreshold > 1.0)

	movsd	xmm0, QWORD PTR _SaturationThreshold$[ebp]
	comisd	xmm0, QWORD PTR __real@3ff0000000000000
	jbe	SHORT $LN18@Silhouette

; 39   :             SaturationThreshold = 1.0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _SaturationThreshold$[ebp], xmm0
$LN18@Silhouette:

; 40   :         if (SaturationRange < 0.0)

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _SaturationRange$[ebp]
	jbe	SHORT $LN19@Silhouette

; 41   :             SaturationRange = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _SaturationRange$[ebp], xmm0
$LN19@Silhouette:

; 42   :         if (SaturationRange > 1.0)

	movsd	xmm0, QWORD PTR _SaturationRange$[ebp]
	comisd	xmm0, QWORD PTR __real@3ff0000000000000
	jbe	SHORT $LN20@Silhouette

; 43   :             SaturationRange = 1.0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _SaturationRange$[ebp], xmm0
$LN20@Silhouette:

; 44   :     }
; 45   :     if (UseLuminance)

	cmp	DWORD PTR _UseLuminance$[ebp], 0
	je	SHORT $LN23@Silhouette

; 46   :     {
; 47   :         if (LuminanceThreshold < 0.0)

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _LuminanceThreshold$[ebp]
	jbe	SHORT $LN22@Silhouette

; 48   :             LuminanceThreshold = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _LuminanceThreshold$[ebp], xmm0
$LN22@Silhouette:

; 49   :         if (LuminanceThreshold > 1.0)

	movsd	xmm0, QWORD PTR _LuminanceThreshold$[ebp]
	comisd	xmm0, QWORD PTR __real@3ff0000000000000
	jbe	SHORT $LN23@Silhouette

; 50   :             LuminanceThreshold = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _LuminanceThreshold$[ebp], xmm0
$LN23@Silhouette:

; 51   :     }
; 52   :     BYTE SilhouetteA = (SilhouetteColor & 0xff000000) >> 24;

	mov	edx, DWORD PTR _SilhouetteColor$[ebp]
	and	edx, -16777216				; ff000000H
	shr	edx, 24					; 00000018H
	mov	BYTE PTR _SilhouetteA$[ebp], dl

; 53   :     BYTE SilhouetteR = (SilhouetteColor & 0x00ff0000) >> 16;

	mov	eax, DWORD PTR _SilhouetteColor$[ebp]
	and	eax, 16711680				; 00ff0000H
	shr	eax, 16					; 00000010H
	mov	BYTE PTR _SilhouetteR$[ebp], al

; 54   :     BYTE SilhouetteG = (SilhouetteColor & 0x0000ff00) >> 8;

	mov	ecx, DWORD PTR _SilhouetteColor$[ebp]
	and	ecx, 65280				; 0000ff00H
	shr	ecx, 8
	mov	BYTE PTR _SilhouetteG$[ebp], cl

; 55   :     BYTE SilhouetteB = (SilhouetteColor & 0x000000ff) >> 0;

	mov	edx, DWORD PTR _SilhouetteColor$[ebp]
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _SilhouetteB$[ebp], dl

; 56   : 
; 57   :     int PixelSize = 4;

	mov	DWORD PTR _PixelSize$[ebp], 4

; 58   :     BYTE *Src = (BYTE *)Source;

	mov	eax, DWORD PTR _Source$[ebp]
	mov	DWORD PTR _Src$[ebp], eax

; 59   :     BYTE *Dest = (BYTE *)Destination;

	mov	ecx, DWORD PTR _Destination$[ebp]
	mov	DWORD PTR _Dest$[ebp], ecx

; 60   : 
; 61   :     for (int Row = 0; Row < Height; Row++)

	mov	DWORD PTR _Row$8[ebp], 0
	jmp	SHORT $LN4@Silhouette
$LN2@Silhouette:
	mov	edx, DWORD PTR _Row$8[ebp]
	add	edx, 1
	mov	DWORD PTR _Row$8[ebp], edx
$LN4@Silhouette:
	mov	eax, DWORD PTR _Row$8[ebp]
	cmp	eax, DWORD PTR _Height$[ebp]
	jge	$LN3@Silhouette

; 62   :     {
; 63   :         int RowOffset = Row * Stride;

	mov	ecx, DWORD PTR _Row$8[ebp]
	imul	ecx, DWORD PTR _Stride$[ebp]
	mov	DWORD PTR _RowOffset$6[ebp], ecx

; 64   :         for (int Column = 0; Column < Width; Column++)

	mov	DWORD PTR _Column$7[ebp], 0
	jmp	SHORT $LN7@Silhouette
$LN5@Silhouette:
	mov	edx, DWORD PTR _Column$7[ebp]
	add	edx, 1
	mov	DWORD PTR _Column$7[ebp], edx
$LN7@Silhouette:
	mov	eax, DWORD PTR _Column$7[ebp]
	cmp	eax, DWORD PTR _Width$[ebp]
	jge	$LN6@Silhouette

; 65   :         {
; 66   :             int Index = (Column * PixelSize) + RowOffset;

	mov	ecx, DWORD PTR _Column$7[ebp]
	imul	ecx, DWORD PTR _PixelSize$[ebp]
	add	ecx, DWORD PTR _RowOffset$6[ebp]
	mov	DWORD PTR _Index$10[ebp], ecx

; 67   :             BYTE A = Src[Index + 3];

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index$10[ebp]
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR _A$11[ebp], al

; 68   :             BYTE R = Src[Index + 2];

	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index$10[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR _R$14[ebp], dl

; 69   :             BYTE G = Src[Index + 1];

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index$10[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR _G$13[ebp], cl

; 70   :             BYTE B = Src[Index + 0];

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index$10[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _B$12[ebp], al

; 71   :             double H = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _H$5[ebp], xmm0

; 72   :             double S = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _S$4[ebp], xmm0

; 73   :             double L = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _L$3[ebp], xmm0

; 74   :             RGBtoHSL2(R, G, B, &H, &S, &L);

	lea	ecx, DWORD PTR _L$3[ebp]
	push	ecx
	lea	edx, DWORD PTR _S$4[ebp]
	push	edx
	lea	eax, DWORD PTR _H$5[ebp]
	push	eax
	movzx	ecx, BYTE PTR _B$12[ebp]
	push	ecx
	movzx	edx, BYTE PTR _G$13[ebp]
	push	edx
	movzx	eax, BYTE PTR _R$14[ebp]
	push	eax
	call	_RGBtoHSL2@24

; 75   :             BOOL ApplySilhouetteColor = FALSE;

	mov	DWORD PTR _ApplySilhouetteColor$9[ebp], 0

; 76   :             if (UseHue)

	cmp	DWORD PTR _UseHue$[ebp], 0
	je	SHORT $LN25@Silhouette

; 77   :             {
; 78   :                 double HalfHueRange = HueRange / 2.0;

	movsd	xmm0, QWORD PTR _HueRange$[ebp]
	divsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR _HalfHueRange$2[ebp], xmm0

; 79   :                 if (H >= HueThreshold - HalfHueRange && H <= HueThreshold + HalfHueRange)

	movsd	xmm0, QWORD PTR _HueThreshold$[ebp]
	subsd	xmm0, QWORD PTR _HalfHueRange$2[ebp]
	movsd	xmm1, QWORD PTR _H$5[ebp]
	comisd	xmm1, xmm0
	jb	SHORT $LN25@Silhouette
	movsd	xmm0, QWORD PTR _HueThreshold$[ebp]
	addsd	xmm0, QWORD PTR _HalfHueRange$2[ebp]
	comisd	xmm0, QWORD PTR _H$5[ebp]
	jb	SHORT $LN25@Silhouette

; 80   :                     ApplySilhouetteColor = TRUE;

	mov	DWORD PTR _ApplySilhouetteColor$9[ebp], 1
$LN25@Silhouette:

; 81   :             }
; 82   :             if (UseSaturation)

	cmp	DWORD PTR _UseSaturation$[ebp], 0
	je	SHORT $LN27@Silhouette

; 83   :             {
; 84   :                 double HalfRange = SaturationRange / 2.0;

	movsd	xmm0, QWORD PTR _SaturationRange$[ebp]
	divsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR _HalfRange$1[ebp], xmm0

; 85   :                 if (S >= SaturationThreshold - HalfRange && S <= SaturationThreshold + HalfRange)

	movsd	xmm0, QWORD PTR _SaturationThreshold$[ebp]
	subsd	xmm0, QWORD PTR _HalfRange$1[ebp]
	movsd	xmm1, QWORD PTR _S$4[ebp]
	comisd	xmm1, xmm0
	jb	SHORT $LN27@Silhouette
	movsd	xmm0, QWORD PTR _SaturationThreshold$[ebp]
	addsd	xmm0, QWORD PTR _HalfRange$1[ebp]
	comisd	xmm0, QWORD PTR _S$4[ebp]
	jb	SHORT $LN27@Silhouette

; 86   :                     ApplySilhouetteColor = TRUE;

	mov	DWORD PTR _ApplySilhouetteColor$9[ebp], 1
$LN27@Silhouette:

; 87   :             }
; 88   :             if (UseLuminance)

	cmp	DWORD PTR _UseLuminance$[ebp], 0
	je	SHORT $LN32@Silhouette

; 89   :             {
; 90   :                 if (LuminanceGreaterThan)

	cmp	DWORD PTR _LuminanceGreaterThan$[ebp], 0
	je	SHORT $LN29@Silhouette

; 91   :                 {
; 92   :                     if (L > LuminanceThreshold)

	movsd	xmm0, QWORD PTR _L$3[ebp]
	comisd	xmm0, QWORD PTR _LuminanceThreshold$[ebp]
	jbe	SHORT $LN31@Silhouette

; 93   :                         ApplySilhouetteColor = TRUE;

	mov	DWORD PTR _ApplySilhouetteColor$9[ebp], 1
$LN31@Silhouette:

; 94   :                 }
; 95   :                 else

	jmp	SHORT $LN32@Silhouette
$LN29@Silhouette:

; 96   :                 {
; 97   :                     if (L < LuminanceThreshold)

	movsd	xmm0, QWORD PTR _LuminanceThreshold$[ebp]
	comisd	xmm0, QWORD PTR _L$3[ebp]
	jbe	SHORT $LN32@Silhouette

; 98   :                         ApplySilhouetteColor = TRUE;

	mov	DWORD PTR _ApplySilhouetteColor$9[ebp], 1
$LN32@Silhouette:

; 99   :                 }
; 100  :             }
; 101  :             if (ApplySilhouetteColor)

	cmp	DWORD PTR _ApplySilhouetteColor$9[ebp], 0
	je	SHORT $LN33@Silhouette

; 102  :             {
; 103  :                 Dest[Index + 3] = SilhouetteA;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index$10[ebp]
	mov	dl, BYTE PTR _SilhouetteA$[ebp]
	mov	BYTE PTR [ecx+3], dl

; 104  :                 Dest[Index + 2] = SilhouetteR;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index$10[ebp]
	mov	cl, BYTE PTR _SilhouetteR$[ebp]
	mov	BYTE PTR [eax+2], cl

; 105  :                 Dest[Index + 1] = SilhouetteG;

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _Index$10[ebp]
	mov	al, BYTE PTR _SilhouetteG$[ebp]
	mov	BYTE PTR [edx+1], al

; 106  :                 Dest[Index + 0] = SilhouetteB;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index$10[ebp]
	mov	dl, BYTE PTR _SilhouetteB$[ebp]
	mov	BYTE PTR [ecx], dl

; 107  :             }
; 108  :             else

	jmp	SHORT $LN34@Silhouette
$LN33@Silhouette:

; 109  :             {
; 110  :                 Dest[Index + 3] = A;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index$10[ebp]
	mov	cl, BYTE PTR _A$11[ebp]
	mov	BYTE PTR [eax+3], cl

; 111  :                 Dest[Index + 2] = R;

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _Index$10[ebp]
	mov	al, BYTE PTR _R$14[ebp]
	mov	BYTE PTR [edx+2], al

; 112  :                 Dest[Index + 1] = G;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index$10[ebp]
	mov	dl, BYTE PTR _G$13[ebp]
	mov	BYTE PTR [ecx+1], dl

; 113  :                 Dest[Index + 0] = B;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index$10[ebp]
	mov	cl, BYTE PTR _B$12[ebp]
	mov	BYTE PTR [eax], cl
$LN34@Silhouette:

; 114  :             }
; 115  :         }

	jmp	$LN5@Silhouette
$LN6@Silhouette:

; 116  :     }

	jmp	$LN2@Silhouette
$LN3@Silhouette:

; 117  : 
; 118  :     return Success;

	xor	eax, eax
$LN1@Silhouette:

; 119  : }

	mov	esp, ebp
	pop	ebp
	ret	80					; 00000050H
_SilhouetteIf@80 ENDP
_TEXT	ENDS
END
