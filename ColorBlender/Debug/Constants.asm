; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Users\Stuart\Desktop\Projects4\ColorBlend\ColorBlender\Constants.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG110244 DB	00H, 00H
	ORG $+2
$SG110246 DB	'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, '.', 00H
	DB	00H, 00H
$SG110248 DB	'O', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 's'
	DB	00H, ' ', 00H, 's', 00H, 'u', 00H, 'c', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, 's', 00H, 'f', 00H, 'u', 00H, 'l', 00H, '.', 00H, 00H
	DB	00H
$SG110250 DB	'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, ',', 00H, ' ', 00H, 'u', 00H, 'n', 00H, 's', 00H, 'p'
	DB	00H, 'e', 00H, 'c', 00H, 'i', 00H, 'f', 00H, 'i', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r'
	DB	00H, '.', 00H, 00H, 00H
$SG110252 DB	'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'l', 00H, 'i', 00H, 'e'
	DB	00H, 'd', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'f', 00H
	DB	'u', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, ' ', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, '.', 00H, 00H, 00H
$SG110254 DB	'P', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'l'
	DB	00H, 'i', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 't', 00H, 'o', 00H
	DB	' ', 00H, 'f', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H
	DB	'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, '.', 00H, 00H, 00H
$SG110256 DB	'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H
	DB	'i', 00H, 's', 00H, ' ', 00H, 'n', 00H, 'e', 00H, 'g', 00H, 'a'
	DB	00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG110258 DB	'S', 00H, 'e', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'd', 00H
	DB	'a', 00H, 'r', 00H, 'y', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'x', 00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd'
	DB	00H, '.', 00H, 00H, 00H
$SG110278 DB	'I', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 's', 00H
	DB	' ', 00H, 'd', 00H, 'o', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't'
	DB	00H, ' ', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'c', 00H, 'h', 00H
	DB	'.', 00H, 00H, 00H
	ORG $+2
$SG110260 DB	'S', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'l', 00H, 'i', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x'
	DB	00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '.', 00H, 00H, 00H
$SG110262 DB	'D', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H, 'a', 00H
	DB	'y', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ' '
	DB	00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 'd', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG110264 DB	'D', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H, 'a', 00H
	DB	'y', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ' '
	DB	00H, 'i', 00H, 's', 00H, ' ', 00H, 'e', 00H, 'm', 00H, 'p', 00H
	DB	't', 00H, 'y', 00H, ' ', 00H, 'w', 00H, 'h', 00H, 'e', 00H, 'n'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'e', 00H
	DB	'm', 00H, 'p', 00H, 't', 00H, 'l', 00H, 'y', 00H, ' ', 00H, 'l'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, ' ', 00H, 'e', 00H, 'x', 00H
	DB	'p', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'e', 00H, 'd', 00H, '.'
	DB	00H, 00H, 00H
	ORG $+2
$SG110266 DB	'V', 00H, 'i', 00H, 'r', 00H, 't', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 't', 00H, 'y'
	DB	00H, ' ', 00H, 'd', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H
	DB	'a', 00H, 'y', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't'
	DB	00H, '.', 00H, 00H, 00H
$SG110280 DB	'I', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 's', 00H
	DB	' ', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'c', 00H, 'h', 00H, '.'
	DB	00H, 00H, 00H
$SG110268 DB	'D', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H, 'a', 00H
	DB	'y', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'u', 00H, 'n', 00H, 'k'
	DB	00H, 'n', 00H, 'o', 00H, 'w', 00H, 'n', 00H, ' ', 00H, 'o', 00H
	DB	'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, '.'
	DB	00H, 00H, 00H
$SG110270 DB	'O', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 's'
	DB	00H, ' ', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG110272 DB	'N', 00H, 'o', 00H, ' ', 00H, 'a', 00H, 'c', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'k'
	DB	00H, 'e', 00H, 'n', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'c', 00H
	DB	'a', 00H, 'u', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, 'p', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'd', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 't'
	DB	00H, 'h', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 't', 00H
	DB	'o', 00H, ' ', 00H, 'd', 00H, 'o', 00H, '.', 00H, 00H, 00H
$SG110274 DB	'A', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 'r', 00H, 'm', 00H
	DB	'a', 00H, 'l', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'u'
	DB	00H, 'e', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 's', 00H, ' ', 00H
	DB	'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 'r'
	DB	00H, 'm', 00H, 'a', 00H, 'l', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG110276 DB	'R', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, 's', 00H
	DB	't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'c', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'i', 00H, 's', 00H
	DB	' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'i', 00H, 'm'
	DB	00H, 'p', 00H, 'l', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'd', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG110282 DB	'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'f', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, '.'
	DB	00H, 00H, 00H
	ORG $+2
$SG110300 DB	'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H
	DB	'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, 'o', 00H, ' ', 00H, 'b', 00H, 'i'
	DB	00H, 'g', 00H, 's', 00H, '.', 00H, 00H, 00H
$SG110284 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, ' '
	DB	00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, 'f', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, ' ', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG110286 DB	'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'u', 00H, 't', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'e'
	DB	00H, 'x', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H
	DB	'o', 00H, 'f', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i'
	DB	00H, 'd', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H
	DB	'e', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG110288 DB	'N', 00H, 'o', 00H, ' ', 00H, 'p', 00H, 'i', 00H, 'x', 00H
	DB	'e', 00H, 'l', 00H, 's', 00H, ' ', 00H, 's', 00H, 'e', 00H, 'l'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'w', 00H, 'i', 00H, 't', 00H, 'h', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, 'p', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'r', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG110306 DB	'B', 00H, 'a', 00H, 'd', 00H, ' ', 00H, 'r', 00H, 'o', 00H
	DB	't', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a'
	DB	00H, 'l', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H
	DB	'e', 00H, '.', 00H, 00H, 00H
$SG110290 DB	'S', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'l', 00H, 'i', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, '.'
	DB	00H, 00H, 00H
$SG110292 DB	'S', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'l', 00H, 'i', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H
	DB	' ', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'f', 00H, 'i'
	DB	00H, 'n', 00H, 'e', 00H, 'd', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG110294 DB	'T', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'e', 00H, 'r', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a'
	DB	00H, 'c', 00H, 'k', 00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H
	DB	'e', 00H, 'm', 00H, 'p', 00H, 't', 00H, 'y', 00H, ' ', 00H, '-'
	DB	00H, ' ', 00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'p', 00H, '.', 00H, 00H
	DB	00H
	ORG $+2
$SG110296 DB	'T', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'e', 00H, 'r', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a'
	DB	00H, 'c', 00H, 'k', 00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H
	DB	'f', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, '-', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'u', 00H, 's', 00H, 'h', 00H, '.', 00H, 00H
	DB	00H
	ORG $+2
$SG110298 DB	'V', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H
	DB	'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'm'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG110302 DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l'
	DB	00H, 'i', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e'
	DB	00H, 'd', 00H, ' ', 00H, '-', 00H, ' ', 00H, 'c', 00H, 'h', 00H
	DB	'e', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H
	DB	'c', 00H, 'k', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG110308 DB	00H, 00H
	ORG $+2
$SG110304 DB	'I', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, ' ', 00H
	DB	'd', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 's', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'o', 00H
	DB	' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'm', 00H, 'a'
	DB	00H, 't', 00H, 'c', 00H, 'h', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'x'
	DB	00H, 't', 00H, '.', 00H, 00H, 00H
$SG110309 DB	00H, 00H
CONST	ENDS
PUBLIC	_ErrorConstantToString@4
EXTRN	__imp__SysAllocString@4:PROC
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\constants.cpp
_TEXT	SEGMENT
tv67 = -4						; size = 4
_ErrorConstant$ = 8					; size = 4
_ErrorConstantToString@4 PROC

; 17   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 18   :     if (ErrorConstant < NotSet)

	cmp	DWORD PTR _ErrorConstant$[ebp], -1
	jge	SHORT $LN4@ErrorConst

; 19   :     {
; 20   :         return ::SysAllocString((const OLECHAR*)L"");

	push	OFFSET $SG110244
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN4@ErrorConst:

; 21   :     }
; 22   : 
; 23   :     switch (ErrorConstant)

	mov	eax, DWORD PTR _ErrorConstant$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	add	ecx, 1
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 30			; 0000001eH
	ja	$LN36@ErrorConst
	mov	edx, DWORD PTR tv67[ebp]
	jmp	DWORD PTR $LN38@ErrorConst[edx*4]
$LN5@ErrorConst:

; 24   :     {
; 25   :     case NotSet:
; 26   :         return ::SysAllocString((const OLECHAR*)L"Error code not set.");

	push	OFFSET $SG110246
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN6@ErrorConst:

; 27   : 
; 28   :     case Success:
; 29   :         return ::SysAllocString((const OLECHAR*)L"Operation was successful.");

	push	OFFSET $SG110248
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN7@ErrorConst:

; 30   : 
; 31   :     case Error:
; 32   :         return ::SysAllocString((const OLECHAR*)L"General, unspecified error.");

	push	OFFSET $SG110250
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN8@ErrorConst:

; 33   : 
; 34   :     case BadIndex:
; 35   :         return ::SysAllocString((const OLECHAR*)L"Index supplied to function invalid.");

	push	OFFSET $SG110252
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN9@ErrorConst:

; 36   : 
; 37   :     case NullPointer:
; 38   :         return ::SysAllocString((const OLECHAR*)L"Pointer supplied to function is null.");

	push	OFFSET $SG110254
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN10@ErrorConst:

; 39   : 
; 40   :     case NegativeIndex:
; 41   :         return ::SysAllocString((const OLECHAR*)L"Index is negative.");

	push	OFFSET $SG110256
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN11@ErrorConst:

; 42   : 
; 43   :     case BadSecondaryIndex:
; 44   :         return ::SysAllocString((const OLECHAR*)L"Secondary index is invalid.");

	push	OFFSET $SG110258
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN12@ErrorConst:

; 45   : 
; 46   :     case IndexOutOfRange:
; 47   :         return ::SysAllocString((const OLECHAR*)L"Supplied or computed index is out of range.");

	push	OFFSET $SG110260
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN13@ErrorConst:

; 48   : 
; 49   :     case DisplayListOperationFailed:
; 50   :         return ::SysAllocString((const OLECHAR*)L"Display list operation failed.");

	push	OFFSET $SG110262
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN14@ErrorConst:

; 51   : 
; 52   :     case EmptyDisplayList:
; 53   :         return ::SysAllocString((const OLECHAR*)L"Display list is empty when non-emptly list expected.");

	push	OFFSET $SG110264
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN15@ErrorConst:

; 54   : 
; 55   :     case VirtualEmptyDisplayList:
; 56   :         return ::SysAllocString((const OLECHAR*)L"Virtual empty display list.");

	push	OFFSET $SG110266
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN16@ErrorConst:

; 57   : 
; 58   :     case UnknownDisplayListOperand:
; 59   :         return ::SysAllocString((const OLECHAR*)L"Display list contained unknown operand.");

	push	OFFSET $SG110268
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN17@ErrorConst:

; 60   : 
; 61   :     case InvalidOperation:
; 62   :         return ::SysAllocString((const OLECHAR*)L"Operation was invalid.");

	push	OFFSET $SG110270
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN18@ErrorConst:

; 63   : 
; 64   :     case NoActionTaken:
; 65   :         return ::SysAllocString((const OLECHAR*)L"No action taken because input did not result in anything to do.");

	push	OFFSET $SG110272
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN19@ErrorConst:

; 66   : 
; 67   :     case NormalNonNormal:
; 68   :         return ::SysAllocString((const OLECHAR*)L"A normal value was not normal.");

	push	OFFSET $SG110274
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN20@ErrorConst:

; 69   : 
; 70   :     case NotImplemented:
; 71   :         return ::SysAllocString((const OLECHAR*)L"Requested action is not implemented.");

	push	OFFSET $SG110276
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN21@ErrorConst:

; 72   : 
; 73   :     case ImageMismatch:
; 74   :         return ::SysAllocString((const OLECHAR*)L"Images do not match.");

	push	OFFSET $SG110278
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN22@ErrorConst:

; 75   : 
; 76   :     case ImagesMatch:
; 77   :         return ::SysAllocString((const OLECHAR*)L"Images match.");

	push	OFFSET $SG110280
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN23@ErrorConst:

; 78   : 
; 79   :     case HeaderNotFound:
; 80   :         return ::SysAllocString((const OLECHAR*)L"Expected header not found.");

	push	OFFSET $SG110282
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN24@ErrorConst:

; 81   : 
; 82   :     case HeaderBadDataType:
; 83   :         return ::SysAllocString((const OLECHAR*)L"Invalid data type found in header.");

	push	OFFSET $SG110284
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN25@ErrorConst:

; 84   : 
; 85   :     case ComputedIndexOutOfRange:
; 86   :         return ::SysAllocString((const OLECHAR*)L"Computed index out of valid range.");

	push	OFFSET $SG110286
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN26@ErrorConst:

; 87   : 
; 88   :     case NoPixelsSelected:
; 89   :         return ::SysAllocString((const OLECHAR*)L"No pixels selected with input range.");

	push	OFFSET $SG110288
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN27@ErrorConst:

; 90   : 
; 91   :     case InvalidRegion:
; 92   :         return ::SysAllocString((const OLECHAR*)L"Supplied or computed region is invalid.");

	push	OFFSET $SG110290
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@ErrorConst
$LN28@ErrorConst:

; 93   : 
; 94   :     case UnknownErrorCode:
; 95   :         return ::SysAllocString((const OLECHAR*)L"Supplied error code undefined.");

	push	OFFSET $SG110292
	call	DWORD PTR __imp__SysAllocString@4
	jmp	SHORT $LN1@ErrorConst
$LN29@ErrorConst:

; 96   : 
; 97   :     case ErrorStackIsEmpty:
; 98   :         return ::SysAllocString((const OLECHAR *)L"The error stack is empty - cannot pop.");

	push	OFFSET $SG110294
	call	DWORD PTR __imp__SysAllocString@4
	jmp	SHORT $LN1@ErrorConst
$LN30@ErrorConst:

; 99   : 
; 100  :     case ErrorStackIsFull:
; 101  :         return ::SysAllocString((const OLECHAR *)L"The error stack is full - cannot push.");

	push	OFFSET $SG110296
	call	DWORD PTR __imp__SysAllocString@4
	jmp	SHORT $LN1@ErrorConst
$LN31@ErrorConst:

; 102  : 
; 103  :     case ValueTooSmall:
; 104  :         return ::SysAllocString((const OLECHAR *)L"Value for operation too small.");

	push	OFFSET $SG110298
	call	DWORD PTR __imp__SysAllocString@4
	jmp	SHORT $LN1@ErrorConst
$LN32@ErrorConst:

; 105  : 
; 106  :     case ValueTooBig:
; 107  :         return ::SysAllocString((const OLECHAR *)L"Value for operation too bigs.");

	push	OFFSET $SG110300
	call	DWORD PTR __imp__SysAllocString@4
	jmp	SHORT $LN1@ErrorConst
$LN33@ErrorConst:

; 108  : 
; 109  :     case FailedParameterValidation:
; 110  :         return ::SysAllocString((const OLECHAR *)L"Parameter validation failed - check error stack.");

	push	OFFSET $SG110302
	call	DWORD PTR __imp__SysAllocString@4
	jmp	SHORT $LN1@ErrorConst
$LN34@ErrorConst:

; 111  : 
; 112  : 	case DimensionalMismatch:
; 113  : 		return ::SysAllocString((const OLECHAR *)L"Image dimensions do not match in context.");

	push	OFFSET $SG110304
	call	DWORD PTR __imp__SysAllocString@4
	jmp	SHORT $LN1@ErrorConst
$LN35@ErrorConst:

; 114  : 
; 115  : 	case BadRotation:
; 116  : 		return ::SysAllocString((const OLECHAR *)L"Bad rotational value.");

	push	OFFSET $SG110306
	call	DWORD PTR __imp__SysAllocString@4
	jmp	SHORT $LN1@ErrorConst
$LN36@ErrorConst:

; 117  : 
; 118  :     default:
; 119  :         return ::SysAllocString((const OLECHAR*)L"");

	push	OFFSET $SG110308
	call	DWORD PTR __imp__SysAllocString@4
	jmp	SHORT $LN1@ErrorConst

; 120  :     }
; 121  : 
; 122  :     return ::SysAllocString((const OLECHAR*)L"");

	push	OFFSET $SG110309
	call	DWORD PTR __imp__SysAllocString@4
$LN1@ErrorConst:

; 123  : }

	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN38@ErrorConst:
	DD	$LN5@ErrorConst
	DD	$LN6@ErrorConst
	DD	$LN7@ErrorConst
	DD	$LN8@ErrorConst
	DD	$LN9@ErrorConst
	DD	$LN10@ErrorConst
	DD	$LN11@ErrorConst
	DD	$LN12@ErrorConst
	DD	$LN13@ErrorConst
	DD	$LN14@ErrorConst
	DD	$LN15@ErrorConst
	DD	$LN16@ErrorConst
	DD	$LN17@ErrorConst
	DD	$LN18@ErrorConst
	DD	$LN19@ErrorConst
	DD	$LN20@ErrorConst
	DD	$LN21@ErrorConst
	DD	$LN22@ErrorConst
	DD	$LN23@ErrorConst
	DD	$LN24@ErrorConst
	DD	$LN25@ErrorConst
	DD	$LN26@ErrorConst
	DD	$LN27@ErrorConst
	DD	$LN28@ErrorConst
	DD	$LN29@ErrorConst
	DD	$LN30@ErrorConst
	DD	$LN31@ErrorConst
	DD	$LN32@ErrorConst
	DD	$LN33@ErrorConst
	DD	$LN34@ErrorConst
	DD	$LN35@ErrorConst
_ErrorConstantToString@4 ENDP
_TEXT	ENDS
END
