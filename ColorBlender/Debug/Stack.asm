; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Users\Stuart\Desktop\Projects4\ColorBlend\ColorBlender\Stack.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?ErrorStack@@3PAPAUErrorInfo@@A			; ErrorStack
PUBLIC	?Separator@@3PADA				; Separator
_BSS	SEGMENT
?ErrorStack@@3PAPAUErrorInfo@@A DD 064H DUP (?)		; ErrorStack
?Separator@@3PADA DB 064H DUP (?)			; Separator
_BSS	ENDS
CONST	SEGMENT
$SG110260 DB	00H
$SG110296 DB	00H
	ORG $+2
$SG110295 DB	00H, 00H
	ORG $+2
$SG110297 DB	'%d', 00H
	ORG $+1
$SG110315 DB	00H, 00H
	ORG $+2
$SG110317 DB	00H, 00H
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YGXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	_InitializeErrorStack@4
PUBLIC	_SetSeparator@4
PUBLIC	_GetSeparator@0
PUBLIC	_ErrorStackPush@8
PUBLIC	_ErrorStackPush2@12
PUBLIC	_ErrorStackPush3@4
PUBLIC	_ErrorStackPushReturn@8
PUBLIC	_ErrorStackPushReturn2@12
PUBLIC	_AssembleErrorStack@8
PUBLIC	_ErrorTop@0
PUBLIC	_ErrorTop2@4
PUBLIC	_ErrorPop@0
PUBLIC	_ErrorPop2@4
PUBLIC	_PopErrorCode@0
PUBLIC	_ErrorStackClear@0
PUBLIC	_ErrorStackEmpty@0
PUBLIC	_ErrorStackFull@0
PUBLIC	_FirstEmptyIndex@0
PUBLIC	_ErrorStackTopIndex@0
PUBLIC	_ErrorStackSize@0
PUBLIC	_GetErrorStackCapacity@0
PUBLIC	_CanPush@0
PUBLIC	??$strcpy_s@$0GE@@@YAHAAY0GE@DPBD@Z		; strcpy_s<100>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__strcpy_s:PROC
EXTRN	__imp__SysAllocString@4:PROC
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\string.h
;	COMDAT ??$strcpy_s@$0GE@@@YAHAAY0GE@DPBD@Z
_TEXT	SEGMENT
__Destination$ = 8					; size = 4
__Source$ = 12						; size = 4
??$strcpy_s@$0GE@@@YAHAAY0GE@DPBD@Z PROC		; strcpy_s<100>, COMDAT

; 127  :     )

	push	ebp
	mov	ebp, esp

; 123  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1(

	mov	eax, DWORD PTR __Source$[ebp]
	push	eax
	push	100					; 00000064H
	mov	ecx, DWORD PTR __Destination$[ebp]
	push	ecx
	call	DWORD PTR __imp__strcpy_s
	add	esp, 12					; 0000000cH
	pop	ebp
	ret	0
??$strcpy_s@$0GE@@@YAHAAY0GE@DPBD@Z ENDP		; strcpy_s<100>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
tv66 = -4						; size = 4
_CanPush@0 PROC

; 227  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 228  :     return ErrorStackFull() ? FALSE : TRUE;

	call	_ErrorStackFull@0
	test	eax, eax
	je	SHORT $LN3@CanPush
	mov	DWORD PTR tv66[ebp], 0
	jmp	SHORT $LN4@CanPush
$LN3@CanPush:
	mov	DWORD PTR tv66[ebp], 1
$LN4@CanPush:
	mov	eax, DWORD PTR tv66[ebp]

; 229  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_CanPush@0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
_GetErrorStackCapacity@0 PROC

; 232  : {

	push	ebp
	mov	ebp, esp

; 233  :     return ErrorStackCapacity;

	mov	eax, 100				; 00000064H

; 234  : }

	pop	ebp
	ret	0
_GetErrorStackCapacity@0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
_ErrorStackSize@0 PROC

; 220  : {

	push	ebp
	mov	ebp, esp

; 221  :     if (FirstEmptyIndex() == -1)

	call	_FirstEmptyIndex@0
	cmp	eax, -1
	jne	SHORT $LN2@ErrorStack

; 222  :         return ErrorStackCapacity;

	mov	eax, 100				; 00000064H
	jmp	SHORT $LN1@ErrorStack
$LN2@ErrorStack:

; 223  :     return FirstEmptyIndex() + 1;

	call	_FirstEmptyIndex@0
	add	eax, 1
$LN1@ErrorStack:

; 224  : }

	pop	ebp
	ret	0
_ErrorStackSize@0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
_FirstEmpty$ = -4					; size = 4
_ErrorStackTopIndex@0 PROC

; 210  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 211  :     int FirstEmpty = FirstEmptyIndex();

	call	_FirstEmptyIndex@0
	mov	DWORD PTR _FirstEmpty$[ebp], eax

; 212  :     if (FirstEmpty == -1)

	cmp	DWORD PTR _FirstEmpty$[ebp], -1
	jne	SHORT $LN2@ErrorStack

; 213  :         return ErrorStackCapacity - 1;

	mov	eax, 99					; 00000063H
	jmp	SHORT $LN1@ErrorStack
$LN2@ErrorStack:

; 214  :     if (FirstEmpty == 0)

	cmp	DWORD PTR _FirstEmpty$[ebp], 0
	jne	SHORT $LN3@ErrorStack

; 215  :         return -1;

	or	eax, -1
	jmp	SHORT $LN1@ErrorStack
$LN3@ErrorStack:

; 216  :     return FirstEmpty - 1;

	mov	eax, DWORD PTR _FirstEmpty$[ebp]
	sub	eax, 1
$LN1@ErrorStack:

; 217  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ErrorStackTopIndex@0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_FirstEmptyIndex@0 PROC

; 202  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 203  :     for (int i = 0; i < ErrorStackCapacity; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@FirstEmpty
$LN2@FirstEmpty:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@FirstEmpty:
	cmp	DWORD PTR _i$1[ebp], 100		; 00000064H
	jge	SHORT $LN3@FirstEmpty

; 204  :         if (ErrorStack[i] == NULL)

	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	DWORD PTR ?ErrorStack@@3PAPAUErrorInfo@@A[ecx*4], 0
	jne	SHORT $LN5@FirstEmpty

; 205  :             return i;

	mov	eax, DWORD PTR _i$1[ebp]
	jmp	SHORT $LN1@FirstEmpty
$LN5@FirstEmpty:

; 206  :     return -1;

	jmp	SHORT $LN2@FirstEmpty
$LN3@FirstEmpty:
	or	eax, -1
$LN1@FirstEmpty:

; 207  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_FirstEmptyIndex@0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
tv66 = -4						; size = 4
_ErrorStackFull@0 PROC

; 197  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 198  :     return FirstEmptyIndex() == -1 ? TRUE : FALSE;

	call	_FirstEmptyIndex@0
	cmp	eax, -1
	jne	SHORT $LN3@ErrorStack
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@ErrorStack
$LN3@ErrorStack:
	mov	DWORD PTR tv66[ebp], 0
$LN4@ErrorStack:
	mov	eax, DWORD PTR tv66[ebp]

; 199  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ErrorStackFull@0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
tv66 = -4						; size = 4
_ErrorStackEmpty@0 PROC

; 192  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 193  :     return FirstEmptyIndex() == 0 ? TRUE : FALSE;

	call	_FirstEmptyIndex@0
	test	eax, eax
	jne	SHORT $LN3@ErrorStack
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@ErrorStack
$LN3@ErrorStack:
	mov	DWORD PTR tv66[ebp], 0
$LN4@ErrorStack:
	mov	eax, DWORD PTR tv66[ebp]

; 194  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ErrorStackEmpty@0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 4
_FirstEmpty$ = -8					; size = 4
_i$2 = -4						; size = 4
_ErrorStackClear@0 PROC

; 180  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 181  :     int FirstEmpty = FirstEmptyIndex();

	call	_FirstEmptyIndex@0
	mov	DWORD PTR _FirstEmpty$[ebp], eax

; 182  :     if (FirstEmpty == -1)

	cmp	DWORD PTR _FirstEmpty$[ebp], -1
	jne	SHORT $LN5@ErrorStack

; 183  :         FirstEmpty = ErrorStackCapacity;

	mov	DWORD PTR _FirstEmpty$[ebp], 100	; 00000064H
$LN5@ErrorStack:

; 184  :     for (int i = 0; i < FirstEmpty; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ErrorStack
$LN2@ErrorStack:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@ErrorStack:
	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	ecx, DWORD PTR _FirstEmpty$[ebp]
	jge	SHORT $LN1@ErrorStack

; 185  :     {
; 186  :         delete ErrorStack[i];

	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR ?ErrorStack@@3PAPAUErrorInfo@@A[edx*4]
	mov	DWORD PTR $T1[ebp], eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 187  :         ErrorStack[i] = NULL;

	mov	edx, DWORD PTR _i$2[ebp]
	mov	DWORD PTR ?ErrorStack@@3PAPAUErrorInfo@@A[edx*4], 0

; 188  :     }

	jmp	SHORT $LN2@ErrorStack
$LN1@ErrorStack:

; 189  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_ErrorStackClear@0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
_ResultCode$ = -12					; size = 4
$T1 = -8						; size = 4
_TopIndex$ = -4						; size = 4
_PopErrorCode@0 PROC

; 135  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 136  :     if (ErrorStackEmpty())

	call	_ErrorStackEmpty@0
	test	eax, eax
	je	SHORT $LN2@PopErrorCo

; 137  :         return ErrorStackIsEmpty;

	mov	eax, 23					; 00000017H
	jmp	SHORT $LN1@PopErrorCo
$LN2@PopErrorCo:

; 138  :     int TopIndex = ErrorStackTopIndex();

	call	_ErrorStackTopIndex@0
	mov	DWORD PTR _TopIndex$[ebp], eax

; 139  :     if (TopIndex == -1)

	cmp	DWORD PTR _TopIndex$[ebp], -1
	jne	SHORT $LN3@PopErrorCo

; 140  :         return ErrorStackIsEmpty;

	mov	eax, 23					; 00000017H
	jmp	SHORT $LN1@PopErrorCo
$LN3@PopErrorCo:

; 141  :     int ResultCode = ErrorStack[TopIndex]->ErrorCode;

	mov	eax, DWORD PTR _TopIndex$[ebp]
	mov	ecx, DWORD PTR ?ErrorStack@@3PAPAUErrorInfo@@A[eax*4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _ResultCode$[ebp], edx

; 142  :     delete ErrorStack[TopIndex];

	mov	eax, DWORD PTR _TopIndex$[ebp]
	mov	ecx, DWORD PTR ?ErrorStack@@3PAPAUErrorInfo@@A[eax*4]
	mov	DWORD PTR $T1[ebp], ecx
	push	12					; 0000000cH
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 143  :     ErrorStack[TopIndex] = NULL;

	mov	eax, DWORD PTR _TopIndex$[ebp]
	mov	DWORD PTR ?ErrorStack@@3PAPAUErrorInfo@@A[eax*4], 0

; 144  :     return ResultCode;

	mov	eax, DWORD PTR _ResultCode$[ebp]
$LN1@PopErrorCo:

; 145  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_PopErrorCode@0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
_Top$ = -12						; size = 4
$T1 = -8						; size = 4
_TopIndex$ = -4						; size = 4
_Sep$ = 8						; size = 4
_ErrorPop2@4 PROC

; 163  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 164  :     BSTR Top = ErrorTop2(Sep);

	mov	eax, DWORD PTR _Sep$[ebp]
	push	eax
	call	_ErrorTop2@4
	mov	DWORD PTR _Top$[ebp], eax

; 165  :     int TopIndex = ErrorStackTopIndex();

	call	_ErrorStackTopIndex@0
	mov	DWORD PTR _TopIndex$[ebp], eax

; 166  :     if (TopIndex != -1)

	cmp	DWORD PTR _TopIndex$[ebp], -1
	je	SHORT $LN2@ErrorPop2

; 167  :     {
; 168  :         delete ErrorStack[TopIndex];

	mov	ecx, DWORD PTR _TopIndex$[ebp]
	mov	edx, DWORD PTR ?ErrorStack@@3PAPAUErrorInfo@@A[ecx*4]
	mov	DWORD PTR $T1[ebp], edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 169  :         ErrorStack[TopIndex] = NULL;

	mov	ecx, DWORD PTR _TopIndex$[ebp]
	mov	DWORD PTR ?ErrorStack@@3PAPAUErrorInfo@@A[ecx*4], 0
$LN2@ErrorPop2:

; 170  :     }
; 171  :     return Top;

	mov	eax, DWORD PTR _Top$[ebp]

; 172  : }

	mov	esp, ebp
	pop	ebp
	ret	4
_ErrorPop2@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
_ErrorPop@0 PROC

; 175  : {

	push	ebp
	mov	ebp, esp

; 176  :     return ErrorPop2(Separator);

	push	OFFSET ?Separator@@3PADA		; Separator
	call	_ErrorPop2@4

; 177  : }

	pop	ebp
	ret	0
_ErrorPop@0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
_TopIndex$ = -4						; size = 4
_Sep$ = 8						; size = 4
_ErrorTop2@4 PROC

; 148  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 149  :     if (ErrorStackEmpty())

	call	_ErrorStackEmpty@0
	test	eax, eax
	je	SHORT $LN2@ErrorTop2

; 150  :         return ::SysAllocString((const OLECHAR *)L"");

	push	OFFSET $SG110315
	call	DWORD PTR __imp__SysAllocString@4
	jmp	SHORT $LN1@ErrorTop2
$LN2@ErrorTop2:

; 151  :     int TopIndex = ErrorStackTopIndex();

	call	_ErrorStackTopIndex@0
	mov	DWORD PTR _TopIndex$[ebp], eax

; 152  :     if (TopIndex == -1)

	cmp	DWORD PTR _TopIndex$[ebp], -1
	jne	SHORT $LN3@ErrorTop2

; 153  :         return ::SysAllocString((const OLECHAR *)L"");

	push	OFFSET $SG110317
	call	DWORD PTR __imp__SysAllocString@4
	jmp	SHORT $LN1@ErrorTop2
$LN3@ErrorTop2:

; 154  :     return AssembleErrorStack(ErrorStack[TopIndex], Sep);

	mov	eax, DWORD PTR _Sep$[ebp]
	push	eax
	mov	ecx, DWORD PTR _TopIndex$[ebp]
	mov	edx, DWORD PTR ?ErrorStack@@3PAPAUErrorInfo@@A[ecx*4]
	push	edx
	call	_AssembleErrorStack@8
$LN1@ErrorTop2:

; 155  : }

	mov	esp, ebp
	pop	ebp
	ret	4
_ErrorTop2@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
_ErrorTop@0 PROC

; 158  : {

	push	ebp
	mov	ebp, esp

; 159  :     return ErrorTop2(Separator);

	push	OFFSET ?Separator@@3PADA		; Separator
	call	_ErrorTop2@4

; 160  : }

	pop	ebp
	ret	0
_ErrorTop@0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
tv280 = -116						; size = 4
tv279 = -112						; size = 4
tv247 = -108						; size = 4
tv246 = -104						; size = 4
tv214 = -100						; size = 4
tv213 = -96						; size = 4
tv182 = -92						; size = 4
tv181 = -88						; size = 4
tv149 = -84						; size = 4
tv148 = -80						; size = 4
tv271 = -76						; size = 4
tv238 = -72						; size = 4
tv205 = -68						; size = 4
tv173 = -64						; size = 4
tv140 = -60						; size = 4
tv283 = -56						; size = 4
tv250 = -52						; size = 4
tv217 = -48						; size = 4
tv185 = -44						; size = 4
tv152 = -40						; size = 4
tv269 = -36						; size = 4
tv236 = -32						; size = 4
tv203 = -28						; size = 4
tv171 = -24						; size = 4
tv138 = -20						; size = 4
_stemp$ = -16						; size = 4
tv286 = -10						; size = 1
tv274 = -9						; size = 1
tv253 = -8						; size = 1
tv241 = -7						; size = 1
tv220 = -6						; size = 1
tv208 = -5						; size = 1
tv188 = -4						; size = 1
tv176 = -3						; size = 1
tv155 = -2						; size = 1
tv143 = -1						; size = 1
_Info$ = 8						; size = 4
_Sep$ = 12						; size = 4
_AssembleErrorStack@8 PROC

; 112  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	esi
	push	edi

; 113  :     if (Info == NULL)

	cmp	DWORD PTR _Info$[ebp], 0
	jne	SHORT $LN2@AssembleEr

; 114  :         return ::SysAllocString((const OLECHAR *)L"");

	push	OFFSET $SG110295
	call	DWORD PTR __imp__SysAllocString@4
	jmp	$LN1@AssembleEr
$LN2@AssembleEr:

; 115  :     char *stemp = "";

	mov	DWORD PTR _stemp$[ebp], OFFSET $SG110296

; 116  :     sprintf(stemp, "%d", Info->ErrorCode);

	mov	eax, DWORD PTR _Info$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG110297
	mov	edx, DWORD PTR _stemp$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 117  :     if (Info->ErrorFunction != NULL)

	mov	eax, DWORD PTR _Info$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN3@AssembleEr

; 118  :     {
; 119  :         strcat(stemp, Sep);

	mov	ecx, DWORD PTR _Sep$[ebp]
	mov	DWORD PTR tv138[ebp], ecx
	mov	edx, DWORD PTR tv138[ebp]
	mov	DWORD PTR tv140[ebp], edx
$LL7@AssembleEr:
	mov	eax, DWORD PTR tv138[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv143[ebp], cl
	add	DWORD PTR tv138[ebp], 1
	cmp	BYTE PTR tv143[ebp], 0
	jne	SHORT $LL7@AssembleEr
	mov	edx, DWORD PTR tv138[ebp]
	sub	edx, DWORD PTR tv140[ebp]
	mov	eax, DWORD PTR tv140[ebp]
	mov	DWORD PTR tv148[ebp], eax
	mov	DWORD PTR tv149[ebp], edx
	mov	ecx, DWORD PTR _stemp$[ebp]
	add	ecx, -1
	mov	DWORD PTR tv152[ebp], ecx
$LL8@AssembleEr:
	mov	edx, DWORD PTR tv152[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv155[ebp], al
	add	DWORD PTR tv152[ebp], 1
	cmp	BYTE PTR tv155[ebp], 0
	jne	SHORT $LL8@AssembleEr
	mov	edi, DWORD PTR tv152[ebp]
	mov	esi, DWORD PTR tv148[ebp]
	mov	edx, DWORD PTR tv149[ebp]
	mov	ecx, edx
	shr	ecx, 2
	rep movsd
	mov	ecx, edx
	and	ecx, 3
	rep movsb

; 120  :         strcat(stemp, Info->ErrorFunction);

	mov	eax, DWORD PTR _Info$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv171[ebp], ecx
	mov	edx, DWORD PTR tv171[ebp]
	mov	DWORD PTR tv173[ebp], edx
$LL9@AssembleEr:
	mov	eax, DWORD PTR tv171[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv176[ebp], cl
	add	DWORD PTR tv171[ebp], 1
	cmp	BYTE PTR tv176[ebp], 0
	jne	SHORT $LL9@AssembleEr
	mov	edx, DWORD PTR tv171[ebp]
	sub	edx, DWORD PTR tv173[ebp]
	mov	eax, DWORD PTR tv173[ebp]
	mov	DWORD PTR tv181[ebp], eax
	mov	DWORD PTR tv182[ebp], edx
	mov	ecx, DWORD PTR _stemp$[ebp]
	add	ecx, -1
	mov	DWORD PTR tv185[ebp], ecx
$LL10@AssembleEr:
	mov	edx, DWORD PTR tv185[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv188[ebp], al
	add	DWORD PTR tv185[ebp], 1
	cmp	BYTE PTR tv188[ebp], 0
	jne	SHORT $LL10@AssembleEr
	mov	edi, DWORD PTR tv185[ebp]
	mov	esi, DWORD PTR tv181[ebp]
	mov	edx, DWORD PTR tv182[ebp]
	mov	ecx, edx
	shr	ecx, 2
	rep movsd
	mov	ecx, edx
	and	ecx, 3
	rep movsb

; 121  :     }
; 122  :     else

	jmp	SHORT $LN4@AssembleEr
$LN3@AssembleEr:

; 123  :     {
; 124  :         strcat(stemp, Sep);

	mov	eax, DWORD PTR _Sep$[ebp]
	mov	DWORD PTR tv203[ebp], eax
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR tv205[ebp], ecx
$LL11@AssembleEr:
	mov	edx, DWORD PTR tv203[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv208[ebp], al
	add	DWORD PTR tv203[ebp], 1
	cmp	BYTE PTR tv208[ebp], 0
	jne	SHORT $LL11@AssembleEr
	mov	ecx, DWORD PTR tv203[ebp]
	sub	ecx, DWORD PTR tv205[ebp]
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR tv213[ebp], edx
	mov	DWORD PTR tv214[ebp], ecx
	mov	eax, DWORD PTR _stemp$[ebp]
	add	eax, -1
	mov	DWORD PTR tv217[ebp], eax
$LL12@AssembleEr:
	mov	ecx, DWORD PTR tv217[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv220[ebp], dl
	add	DWORD PTR tv217[ebp], 1
	cmp	BYTE PTR tv220[ebp], 0
	jne	SHORT $LL12@AssembleEr
	mov	edi, DWORD PTR tv217[ebp]
	mov	esi, DWORD PTR tv213[ebp]
	mov	eax, DWORD PTR tv214[ebp]
	mov	ecx, eax
	shr	ecx, 2
	rep movsd
	mov	ecx, eax
	and	ecx, 3
	rep movsb
$LN4@AssembleEr:

; 125  :     }
; 126  :     if (Info->Tag != NULL)

	mov	ecx, DWORD PTR _Info$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	$LN5@AssembleEr

; 127  :     {
; 128  :         strcat(stemp, Sep);

	mov	edx, DWORD PTR _Sep$[ebp]
	mov	DWORD PTR tv236[ebp], edx
	mov	eax, DWORD PTR tv236[ebp]
	mov	DWORD PTR tv238[ebp], eax
$LL13@AssembleEr:
	mov	ecx, DWORD PTR tv236[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv241[ebp], dl
	add	DWORD PTR tv236[ebp], 1
	cmp	BYTE PTR tv241[ebp], 0
	jne	SHORT $LL13@AssembleEr
	mov	eax, DWORD PTR tv236[ebp]
	sub	eax, DWORD PTR tv238[ebp]
	mov	ecx, DWORD PTR tv238[ebp]
	mov	DWORD PTR tv246[ebp], ecx
	mov	DWORD PTR tv247[ebp], eax
	mov	edx, DWORD PTR _stemp$[ebp]
	add	edx, -1
	mov	DWORD PTR tv250[ebp], edx
$LL14@AssembleEr:
	mov	eax, DWORD PTR tv250[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv253[ebp], cl
	add	DWORD PTR tv250[ebp], 1
	cmp	BYTE PTR tv253[ebp], 0
	jne	SHORT $LL14@AssembleEr
	mov	edi, DWORD PTR tv250[ebp]
	mov	esi, DWORD PTR tv246[ebp]
	mov	edx, DWORD PTR tv247[ebp]
	mov	ecx, edx
	shr	ecx, 2
	rep movsd
	mov	ecx, edx
	and	ecx, 3
	rep movsb

; 129  :         strcat(stemp, Info->Tag);

	mov	eax, DWORD PTR _Info$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv269[ebp], ecx
	mov	edx, DWORD PTR tv269[ebp]
	mov	DWORD PTR tv271[ebp], edx
$LL15@AssembleEr:
	mov	eax, DWORD PTR tv269[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv274[ebp], cl
	add	DWORD PTR tv269[ebp], 1
	cmp	BYTE PTR tv274[ebp], 0
	jne	SHORT $LL15@AssembleEr
	mov	edx, DWORD PTR tv269[ebp]
	sub	edx, DWORD PTR tv271[ebp]
	mov	eax, DWORD PTR tv271[ebp]
	mov	DWORD PTR tv279[ebp], eax
	mov	DWORD PTR tv280[ebp], edx
	mov	ecx, DWORD PTR _stemp$[ebp]
	add	ecx, -1
	mov	DWORD PTR tv283[ebp], ecx
$LL16@AssembleEr:
	mov	edx, DWORD PTR tv283[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv286[ebp], al
	add	DWORD PTR tv283[ebp], 1
	cmp	BYTE PTR tv286[ebp], 0
	jne	SHORT $LL16@AssembleEr
	mov	edi, DWORD PTR tv283[ebp]
	mov	esi, DWORD PTR tv279[ebp]
	mov	edx, DWORD PTR tv280[ebp]
	mov	ecx, edx
	shr	ecx, 2
	rep movsd
	mov	ecx, edx
	and	ecx, 3
	rep movsb
$LN5@AssembleEr:

; 130  :     }
; 131  :     return ::SysAllocString((const OLECHAR *)stemp);

	mov	eax, DWORD PTR _stemp$[ebp]
	push	eax
	call	DWORD PTR __imp__SysAllocString@4
$LN1@AssembleEr:

; 132  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
_AssembleErrorStack@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
_ErrorMessage$1 = -76					; size = 4
tv135 = -72						; size = 4
tv85 = -68						; size = 4
_NewIndex$2 = -64					; size = 4
$T3 = -60						; size = 4
tv128 = -56						; size = 4
tv177 = -52						; size = 4
$T4 = -48						; size = 4
tv78 = -44						; size = 4
tv152 = -40						; size = 4
$T5 = -36						; size = 4
tv132 = -32						; size = 4
tv82 = -28						; size = 4
tv134 = -24						; size = 4
tv84 = -20						; size = 4
tv174 = -16						; size = 4
tv149 = -12						; size = 4
_Info$6 = -8						; size = 4
tv180 = -4						; size = 1
tv155 = -3						; size = 1
tv136 = -2						; size = 1
tv86 = -1						; size = 1
_ErrorCode$ = 8						; size = 4
_ErrorFunction$ = 12					; size = 4
_Tag$ = 16						; size = 4
_ErrorStackPushReturn2@12 PROC

; 95   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH

; 96   :     if (CanPush())

	call	_CanPush@0
	test	eax, eax
	je	$LN2@ErrorStack

; 97   :     {
; 98   :         ErrorInfo *Info = new ErrorInfo;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	eax, DWORD PTR $T5[ebp]
	mov	DWORD PTR _Info$6[ebp], eax

; 99   :         Info->ErrorCode = ErrorCode;

	mov	ecx, DWORD PTR _Info$6[ebp]
	mov	edx, DWORD PTR _ErrorCode$[ebp]
	mov	DWORD PTR [ecx], edx

; 100  :         Info->ErrorFunction = new char[strlen(ErrorFunction)];

	mov	eax, DWORD PTR _ErrorFunction$[ebp]
	mov	DWORD PTR tv149[ebp], eax
	mov	ecx, DWORD PTR tv149[ebp]
	add	ecx, 1
	mov	DWORD PTR tv152[ebp], ecx
$LL6@ErrorStack:
	mov	edx, DWORD PTR tv149[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv155[ebp], al
	add	DWORD PTR tv149[ebp], 1
	cmp	BYTE PTR tv155[ebp], 0
	jne	SHORT $LL6@ErrorStack
	mov	ecx, DWORD PTR tv149[ebp]
	sub	ecx, DWORD PTR tv152[ebp]
	mov	DWORD PTR tv78[ebp], ecx
	mov	edx, DWORD PTR tv78[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	eax, DWORD PTR _Info$6[ebp]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [eax+4], ecx

; 101  :         strcpy(Info->ErrorFunction, ErrorFunction);

	mov	edx, DWORD PTR _ErrorFunction$[ebp]
	mov	DWORD PTR tv82[ebp], edx
	mov	eax, DWORD PTR _Info$6[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv84[ebp], ecx
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR tv85[ebp], edx
$LN4@ErrorStack:
	mov	eax, DWORD PTR tv82[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv86[ebp], cl
	mov	edx, DWORD PTR tv84[ebp]
	mov	al, BYTE PTR tv86[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR tv82[ebp]
	add	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
	mov	edx, DWORD PTR tv84[ebp]
	add	edx, 1
	mov	DWORD PTR tv84[ebp], edx
	cmp	BYTE PTR tv86[ebp], 0
	jne	SHORT $LN4@ErrorStack

; 102  :         Info->Tag = new char[strlen(Tag)];

	mov	eax, DWORD PTR _Tag$[ebp]
	mov	DWORD PTR tv174[ebp], eax
	mov	ecx, DWORD PTR tv174[ebp]
	add	ecx, 1
	mov	DWORD PTR tv177[ebp], ecx
$LL7@ErrorStack:
	mov	edx, DWORD PTR tv174[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv180[ebp], al
	add	DWORD PTR tv174[ebp], 1
	cmp	BYTE PTR tv180[ebp], 0
	jne	SHORT $LL7@ErrorStack
	mov	ecx, DWORD PTR tv174[ebp]
	sub	ecx, DWORD PTR tv177[ebp]
	mov	DWORD PTR tv128[ebp], ecx
	mov	edx, DWORD PTR tv128[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR _Info$6[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+8], ecx

; 103  :         strcpy(Info->Tag, Tag);

	mov	edx, DWORD PTR _Tag$[ebp]
	mov	DWORD PTR tv132[ebp], edx
	mov	eax, DWORD PTR _Info$6[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv134[ebp], ecx
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR tv135[ebp], edx
$LN5@ErrorStack:
	mov	eax, DWORD PTR tv132[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv136[ebp], cl
	mov	edx, DWORD PTR tv134[ebp]
	mov	al, BYTE PTR tv136[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR tv132[ebp]
	add	ecx, 1
	mov	DWORD PTR tv132[ebp], ecx
	mov	edx, DWORD PTR tv134[ebp]
	add	edx, 1
	mov	DWORD PTR tv134[ebp], edx
	cmp	BYTE PTR tv136[ebp], 0
	jne	SHORT $LN5@ErrorStack

; 104  :         char *ErrorMessage = NULL;

	mov	DWORD PTR _ErrorMessage$1[ebp], 0

; 105  :         int NewIndex = FirstEmptyIndex();

	call	_FirstEmptyIndex@0
	mov	DWORD PTR _NewIndex$2[ebp], eax

; 106  :         ErrorStack[NewIndex] = Info;

	mov	eax, DWORD PTR _NewIndex$2[ebp]
	mov	ecx, DWORD PTR _Info$6[ebp]
	mov	DWORD PTR ?ErrorStack@@3PAPAUErrorInfo@@A[eax*4], ecx
$LN2@ErrorStack:

; 107  :     }
; 108  :     return ErrorCode;

	mov	eax, DWORD PTR _ErrorCode$[ebp]

; 109  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_ErrorStackPushReturn2@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
tv85 = -44						; size = 4
_NewIndex$1 = -40					; size = 4
$T2 = -36						; size = 4
tv78 = -32						; size = 4
tv134 = -28						; size = 4
$T3 = -24						; size = 4
tv82 = -20						; size = 4
_Info$4 = -16						; size = 4
tv84 = -12						; size = 4
tv131 = -8						; size = 4
tv137 = -2						; size = 1
tv86 = -1						; size = 1
_ErrorCode$ = 8						; size = 4
_ErrorFunction$ = 12					; size = 4
_ErrorStackPushReturn@8 PROC

; 81   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 82   :     if (CanPush())

	call	_CanPush@0
	test	eax, eax
	je	$LN2@ErrorStack

; 83   :     {
; 84   :         ErrorInfo *Info = new ErrorInfo;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _Info$4[ebp], eax

; 85   :         Info->ErrorCode = ErrorCode;

	mov	ecx, DWORD PTR _Info$4[ebp]
	mov	edx, DWORD PTR _ErrorCode$[ebp]
	mov	DWORD PTR [ecx], edx

; 86   :         Info->ErrorFunction = new char[strlen(ErrorFunction)];

	mov	eax, DWORD PTR _ErrorFunction$[ebp]
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR tv131[ebp]
	add	ecx, 1
	mov	DWORD PTR tv134[ebp], ecx
$LL5@ErrorStack:
	mov	edx, DWORD PTR tv131[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv137[ebp], al
	add	DWORD PTR tv131[ebp], 1
	cmp	BYTE PTR tv137[ebp], 0
	jne	SHORT $LL5@ErrorStack
	mov	ecx, DWORD PTR tv131[ebp]
	sub	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR tv78[ebp], ecx
	mov	edx, DWORD PTR tv78[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _Info$4[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+4], ecx

; 87   :         strcpy(Info->ErrorFunction, ErrorFunction);

	mov	edx, DWORD PTR _ErrorFunction$[ebp]
	mov	DWORD PTR tv82[ebp], edx
	mov	eax, DWORD PTR _Info$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv84[ebp], ecx
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR tv85[ebp], edx
$LN4@ErrorStack:
	mov	eax, DWORD PTR tv82[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv86[ebp], cl
	mov	edx, DWORD PTR tv84[ebp]
	mov	al, BYTE PTR tv86[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR tv82[ebp]
	add	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
	mov	edx, DWORD PTR tv84[ebp]
	add	edx, 1
	mov	DWORD PTR tv84[ebp], edx
	cmp	BYTE PTR tv86[ebp], 0
	jne	SHORT $LN4@ErrorStack

; 88   :         int NewIndex = FirstEmptyIndex();

	call	_FirstEmptyIndex@0
	mov	DWORD PTR _NewIndex$1[ebp], eax

; 89   :         ErrorStack[NewIndex] = Info;

	mov	eax, DWORD PTR _NewIndex$1[ebp]
	mov	ecx, DWORD PTR _Info$4[ebp]
	mov	DWORD PTR ?ErrorStack@@3PAPAUErrorInfo@@A[eax*4], ecx
$LN2@ErrorStack:

; 90   :     }
; 91   :     return ErrorCode;

	mov	eax, DWORD PTR _ErrorCode$[ebp]

; 92   : }

	mov	esp, ebp
	pop	ebp
	ret	8
_ErrorStackPushReturn@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
_NewIndex$ = -12					; size = 4
$T1 = -8						; size = 4
_Info$ = -4						; size = 4
_ErrorCode$ = 8						; size = 4
_ErrorStackPush3@4 PROC

; 69   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 70   :     if (!CanPush())

	call	_CanPush@0
	test	eax, eax
	jne	SHORT $LN2@ErrorStack

; 71   :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN1@ErrorStack
$LN2@ErrorStack:

; 72   :     ErrorInfo *Info = new ErrorInfo;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _Info$[ebp], eax

; 73   :     Info->ErrorCode = ErrorCode;

	mov	ecx, DWORD PTR _Info$[ebp]
	mov	edx, DWORD PTR _ErrorCode$[ebp]
	mov	DWORD PTR [ecx], edx

; 74   :     strcpy(Info->ErrorFunction, "");

	mov	eax, DWORD PTR _Info$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR $SG110260
	mov	BYTE PTR [ecx], dl

; 75   :     int NewIndex = FirstEmptyIndex();

	call	_FirstEmptyIndex@0
	mov	DWORD PTR _NewIndex$[ebp], eax

; 76   :     ErrorStack[NewIndex] = Info;

	mov	eax, DWORD PTR _NewIndex$[ebp]
	mov	ecx, DWORD PTR _Info$[ebp]
	mov	DWORD PTR ?ErrorStack@@3PAPAUErrorInfo@@A[eax*4], ecx

; 77   :     return TRUE;

	mov	eax, 1
$LN1@ErrorStack:

; 78   : }

	mov	esp, ebp
	pop	ebp
	ret	4
_ErrorStackPush3@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
tv135 = -72						; size = 4
tv85 = -68						; size = 4
_NewIndex$ = -64					; size = 4
$T1 = -60						; size = 4
tv128 = -56						; size = 4
tv178 = -52						; size = 4
$T2 = -48						; size = 4
tv78 = -44						; size = 4
tv153 = -40						; size = 4
$T3 = -36						; size = 4
tv132 = -32						; size = 4
tv82 = -28						; size = 4
tv134 = -24						; size = 4
tv84 = -20						; size = 4
tv175 = -16						; size = 4
tv150 = -12						; size = 4
_Info$ = -8						; size = 4
tv181 = -4						; size = 1
tv156 = -3						; size = 1
tv136 = -2						; size = 1
tv86 = -1						; size = 1
_ErrorCode$ = 8						; size = 4
_ErrorFunction$ = 12					; size = 4
_Tag$ = 16						; size = 4
_ErrorStackPush2@12 PROC

; 54   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H

; 55   :     if (!CanPush())

	call	_CanPush@0
	test	eax, eax
	jne	SHORT $LN2@ErrorStack

; 56   :         return FALSE;

	xor	eax, eax
	jmp	$LN1@ErrorStack
$LN2@ErrorStack:

; 57   :     ErrorInfo *Info = new ErrorInfo;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _Info$[ebp], eax

; 58   :     Info->ErrorCode = ErrorCode;

	mov	ecx, DWORD PTR _Info$[ebp]
	mov	edx, DWORD PTR _ErrorCode$[ebp]
	mov	DWORD PTR [ecx], edx

; 59   :     Info->ErrorFunction = new char[strlen(ErrorFunction)];

	mov	eax, DWORD PTR _ErrorFunction$[ebp]
	mov	DWORD PTR tv150[ebp], eax
	mov	ecx, DWORD PTR tv150[ebp]
	add	ecx, 1
	mov	DWORD PTR tv153[ebp], ecx
$LL6@ErrorStack:
	mov	edx, DWORD PTR tv150[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv156[ebp], al
	add	DWORD PTR tv150[ebp], 1
	cmp	BYTE PTR tv156[ebp], 0
	jne	SHORT $LL6@ErrorStack
	mov	ecx, DWORD PTR tv150[ebp]
	sub	ecx, DWORD PTR tv153[ebp]
	mov	DWORD PTR tv78[ebp], ecx
	mov	edx, DWORD PTR tv78[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR _Info$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+4], ecx

; 60   :     strcpy(Info->ErrorFunction, ErrorFunction);

	mov	edx, DWORD PTR _ErrorFunction$[ebp]
	mov	DWORD PTR tv82[ebp], edx
	mov	eax, DWORD PTR _Info$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv84[ebp], ecx
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR tv85[ebp], edx
$LN4@ErrorStack:
	mov	eax, DWORD PTR tv82[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv86[ebp], cl
	mov	edx, DWORD PTR tv84[ebp]
	mov	al, BYTE PTR tv86[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR tv82[ebp]
	add	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
	mov	edx, DWORD PTR tv84[ebp]
	add	edx, 1
	mov	DWORD PTR tv84[ebp], edx
	cmp	BYTE PTR tv86[ebp], 0
	jne	SHORT $LN4@ErrorStack

; 61   :     Info->Tag = new char[strlen(Tag)];

	mov	eax, DWORD PTR _Tag$[ebp]
	mov	DWORD PTR tv175[ebp], eax
	mov	ecx, DWORD PTR tv175[ebp]
	add	ecx, 1
	mov	DWORD PTR tv178[ebp], ecx
$LL7@ErrorStack:
	mov	edx, DWORD PTR tv175[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv181[ebp], al
	add	DWORD PTR tv175[ebp], 1
	cmp	BYTE PTR tv181[ebp], 0
	jne	SHORT $LL7@ErrorStack
	mov	ecx, DWORD PTR tv175[ebp]
	sub	ecx, DWORD PTR tv178[ebp]
	mov	DWORD PTR tv128[ebp], ecx
	mov	edx, DWORD PTR tv128[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _Info$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax+8], ecx

; 62   :     strcpy(Info->Tag, Tag);

	mov	edx, DWORD PTR _Tag$[ebp]
	mov	DWORD PTR tv132[ebp], edx
	mov	eax, DWORD PTR _Info$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv134[ebp], ecx
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR tv135[ebp], edx
$LN5@ErrorStack:
	mov	eax, DWORD PTR tv132[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv136[ebp], cl
	mov	edx, DWORD PTR tv134[ebp]
	mov	al, BYTE PTR tv136[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR tv132[ebp]
	add	ecx, 1
	mov	DWORD PTR tv132[ebp], ecx
	mov	edx, DWORD PTR tv134[ebp]
	add	edx, 1
	mov	DWORD PTR tv134[ebp], edx
	cmp	BYTE PTR tv136[ebp], 0
	jne	SHORT $LN5@ErrorStack

; 63   :     int NewIndex = FirstEmptyIndex();

	call	_FirstEmptyIndex@0
	mov	DWORD PTR _NewIndex$[ebp], eax

; 64   :     ErrorStack[NewIndex] = Info;

	mov	eax, DWORD PTR _NewIndex$[ebp]
	mov	ecx, DWORD PTR _Info$[ebp]
	mov	DWORD PTR ?ErrorStack@@3PAPAUErrorInfo@@A[eax*4], ecx

; 65   :     return TRUE;

	mov	eax, 1
$LN1@ErrorStack:

; 66   : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_ErrorStackPush2@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
tv85 = -44						; size = 4
_NewIndex$ = -40					; size = 4
$T1 = -36						; size = 4
tv78 = -32						; size = 4
tv135 = -28						; size = 4
$T2 = -24						; size = 4
tv82 = -20						; size = 4
_Info$ = -16						; size = 4
tv84 = -12						; size = 4
tv132 = -8						; size = 4
tv138 = -2						; size = 1
tv86 = -1						; size = 1
_ErrorCode$ = 8						; size = 4
_ErrorFunction$ = 12					; size = 4
_ErrorStackPush@8 PROC

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 42   :     if (!CanPush())

	call	_CanPush@0
	test	eax, eax
	jne	SHORT $LN2@ErrorStack

; 43   :         return FALSE;

	xor	eax, eax
	jmp	$LN1@ErrorStack
$LN2@ErrorStack:

; 44   :     ErrorInfo *Info = new ErrorInfo;

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _Info$[ebp], eax

; 45   :     Info->ErrorCode = ErrorCode;

	mov	ecx, DWORD PTR _Info$[ebp]
	mov	edx, DWORD PTR _ErrorCode$[ebp]
	mov	DWORD PTR [ecx], edx

; 46   :     Info->ErrorFunction = new char[strlen(ErrorFunction)];

	mov	eax, DWORD PTR _ErrorFunction$[ebp]
	mov	DWORD PTR tv132[ebp], eax
	mov	ecx, DWORD PTR tv132[ebp]
	add	ecx, 1
	mov	DWORD PTR tv135[ebp], ecx
$LL5@ErrorStack:
	mov	edx, DWORD PTR tv132[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv138[ebp], al
	add	DWORD PTR tv132[ebp], 1
	cmp	BYTE PTR tv138[ebp], 0
	jne	SHORT $LL5@ErrorStack
	mov	ecx, DWORD PTR tv132[ebp]
	sub	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR tv78[ebp], ecx
	mov	edx, DWORD PTR tv78[ebp]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _Info$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax+4], ecx

; 47   :     strcpy(Info->ErrorFunction, ErrorFunction);

	mov	edx, DWORD PTR _ErrorFunction$[ebp]
	mov	DWORD PTR tv82[ebp], edx
	mov	eax, DWORD PTR _Info$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv84[ebp], ecx
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR tv85[ebp], edx
$LN4@ErrorStack:
	mov	eax, DWORD PTR tv82[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv86[ebp], cl
	mov	edx, DWORD PTR tv84[ebp]
	mov	al, BYTE PTR tv86[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR tv82[ebp]
	add	ecx, 1
	mov	DWORD PTR tv82[ebp], ecx
	mov	edx, DWORD PTR tv84[ebp]
	add	edx, 1
	mov	DWORD PTR tv84[ebp], edx
	cmp	BYTE PTR tv86[ebp], 0
	jne	SHORT $LN4@ErrorStack

; 48   :     int NewIndex = FirstEmptyIndex();

	call	_FirstEmptyIndex@0
	mov	DWORD PTR _NewIndex$[ebp], eax

; 49   :     ErrorStack[NewIndex] = Info;

	mov	eax, DWORD PTR _NewIndex$[ebp]
	mov	ecx, DWORD PTR _Info$[ebp]
	mov	DWORD PTR ?ErrorStack@@3PAPAUErrorInfo@@A[eax*4], ecx

; 50   :     return TRUE;

	mov	eax, 1
$LN1@ErrorStack:

; 51   : }

	mov	esp, ebp
	pop	ebp
	ret	8
_ErrorStackPush@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
_GetSeparator@0 PROC

; 36   : {

	push	ebp
	mov	ebp, esp

; 37   :     return ::SysAllocString((const OLECHAR *)Separator);

	push	OFFSET ?Separator@@3PADA		; Separator
	call	DWORD PTR __imp__SysAllocString@4

; 38   : }

	pop	ebp
	ret	0
_GetSeparator@0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
tv67 = -16						; size = 4
tv75 = -12						; size = 4
tv72 = -8						; size = 4
tv78 = -1						; size = 1
_SeparatorString$ = 8					; size = 4
_SetSeparator@4 PROC

; 27   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 28   :     if (SeparatorString == NULL)

	cmp	DWORD PTR _SeparatorString$[ebp], 0
	jne	SHORT $LN2@SetSeparat

; 29   :         return;

	jmp	SHORT $LN1@SetSeparat
$LN2@SetSeparat:

; 30   :     if (strlen(SeparatorString) < 1)

	mov	eax, DWORD PTR _SeparatorString$[ebp]
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR tv72[ebp]
	add	ecx, 1
	mov	DWORD PTR tv75[ebp], ecx
$LL5@SetSeparat:
	mov	edx, DWORD PTR tv72[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv78[ebp], al
	add	DWORD PTR tv72[ebp], 1
	cmp	BYTE PTR tv78[ebp], 0
	jne	SHORT $LL5@SetSeparat
	mov	ecx, DWORD PTR tv72[ebp]
	sub	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 1
	jae	SHORT $LN3@SetSeparat

; 31   :         return;

	jmp	SHORT $LN1@SetSeparat
$LN3@SetSeparat:

; 32   :     strcpy_s(Separator, SeparatorString);

	mov	edx, DWORD PTR _SeparatorString$[ebp]
	push	edx
	push	OFFSET ?Separator@@3PADA		; Separator
	call	??$strcpy_s@$0GE@@@YAHAAY0GE@DPBD@Z	; strcpy_s<100>
	add	esp, 8
$LN1@SetSeparat:

; 33   : }

	mov	esp, ebp
	pop	ebp
	ret	4
_SetSeparator@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\stack.cpp
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_SeparatorString$ = 8					; size = 4
_InitializeErrorStack@4 PROC

; 19   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 20   :     for (int i = 0; i < ErrorStackCapacity; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@Initialize
$LN2@Initialize:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@Initialize:
	cmp	DWORD PTR _i$1[ebp], 100		; 00000064H
	jge	SHORT $LN3@Initialize

; 21   :         ErrorStack[i] = NULL;

	mov	ecx, DWORD PTR _i$1[ebp]
	mov	DWORD PTR ?ErrorStack@@3PAPAUErrorInfo@@A[ecx*4], 0
	jmp	SHORT $LN2@Initialize
$LN3@Initialize:

; 22   :     strcpy_s(Separator, SeparatorString);

	mov	edx, DWORD PTR _SeparatorString$[ebp]
	push	edx
	push	OFFSET ?Separator@@3PADA		; Separator
	call	??$strcpy_s@$0GE@@@YAHAAY0GE@DPBD@Z	; strcpy_s<100>
	add	esp, 8

; 23   : //    strcpy(Separator, SeparatorString);
; 24   : }

	mov	esp, ebp
	pop	ebp
	ret	4
_InitializeErrorStack@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1779 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1780 :         int _Result;
; 1781 :         va_list _ArgList;
; 1782 :         __crt_va_start(_ArgList, _Format);

	call	??$__vcrt_va_start_verify_argument_type@QBD@@YGXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 1783 : 
; 1784 :         #pragma warning(push)
; 1785 :         #pragma warning(disable: 4996) // Deprecation
; 1786 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Buffer$[ebp]
	push	eax
	call	__vsprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 1787 :         #pragma warning(pop)
; 1788 : 
; 1789 :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 1790 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 1791 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1457 :     {

	push	ebp
	mov	ebp, esp

; 1458 :         #pragma warning(push)
; 1459 :         #pragma warning(disable: 4996) // Deprecation
; 1460 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR __Buffer$[ebp]
	push	eax
	call	__vsnprintf_l
	add	esp, 20					; 00000014H

; 1461 :         #pragma warning(pop)
; 1462 :     }

	pop	ebp
	ret	0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1387 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1388 :         int const _Result = __stdio_common_vsprintf(

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __BufferCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Buffer$[ebp]
	push	ecx
	call	___local_stdio_printf_options
	mov	edx, DWORD PTR [eax]
	or	edx, 1
	mov	eax, DWORD PTR [eax+4]
	push	eax
	push	edx
	call	DWORD PTR __imp____stdio_common_vsprintf
	add	esp, 28					; 0000001cH
	mov	DWORD PTR __Result$[ebp], eax

; 1389 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1390 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1391 : 
; 1392 :         return _Result < 0 ? -1 : _Result;

	cmp	DWORD PTR __Result$[ebp], 0
	jge	SHORT $LN3@vsnprintf_
	mov	DWORD PTR tv74[ebp], -1
	jmp	SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
	mov	ecx, DWORD PTR __Result$[ebp]
	mov	DWORD PTR tv74[ebp], ecx
$LN4@vsnprintf_:
	mov	eax, DWORD PTR tv74[ebp]

; 1393 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.12.25827\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YGXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YGXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 150  :         {

	push	ebp
	mov	ebp, esp

; 151  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 152  :         }

	pop	ebp
	ret	0
??$__vcrt_va_start_verify_argument_type@QBD@@YGXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 85   :     {

	push	ebp
	mov	ebp, esp

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
