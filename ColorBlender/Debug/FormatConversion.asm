; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Users\Stuart\Desktop\Projects4\ColorBlend\ColorBlender\FormatConversion.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_ConvertGray8ToBGRA32@20
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\formatconversion.cpp
_TEXT	SEGMENT
_SrcPixelSize$ = -40					; size = 4
_Src$ = -36						; size = 4
_RowOffset$1 = -32					; size = 4
_DestPixelSize$ = -28					; size = 4
_DestIndex$ = -24					; size = 4
_Index$2 = -20						; size = 4
_Dest$ = -16						; size = 4
_Column$3 = -12						; size = 4
_Row$4 = -8						; size = 4
_Gray$5 = -1						; size = 1
_Source$ = 8						; size = 4
_BufferWidth$ = 12					; size = 4
_BufferHeight$ = 16					; size = 4
_BufferStride$ = 20					; size = 4
_Destination$ = 24					; size = 4
_ConvertGray8ToBGRA32@20 PROC

; 8    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 9    :     if (Source == NULL)

	cmp	DWORD PTR _Source$[ebp], 0
	jne	SHORT $LN8@ConvertGra

; 10   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@ConvertGra
$LN8@ConvertGra:

; 11   :     if (Destination == NULL)

	cmp	DWORD PTR _Destination$[ebp], 0
	jne	SHORT $LN9@ConvertGra

; 12   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@ConvertGra
$LN9@ConvertGra:

; 13   : 
; 14   :     int DestPixelSize = 4;

	mov	DWORD PTR _DestPixelSize$[ebp], 4

; 15   :     int SrcPixelSize = 1;

	mov	DWORD PTR _SrcPixelSize$[ebp], 1

; 16   :     BYTE *Src = (BYTE *)Source;

	mov	eax, DWORD PTR _Source$[ebp]
	mov	DWORD PTR _Src$[ebp], eax

; 17   :     BYTE *Dest = (BYTE *)Destination;

	mov	ecx, DWORD PTR _Destination$[ebp]
	mov	DWORD PTR _Dest$[ebp], ecx

; 18   :     int DestIndex = 0;

	mov	DWORD PTR _DestIndex$[ebp], 0

; 19   : 
; 20   :     for (int Row = 0; Row < BufferHeight; Row++)

	mov	DWORD PTR _Row$4[ebp], 0
	jmp	SHORT $LN4@ConvertGra
$LN2@ConvertGra:
	mov	edx, DWORD PTR _Row$4[ebp]
	add	edx, 1
	mov	DWORD PTR _Row$4[ebp], edx
$LN4@ConvertGra:
	mov	eax, DWORD PTR _Row$4[ebp]
	cmp	eax, DWORD PTR _BufferHeight$[ebp]
	jge	SHORT $LN3@ConvertGra

; 21   :     {
; 22   :         int RowOffset = Row * BufferStride;

	mov	ecx, DWORD PTR _Row$4[ebp]
	imul	ecx, DWORD PTR _BufferStride$[ebp]
	mov	DWORD PTR _RowOffset$1[ebp], ecx

; 23   :         for (int Column = 0; Column < BufferWidth; Column++)

	mov	DWORD PTR _Column$3[ebp], 0
	jmp	SHORT $LN7@ConvertGra
$LN5@ConvertGra:
	mov	edx, DWORD PTR _Column$3[ebp]
	add	edx, 1
	mov	DWORD PTR _Column$3[ebp], edx
$LN7@ConvertGra:
	mov	eax, DWORD PTR _Column$3[ebp]
	cmp	eax, DWORD PTR _BufferWidth$[ebp]
	jge	SHORT $LN6@ConvertGra

; 24   :         {
; 25   :             int Index = RowOffset + (Column * DestPixelSize);

	mov	ecx, DWORD PTR _Column$3[ebp]
	imul	ecx, DWORD PTR _DestPixelSize$[ebp]
	add	ecx, DWORD PTR _RowOffset$1[ebp]
	mov	DWORD PTR _Index$2[ebp], ecx

; 26   :             {
; 27   :                 BYTE Gray = Src[DestIndex++];

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _DestIndex$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _Gray$5[ebp], al
	mov	ecx, DWORD PTR _DestIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _DestIndex$[ebp], ecx

; 28   :                 Dest[Index + 3] = 0xff;

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _Index$2[ebp]
	mov	BYTE PTR [edx+3], 255			; 000000ffH

; 29   :                 Dest[Index + 2] = Gray;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index$2[ebp]
	mov	cl, BYTE PTR _Gray$5[ebp]
	mov	BYTE PTR [eax+2], cl

; 30   :                 Dest[Index + 1] = Gray;

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _Index$2[ebp]
	mov	al, BYTE PTR _Gray$5[ebp]
	mov	BYTE PTR [edx+1], al

; 31   :                 Dest[Index + 0] = Gray;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index$2[ebp]
	mov	dl, BYTE PTR _Gray$5[ebp]
	mov	BYTE PTR [ecx], dl

; 32   :             }
; 33   :         }

	jmp	SHORT $LN5@ConvertGra
$LN6@ConvertGra:

; 34   :     }

	jmp	$LN2@ConvertGra
$LN3@ConvertGra:

; 35   : 
; 36   :     return Success;

	xor	eax, eax
$LN1@ConvertGra:

; 37   : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_ConvertGray8ToBGRA32@20 ENDP
_TEXT	ENDS
END
