; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Users\Stuart\Desktop\Projects4\ColorBlend\ColorBlender\DisplayList.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_ExecuteDisplayList@24
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\displaylist.cpp
_TEXT	SEGMENT
_Buffer$ = -24						; size = 4
tv83 = -20						; size = 4
tv72 = -16						; size = 4
_DisplayList$ = -12					; size = 4
_i$1 = -8						; size = 4
_i$2 = -4						; size = 4
_Target$ = 8						; size = 4
_TargetWidth$ = 12					; size = 4
_TargetHeight$ = 16					; size = 4
_TargetStride$ = 20					; size = 4
_RawDisplayList$ = 24					; size = 4
_DisplayListCount$ = 28					; size = 4
_ExecuteDisplayList@24 PROC

; 148  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 149  :     if (Target == NULL)

	cmp	DWORD PTR _Target$[ebp], 0
	jne	SHORT $LN12@ExecuteDis

; 150  :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@ExecuteDis
$LN12@ExecuteDis:

; 151  :     if (RawDisplayList == NULL)

	cmp	DWORD PTR _RawDisplayList$[ebp], 0
	jne	SHORT $LN13@ExecuteDis

; 152  :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@ExecuteDis
$LN13@ExecuteDis:

; 153  :     if (DisplayListCount < 1)

	cmp	DWORD PTR _DisplayListCount$[ebp], 1
	jge	SHORT $LN14@ExecuteDis

; 154  :         return EmptyDisplayList;

	mov	eax, 8
	jmp	$LN1@ExecuteDis
$LN14@ExecuteDis:

; 155  : 
; 156  :     BYTE* Buffer = (BYTE *) Target;

	mov	eax, DWORD PTR _Target$[ebp]
	mov	DWORD PTR _Buffer$[ebp], eax

; 157  :     DisplayListInstruction* DisplayList = (DisplayListInstruction *) RawDisplayList;

	mov	ecx, DWORD PTR _RawDisplayList$[ebp]
	mov	DWORD PTR _DisplayList$[ebp], ecx

; 158  : 
; 159  :     //First pass.
; 160  :     for (int i = 0; i < DisplayListCount; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ExecuteDis
$LN2@ExecuteDis:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ExecuteDis:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _DisplayListCount$[ebp]
	jge	SHORT $LN3@ExecuteDis

; 161  :     {
; 162  :         switch (DisplayList[i].Operand)

	imul	ecx, DWORD PTR _i$2[ebp], 108
	mov	edx, DWORD PTR _DisplayList$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 7
	ja	SHORT $LN23@ExecuteDis
	mov	ecx, DWORD PTR tv72[ebp]
	jmp	DWORD PTR $LN36@ExecuteDis[ecx*4]
$LN15@ExecuteDis:

; 163  :         {
; 164  :             case NOP:
; 165  :                 break;

	jmp	SHORT $LN5@ExecuteDis
$LN16@ExecuteDis:

; 166  : 
; 167  :             case DrawColorBlob:
; 168  :                 //Rendered in this pass.
; 169  :                 break;

	jmp	SHORT $LN5@ExecuteDis
$LN17@ExecuteDis:

; 170  : 
; 171  :             case DrawColorBlock:
; 172  :                 //Nothing done in first pass.
; 173  :                 break;

	jmp	SHORT $LN5@ExecuteDis
$LN18@ExecuteDis:

; 174  : 
; 175  :             case PlotLine:
; 176  :                 //Nothing done in first pass.
; 177  :                 break;

	jmp	SHORT $LN5@ExecuteDis
$LN19@ExecuteDis:

; 178  : 
; 179  :             case DrawBackground:
; 180  :                 //Rendered in this pass.
; 181  :                 break;

	jmp	SHORT $LN5@ExecuteDis
$LN20@ExecuteDis:

; 182  : 
; 183  :             case Debug:
; 184  :                 break;

	jmp	SHORT $LN5@ExecuteDis
$LN21@ExecuteDis:

; 185  : 
; 186  :             case ResizeBuffer:
; 187  :                 break;

	jmp	SHORT $LN5@ExecuteDis
$LN22@ExecuteDis:

; 188  : 
; 189  :             case CopyBuffer:
; 190  :                 //Nothing done in first pass.
; 191  :                 break;

	jmp	SHORT $LN5@ExecuteDis
$LN23@ExecuteDis:

; 192  : 
; 193  :             default:
; 194  :                 if (DisplayList[i].ReturnOnFailure)

	imul	edx, DWORD PTR _i$2[ebp], 108
	mov	eax, DWORD PTR _DisplayList$[ebp]
	cmp	DWORD PTR [eax+edx+104], 0
	je	SHORT $LN5@ExecuteDis

; 195  :                     return UnknownDisplayListOperand;

	mov	eax, 10					; 0000000aH
	jmp	SHORT $LN1@ExecuteDis
$LN5@ExecuteDis:

; 196  :                 break;
; 197  :         }
; 198  :     }

	jmp	SHORT $LN2@ExecuteDis
$LN3@ExecuteDis:

; 199  : 
; 200  :     //Second pass.
; 201  :     for (int i = 0; i < DisplayListCount; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN9@ExecuteDis
$LN7@ExecuteDis:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN9@ExecuteDis:
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR _DisplayListCount$[ebp]
	jge	SHORT $LN8@ExecuteDis

; 202  :     {
; 203  :         switch (DisplayList[i].Operand)

	imul	eax, DWORD PTR _i$1[ebp], 108
	mov	ecx, DWORD PTR _DisplayList$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR tv83[ebp], edx
	cmp	DWORD PTR tv83[ebp], 7
	ja	SHORT $LN33@ExecuteDis
	mov	eax, DWORD PTR tv83[ebp]
	jmp	DWORD PTR $LN37@ExecuteDis[eax*4]
$LN25@ExecuteDis:

; 204  :         {
; 205  :             case NOP:
; 206  :                 break;

	jmp	SHORT $LN10@ExecuteDis
$LN26@ExecuteDis:

; 207  : 
; 208  :             case DrawColorBlob:
; 209  :                 break;

	jmp	SHORT $LN10@ExecuteDis
$LN27@ExecuteDis:

; 210  : 
; 211  :             case DrawColorBlock:
; 212  :                 break;

	jmp	SHORT $LN10@ExecuteDis
$LN28@ExecuteDis:

; 213  : 
; 214  :             case PlotLine:
; 215  :                 break;

	jmp	SHORT $LN10@ExecuteDis
$LN29@ExecuteDis:

; 216  : 
; 217  :             case DrawBackground:
; 218  :                 //Nothing done in second pass.
; 219  :                 break;

	jmp	SHORT $LN10@ExecuteDis
$LN30@ExecuteDis:

; 220  : 
; 221  :             case Debug:
; 222  :                 break;

	jmp	SHORT $LN10@ExecuteDis
$LN31@ExecuteDis:

; 223  : 
; 224  :             case ResizeBuffer:
; 225  :                 break;

	jmp	SHORT $LN10@ExecuteDis
$LN32@ExecuteDis:

; 226  : 
; 227  :             case CopyBuffer:
; 228  :                 break;

	jmp	SHORT $LN10@ExecuteDis
$LN33@ExecuteDis:

; 229  : 
; 230  :             default:
; 231  :                 if (DisplayList[i].ReturnOnFailure)

	imul	ecx, DWORD PTR _i$1[ebp], 108
	mov	edx, DWORD PTR _DisplayList$[ebp]
	cmp	DWORD PTR [edx+ecx+104], 0
	je	SHORT $LN10@ExecuteDis

; 232  :                     return UnknownDisplayListOperand;

	mov	eax, 10					; 0000000aH
	jmp	SHORT $LN1@ExecuteDis
$LN10@ExecuteDis:

; 233  :                 break;
; 234  :         }
; 235  :     }

	jmp	SHORT $LN7@ExecuteDis
$LN8@ExecuteDis:

; 236  : 
; 237  :     return Success;

	xor	eax, eax
$LN1@ExecuteDis:

; 238  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	2
$LN36@ExecuteDis:
	DD	$LN15@ExecuteDis
	DD	$LN16@ExecuteDis
	DD	$LN17@ExecuteDis
	DD	$LN18@ExecuteDis
	DD	$LN19@ExecuteDis
	DD	$LN20@ExecuteDis
	DD	$LN21@ExecuteDis
	DD	$LN22@ExecuteDis
$LN37@ExecuteDis:
	DD	$LN25@ExecuteDis
	DD	$LN26@ExecuteDis
	DD	$LN27@ExecuteDis
	DD	$LN28@ExecuteDis
	DD	$LN29@ExecuteDis
	DD	$LN30@ExecuteDis
	DD	$LN31@ExecuteDis
	DD	$LN32@ExecuteDis
_ExecuteDisplayList@24 ENDP
_TEXT	ENDS
END
