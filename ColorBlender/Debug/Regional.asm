; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Users\Stuart\Desktop\Projects4\ColorBlend\ColorBlender\Regional.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_RegionalOperation@48
PUBLIC	__real@3ff0000000000000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	_ColorLuminance@12:PROC
EXTRN	__fltused:DWORD
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\regional.cpp
_TEXT	SEGMENT
_LeastLuminance$1 = -180				; size = 8
_DTemp$2 = -172						; size = 8
_BTemp$3 = -164						; size = 8
_BAcc$4 = -156						; size = 8
_GAcc$5 = -148						; size = 8
_RAcc$6 = -140						; size = 8
_AAcc$7 = -132						; size = 8
_GreatestLuminance$8 = -124				; size = 8
_KYOffset$9 = -116					; size = 4
_KYOffset$10 = -112					; size = 4
_RowOffset$11 = -108					; size = 4
_Area$12 = -104						; size = 8
tv538 = -96						; size = 4
tv533 = -92						; size = 4
tv156 = -88						; size = 4
_HeightHalfSpan$ = -84					; size = 4
_WidthHalfSpan$ = -80					; size = 4
_PixelSize$ = -76					; size = 4
_KIndex$13 = -72					; size = 4
_KX$14 = -68						; size = 4
_KHEnd$15 = -64						; size = 4
_KHStart$16 = -60					; size = 4
_KY$17 = -56						; size = 4
_KVEnd$18 = -52						; size = 4
_KVStart$19 = -48					; size = 4
_KX$20 = -44						; size = 4
_KY$21 = -40						; size = 4
_Dest$ = -36						; size = 4
_Row$22 = -32						; size = 4
_Column$23 = -28					; size = 4
_Index$24 = -24						; size = 4
tv344 = -20						; size = 1
tv334 = -19						; size = 1
tv324 = -18						; size = 1
tv314 = -17						; size = 1
tv304 = -16						; size = 1
tv294 = -15						; size = 1
tv284 = -14						; size = 1
tv274 = -13						; size = 1
_KIndex$25 = -12					; size = 4
_Src$ = -8						; size = 4
_WorkingB$26 = -4					; size = 1
_WorkingG$27 = -3					; size = 1
_WorkingR$28 = -2					; size = 1
_WorkingA$29 = -1					; size = 1
_Source$ = 8						; size = 4
_Width$ = 12						; size = 4
_Height$ = 16						; size = 4
_Stride$ = 20						; size = 4
_Destination$ = 24					; size = 4
_RegionWidth$ = 28					; size = 4
_RegionHeight$ = 32					; size = 4
_DoAlpha$ = 36						; size = 1
_DoRed$ = 40						; size = 1
_DoGreen$ = 44						; size = 1
_DoBlue$ = 48						; size = 1
_Operator$ = 52						; size = 4
_RegionalOperation@48 PROC

; 21   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H

; 22   :     if (Source == NULL)

	cmp	DWORD PTR _Source$[ebp], 0
	jne	SHORT $LN22@RegionalOp

; 23   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@RegionalOp
$LN22@RegionalOp:

; 24   :     if (Destination == NULL)

	cmp	DWORD PTR _Destination$[ebp], 0
	jne	SHORT $LN23@RegionalOp

; 25   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@RegionalOp
$LN23@RegionalOp:

; 26   :     if (RegionWidth * RegionHeight == 0)

	mov	eax, DWORD PTR _RegionWidth$[ebp]
	imul	eax, DWORD PTR _RegionHeight$[ebp]
	test	eax, eax
	jne	SHORT $LN24@RegionalOp

; 27   :         return NoActionTaken;

	mov	eax, 12					; 0000000cH
	jmp	$LN1@RegionalOp
$LN24@RegionalOp:

; 28   :     if ((RegionWidth & 0x1) == 0)

	mov	ecx, DWORD PTR _RegionWidth$[ebp]
	and	ecx, 1
	jne	SHORT $LN25@RegionalOp

; 29   :         return InvalidOperation;

	mov	eax, 11					; 0000000bH
	jmp	$LN1@RegionalOp
$LN25@RegionalOp:

; 30   :     if ((RegionHeight & 0x1) == 0)

	mov	edx, DWORD PTR _RegionHeight$[ebp]
	and	edx, 1
	jne	SHORT $LN26@RegionalOp

; 31   :         return InvalidOperation;

	mov	eax, 11					; 0000000bH
	jmp	$LN1@RegionalOp
$LN26@RegionalOp:

; 32   : 
; 33   :     BYTE *Src = (BYTE *)Source;

	mov	eax, DWORD PTR _Source$[ebp]
	mov	DWORD PTR _Src$[ebp], eax

; 34   :     BYTE *Dest = (BYTE *)Destination;

	mov	ecx, DWORD PTR _Destination$[ebp]
	mov	DWORD PTR _Dest$[ebp], ecx

; 35   :     int PixelSize = 4;

	mov	DWORD PTR _PixelSize$[ebp], 4

; 36   :     int WidthHalfSpan = RegionWidth / 2;

	mov	edx, DWORD PTR _RegionWidth$[ebp]
	shr	edx, 1
	mov	DWORD PTR _WidthHalfSpan$[ebp], edx

; 37   :     int HeightHalfSpan = RegionHeight / 2;

	mov	eax, DWORD PTR _RegionHeight$[ebp]
	shr	eax, 1
	mov	DWORD PTR _HeightHalfSpan$[ebp], eax

; 38   : 
; 39   :     for (int Row = 0; Row < Height; Row++)

	mov	DWORD PTR _Row$22[ebp], 0
	jmp	SHORT $LN4@RegionalOp
$LN2@RegionalOp:
	mov	ecx, DWORD PTR _Row$22[ebp]
	add	ecx, 1
	mov	DWORD PTR _Row$22[ebp], ecx
$LN4@RegionalOp:
	mov	edx, DWORD PTR _Row$22[ebp]
	cmp	edx, DWORD PTR _Height$[ebp]
	jge	$LN3@RegionalOp

; 40   :     {
; 41   :         int RowOffset = Row * Stride;

	mov	eax, DWORD PTR _Row$22[ebp]
	imul	eax, DWORD PTR _Stride$[ebp]
	mov	DWORD PTR _RowOffset$11[ebp], eax

; 42   :         for (int Column = 0; Column < Width; Column++)

	mov	DWORD PTR _Column$23[ebp], 0
	jmp	SHORT $LN7@RegionalOp
$LN5@RegionalOp:
	mov	ecx, DWORD PTR _Column$23[ebp]
	add	ecx, 1
	mov	DWORD PTR _Column$23[ebp], ecx
$LN7@RegionalOp:
	mov	edx, DWORD PTR _Column$23[ebp]
	cmp	edx, DWORD PTR _Width$[ebp]
	jge	$LN6@RegionalOp

; 43   :         {
; 44   :             int Index = (Column * PixelSize) + RowOffset;

	mov	eax, DWORD PTR _Column$23[ebp]
	imul	eax, DWORD PTR _PixelSize$[ebp]
	add	eax, DWORD PTR _RowOffset$11[ebp]
	mov	DWORD PTR _Index$24[ebp], eax

; 45   :             Dest[Index + 3] = Src[Index + 3];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index$24[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index$24[ebp]
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al

; 46   :             Dest[Index + 2] = Src[Index + 2];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index$24[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index$24[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al

; 47   :             Dest[Index + 1] = Src[Index + 1];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index$24[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index$24[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al

; 48   :             Dest[Index + 0] = Src[Index + 0];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index$24[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index$24[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al

; 49   : 
; 50   :             int KHStart = Column - WidthHalfSpan;

	mov	ecx, DWORD PTR _Column$23[ebp]
	sub	ecx, DWORD PTR _WidthHalfSpan$[ebp]
	mov	DWORD PTR _KHStart$16[ebp], ecx

; 51   :             if (KHStart < 0)

	jns	SHORT $LN27@RegionalOp

; 52   :                 KHStart = 0;

	mov	DWORD PTR _KHStart$16[ebp], 0
$LN27@RegionalOp:

; 53   :             int KHEnd = Column + WidthHalfSpan;

	mov	edx, DWORD PTR _Column$23[ebp]
	add	edx, DWORD PTR _WidthHalfSpan$[ebp]
	mov	DWORD PTR _KHEnd$15[ebp], edx

; 54   :             if (KHEnd >= Width)

	mov	eax, DWORD PTR _KHEnd$15[ebp]
	cmp	eax, DWORD PTR _Width$[ebp]
	jl	SHORT $LN28@RegionalOp

; 55   :                 KHEnd = Width - 1;

	mov	ecx, DWORD PTR _Width$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _KHEnd$15[ebp], ecx
$LN28@RegionalOp:

; 56   : 
; 57   :             int KVStart = Row - HeightHalfSpan;

	mov	edx, DWORD PTR _Row$22[ebp]
	sub	edx, DWORD PTR _HeightHalfSpan$[ebp]
	mov	DWORD PTR _KVStart$19[ebp], edx

; 58   :             if (KVStart < 0)

	jns	SHORT $LN29@RegionalOp

; 59   :                 KVStart = 0;

	mov	DWORD PTR _KVStart$19[ebp], 0
$LN29@RegionalOp:

; 60   :             int KVEnd = Row + HeightHalfSpan;

	mov	eax, DWORD PTR _Row$22[ebp]
	add	eax, DWORD PTR _HeightHalfSpan$[ebp]
	mov	DWORD PTR _KVEnd$18[ebp], eax

; 61   :             if (KVEnd >= Height)

	mov	ecx, DWORD PTR _KVEnd$18[ebp]
	cmp	ecx, DWORD PTR _Height$[ebp]
	jl	SHORT $LN30@RegionalOp

; 62   :                 KVEnd = Height - 1;

	mov	edx, DWORD PTR _Height$[ebp]
	sub	edx, 1
	mov	DWORD PTR _KVEnd$18[ebp], edx
$LN30@RegionalOp:

; 63   : 
; 64   :             double GreatestLuminance = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _GreatestLuminance$8[ebp], xmm0

; 65   :             double LeastLuminance = 1.0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _LeastLuminance$1[ebp], xmm0

; 66   :             double AAcc = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _AAcc$7[ebp], xmm0

; 67   :             double RAcc = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _RAcc$6[ebp], xmm0

; 68   :             double GAcc = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _GAcc$5[ebp], xmm0

; 69   :             double BAcc = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _BAcc$4[ebp], xmm0

; 70   :             BYTE WorkingA = 0;

	mov	BYTE PTR _WorkingA$29[ebp], 0

; 71   :             BYTE WorkingR = 0;

	mov	BYTE PTR _WorkingR$28[ebp], 0

; 72   :             BYTE WorkingG = 0;

	mov	BYTE PTR _WorkingG$27[ebp], 0

; 73   :             BYTE WorkingB = 0;

	mov	BYTE PTR _WorkingB$26[ebp], 0

; 74   :             if (Operator == RegionBrightest)

	cmp	DWORD PTR _Operator$[ebp], 2
	jne	SHORT $LN31@RegionalOp

; 75   :             {
; 76   :                 WorkingA = 0;

	mov	BYTE PTR _WorkingA$29[ebp], 0

; 77   :                 WorkingR = 0;

	mov	BYTE PTR _WorkingR$28[ebp], 0

; 78   :                 WorkingG = 0;

	mov	BYTE PTR _WorkingG$27[ebp], 0

; 79   :                 WorkingB = 0;

	mov	BYTE PTR _WorkingB$26[ebp], 0
$LN31@RegionalOp:

; 80   :             }
; 81   :             if (Operator == RegionDarkest)

	cmp	DWORD PTR _Operator$[ebp], 3
	jne	SHORT $LN32@RegionalOp

; 82   :             {
; 83   :                 WorkingA = 255;

	mov	BYTE PTR _WorkingA$29[ebp], 255		; 000000ffH

; 84   :                 WorkingR = 255;

	mov	BYTE PTR _WorkingR$28[ebp], 255		; 000000ffH

; 85   :                 WorkingG = 255;

	mov	BYTE PTR _WorkingG$27[ebp], 255		; 000000ffH

; 86   :                 WorkingB = 255;

	mov	BYTE PTR _WorkingB$26[ebp], 255		; 000000ffH
$LN32@RegionalOp:

; 87   :             }
; 88   : 
; 89   : 
; 90   :             for (int KY = KVStart; KY <= KVEnd; KY++)

	mov	eax, DWORD PTR _KVStart$19[ebp]
	mov	DWORD PTR _KY$21[ebp], eax
	jmp	SHORT $LN10@RegionalOp
$LN8@RegionalOp:
	mov	ecx, DWORD PTR _KY$21[ebp]
	add	ecx, 1
	mov	DWORD PTR _KY$21[ebp], ecx
$LN10@RegionalOp:
	mov	edx, DWORD PTR _KY$21[ebp]
	cmp	edx, DWORD PTR _KVEnd$18[ebp]
	jg	$LN9@RegionalOp

; 91   :             {
; 92   :                 int KYOffset = KY * Stride;

	mov	eax, DWORD PTR _KY$21[ebp]
	imul	eax, DWORD PTR _Stride$[ebp]
	mov	DWORD PTR _KYOffset$10[ebp], eax

; 93   :                 for (int KX = KHStart; KX <= KHEnd; KX++)

	mov	ecx, DWORD PTR _KHStart$16[ebp]
	mov	DWORD PTR _KX$20[ebp], ecx
	jmp	SHORT $LN13@RegionalOp
$LN11@RegionalOp:
	mov	edx, DWORD PTR _KX$20[ebp]
	add	edx, 1
	mov	DWORD PTR _KX$20[ebp], edx
$LN13@RegionalOp:
	mov	eax, DWORD PTR _KX$20[ebp]
	cmp	eax, DWORD PTR _KHEnd$15[ebp]
	jg	$LN12@RegionalOp

; 94   :                 {
; 95   :                     int KIndex = (KX * PixelSize) + KYOffset;

	mov	ecx, DWORD PTR _KX$20[ebp]
	imul	ecx, DWORD PTR _PixelSize$[ebp]
	add	ecx, DWORD PTR _KYOffset$10[ebp]
	mov	DWORD PTR _KIndex$25[ebp], ecx

; 96   : 
; 97   :                     switch (Operator)

	mov	edx, DWORD PTR _Operator$[ebp]
	mov	DWORD PTR tv156[ebp], edx
	cmp	DWORD PTR tv156[ebp], 4
	ja	$LN14@RegionalOp
	mov	eax, DWORD PTR tv156[ebp]
	jmp	DWORD PTR $LN62@RegionalOp[eax*4]
$LN33@RegionalOp:

; 98   :                     {
; 99   :                     case RegionMean:
; 100  :                         AAcc += Src[KIndex + 3];

	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _KIndex$25[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	cvtsi2sd xmm0, edx
	addsd	xmm0, QWORD PTR _AAcc$7[ebp]
	movsd	QWORD PTR _AAcc$7[ebp], xmm0

; 101  :                         RAcc += Src[KIndex + 2];

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _KIndex$25[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	cvtsi2sd xmm0, ecx
	addsd	xmm0, QWORD PTR _RAcc$6[ebp]
	movsd	QWORD PTR _RAcc$6[ebp], xmm0

; 102  :                         GAcc += Src[KIndex + 1];

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$25[ebp]
	movzx	eax, BYTE PTR [edx+1]
	cvtsi2sd xmm0, eax
	addsd	xmm0, QWORD PTR _GAcc$5[ebp]
	movsd	QWORD PTR _GAcc$5[ebp], xmm0

; 103  :                         BAcc += Src[KIndex + 0];

	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _KIndex$25[ebp]
	movzx	edx, BYTE PTR [ecx]
	cvtsi2sd xmm0, edx
	addsd	xmm0, QWORD PTR _BAcc$4[ebp]
	movsd	QWORD PTR _BAcc$4[ebp], xmm0

; 104  :                         break;

	jmp	$LN14@RegionalOp
$LN34@RegionalOp:

; 105  : 
; 106  :                     case RegionBrightest:
; 107  :                     {
; 108  :                         double BTemp = ColorLuminance(Src[KIndex + 2], Src[KIndex + 1], Src[KIndex + 0]);

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _KIndex$25[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$25[ebp]
	movzx	eax, BYTE PTR [edx+1]
	push	eax
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _KIndex$25[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	push	edx
	call	_ColorLuminance@12
	fstp	QWORD PTR _BTemp$3[ebp]

; 109  :                         if (BTemp > GreatestLuminance)

	movsd	xmm0, QWORD PTR _BTemp$3[ebp]
	comisd	xmm0, QWORD PTR _GreatestLuminance$8[ebp]
	jbe	SHORT $LN35@RegionalOp

; 110  :                         {
; 111  :                             GreatestLuminance = BTemp;

	movsd	xmm0, QWORD PTR _BTemp$3[ebp]
	movsd	QWORD PTR _GreatestLuminance$8[ebp], xmm0

; 112  :                             WorkingA = Src[KIndex + 3];

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _KIndex$25[ebp]
	mov	cl, BYTE PTR [eax+3]
	mov	BYTE PTR _WorkingA$29[ebp], cl

; 113  :                             WorkingR = Src[KIndex + 2];

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$25[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR _WorkingR$28[ebp], al

; 114  :                             WorkingG = Src[KIndex + 1];

	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _KIndex$25[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR _WorkingG$27[ebp], dl

; 115  :                             WorkingB = Src[KIndex + 0];

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _KIndex$25[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _WorkingB$26[ebp], cl
$LN35@RegionalOp:

; 116  :                         }
; 117  :                     }
; 118  :                     break;

	jmp	$LN14@RegionalOp
$LN36@RegionalOp:

; 119  : 
; 120  :                     case RegionDarkest:
; 121  :                     {
; 122  :                         double DTemp = ColorLuminance(Src[KIndex + 2], Src[KIndex + 1], Src[KIndex + 0]);

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$25[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _KIndex$25[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	push	edx
	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _KIndex$25[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	push	ecx
	call	_ColorLuminance@12
	fstp	QWORD PTR _DTemp$2[ebp]

; 123  :                         if (DTemp < GreatestLuminance)

	movsd	xmm0, QWORD PTR _GreatestLuminance$8[ebp]
	comisd	xmm0, QWORD PTR _DTemp$2[ebp]
	jbe	SHORT $LN37@RegionalOp

; 124  :                         {
; 125  :                             LeastLuminance = DTemp;

	movsd	xmm0, QWORD PTR _DTemp$2[ebp]
	movsd	QWORD PTR _LeastLuminance$1[ebp], xmm0

; 126  :                             WorkingA = Src[KIndex + 3];

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$25[ebp]
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR _WorkingA$29[ebp], al

; 127  :                             WorkingR = Src[KIndex + 2];

	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _KIndex$25[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR _WorkingR$28[ebp], dl

; 128  :                             WorkingG = Src[KIndex + 1];

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _KIndex$25[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR _WorkingG$27[ebp], cl

; 129  :                             WorkingB = Src[KIndex + 0];

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$25[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _WorkingB$26[ebp], al
$LN37@RegionalOp:

; 130  :                         }
; 131  :                     }
; 132  :                     break;

	jmp	$LN14@RegionalOp
$LN38@RegionalOp:

; 133  : 
; 134  :                     case RegionGreatest:
; 135  :                         WorkingA = max(WorkingA, Src[KIndex + 3]);

	movzx	ecx, BYTE PTR _WorkingA$29[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$25[ebp]
	movzx	eax, BYTE PTR [edx+3]
	cmp	ecx, eax
	jle	SHORT $LN46@RegionalOp
	mov	cl, BYTE PTR _WorkingA$29[ebp]
	mov	BYTE PTR tv274[ebp], cl
	jmp	SHORT $LN47@RegionalOp
$LN46@RegionalOp:
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$25[ebp]
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR tv274[ebp], al
$LN47@RegionalOp:
	mov	cl, BYTE PTR tv274[ebp]
	mov	BYTE PTR _WorkingA$29[ebp], cl

; 136  :                         WorkingR = max(WorkingR, Src[KIndex + 2]);

	movzx	edx, BYTE PTR _WorkingR$28[ebp]
	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _KIndex$25[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	cmp	edx, ecx
	jle	SHORT $LN48@RegionalOp
	mov	dl, BYTE PTR _WorkingR$28[ebp]
	mov	BYTE PTR tv284[ebp], dl
	jmp	SHORT $LN49@RegionalOp
$LN48@RegionalOp:
	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _KIndex$25[ebp]
	mov	cl, BYTE PTR [eax+2]
	mov	BYTE PTR tv284[ebp], cl
$LN49@RegionalOp:
	mov	dl, BYTE PTR tv284[ebp]
	mov	BYTE PTR _WorkingR$28[ebp], dl

; 137  :                         WorkingG = max(WorkingG, Src[KIndex + 1]);

	movzx	eax, BYTE PTR _WorkingG$27[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _KIndex$25[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	cmp	eax, edx
	jle	SHORT $LN50@RegionalOp
	mov	al, BYTE PTR _WorkingG$27[ebp]
	mov	BYTE PTR tv294[ebp], al
	jmp	SHORT $LN51@RegionalOp
$LN50@RegionalOp:
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _KIndex$25[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv294[ebp], dl
$LN51@RegionalOp:
	mov	al, BYTE PTR tv294[ebp]
	mov	BYTE PTR _WorkingG$27[ebp], al

; 138  :                         WorkingB = max(WorkingB, Src[KIndex + 0]);

	movzx	ecx, BYTE PTR _WorkingB$26[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$25[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jle	SHORT $LN52@RegionalOp
	mov	cl, BYTE PTR _WorkingB$26[ebp]
	mov	BYTE PTR tv304[ebp], cl
	jmp	SHORT $LN53@RegionalOp
$LN52@RegionalOp:
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$25[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv304[ebp], al
$LN53@RegionalOp:
	mov	cl, BYTE PTR tv304[ebp]
	mov	BYTE PTR _WorkingB$26[ebp], cl

; 139  :                         break;

	jmp	$LN14@RegionalOp
$LN39@RegionalOp:

; 140  : 
; 141  :                     case RegionLeast:
; 142  :                         WorkingA = min(WorkingA, Src[KIndex + 3]);

	movzx	edx, BYTE PTR _WorkingA$29[ebp]
	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _KIndex$25[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	cmp	edx, ecx
	jge	SHORT $LN54@RegionalOp
	mov	dl, BYTE PTR _WorkingA$29[ebp]
	mov	BYTE PTR tv314[ebp], dl
	jmp	SHORT $LN55@RegionalOp
$LN54@RegionalOp:
	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _KIndex$25[ebp]
	mov	cl, BYTE PTR [eax+3]
	mov	BYTE PTR tv314[ebp], cl
$LN55@RegionalOp:
	mov	dl, BYTE PTR tv314[ebp]
	mov	BYTE PTR _WorkingA$29[ebp], dl

; 143  :                         WorkingR = min(WorkingR, Src[KIndex + 2]);

	movzx	eax, BYTE PTR _WorkingR$28[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _KIndex$25[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	cmp	eax, edx
	jge	SHORT $LN56@RegionalOp
	mov	al, BYTE PTR _WorkingR$28[ebp]
	mov	BYTE PTR tv324[ebp], al
	jmp	SHORT $LN57@RegionalOp
$LN56@RegionalOp:
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _KIndex$25[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR tv324[ebp], dl
$LN57@RegionalOp:
	mov	al, BYTE PTR tv324[ebp]
	mov	BYTE PTR _WorkingR$28[ebp], al

; 144  :                         WorkingG = min(WorkingG, Src[KIndex + 1]);

	movzx	ecx, BYTE PTR _WorkingG$27[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$25[ebp]
	movzx	eax, BYTE PTR [edx+1]
	cmp	ecx, eax
	jge	SHORT $LN58@RegionalOp
	mov	cl, BYTE PTR _WorkingG$27[ebp]
	mov	BYTE PTR tv334[ebp], cl
	jmp	SHORT $LN59@RegionalOp
$LN58@RegionalOp:
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$25[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv334[ebp], al
$LN59@RegionalOp:
	mov	cl, BYTE PTR tv334[ebp]
	mov	BYTE PTR _WorkingG$27[ebp], cl

; 145  :                         WorkingB = min(WorkingB, Src[KIndex + 0]);

	movzx	edx, BYTE PTR _WorkingB$26[ebp]
	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _KIndex$25[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	jge	SHORT $LN60@RegionalOp
	mov	dl, BYTE PTR _WorkingB$26[ebp]
	mov	BYTE PTR tv344[ebp], dl
	jmp	SHORT $LN61@RegionalOp
$LN60@RegionalOp:
	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _KIndex$25[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv344[ebp], cl
$LN61@RegionalOp:
	mov	dl, BYTE PTR tv344[ebp]
	mov	BYTE PTR _WorkingB$26[ebp], dl
$LN14@RegionalOp:

; 146  :                         break;
; 147  :                     }
; 148  :                 }

	jmp	$LN11@RegionalOp
$LN12@RegionalOp:

; 149  :             }

	jmp	$LN8@RegionalOp
$LN9@RegionalOp:

; 150  : 
; 151  :             if (Operator == RegionMean)

	cmp	DWORD PTR _Operator$[ebp], 4
	jne	$LN40@RegionalOp

; 152  :             {
; 153  :                 double Area = (double)RegionWidth * (double)RegionHeight;

	mov	eax, DWORD PTR _RegionWidth$[ebp]
	mov	DWORD PTR tv533[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv533[ebp]
	mov	ecx, DWORD PTR tv533[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	mov	edx, DWORD PTR _RegionHeight$[ebp]
	mov	DWORD PTR tv538[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv538[ebp]
	mov	eax, DWORD PTR tv538[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR _Area$12[ebp], xmm0

; 154  :                 WorkingA = (BYTE)(AAcc / Area);

	movsd	xmm0, QWORD PTR _AAcc$7[ebp]
	divsd	xmm0, QWORD PTR _Area$12[ebp]
	cvttsd2si ecx, xmm0
	mov	BYTE PTR _WorkingA$29[ebp], cl

; 155  :                 WorkingR = (BYTE)(RAcc / Area);

	movsd	xmm0, QWORD PTR _RAcc$6[ebp]
	divsd	xmm0, QWORD PTR _Area$12[ebp]
	cvttsd2si edx, xmm0
	mov	BYTE PTR _WorkingR$28[ebp], dl

; 156  :                 WorkingG = (BYTE)(GAcc / Area);

	movsd	xmm0, QWORD PTR _GAcc$5[ebp]
	divsd	xmm0, QWORD PTR _Area$12[ebp]
	cvttsd2si eax, xmm0
	mov	BYTE PTR _WorkingG$27[ebp], al

; 157  :                 WorkingB = (BYTE)(BAcc / Area);

	movsd	xmm0, QWORD PTR _BAcc$4[ebp]
	divsd	xmm0, QWORD PTR _Area$12[ebp]
	cvttsd2si ecx, xmm0
	mov	BYTE PTR _WorkingB$26[ebp], cl
$LN40@RegionalOp:

; 158  :             }
; 159  : 
; 160  :             for (int KY = KVStart; KY <= KVEnd; KY++)

	mov	edx, DWORD PTR _KVStart$19[ebp]
	mov	DWORD PTR _KY$17[ebp], edx
	jmp	SHORT $LN18@RegionalOp
$LN16@RegionalOp:
	mov	eax, DWORD PTR _KY$17[ebp]
	add	eax, 1
	mov	DWORD PTR _KY$17[ebp], eax
$LN18@RegionalOp:
	mov	ecx, DWORD PTR _KY$17[ebp]
	cmp	ecx, DWORD PTR _KVEnd$18[ebp]
	jg	$LN17@RegionalOp

; 161  :             {
; 162  :                 int KYOffset = KY * Stride;

	mov	edx, DWORD PTR _KY$17[ebp]
	imul	edx, DWORD PTR _Stride$[ebp]
	mov	DWORD PTR _KYOffset$9[ebp], edx

; 163  :                 for (int KX = KHStart; KX <= KHEnd; KX++)

	mov	eax, DWORD PTR _KHStart$16[ebp]
	mov	DWORD PTR _KX$14[ebp], eax
	jmp	SHORT $LN21@RegionalOp
$LN19@RegionalOp:
	mov	ecx, DWORD PTR _KX$14[ebp]
	add	ecx, 1
	mov	DWORD PTR _KX$14[ebp], ecx
$LN21@RegionalOp:
	mov	edx, DWORD PTR _KX$14[ebp]
	cmp	edx, DWORD PTR _KHEnd$15[ebp]
	jg	SHORT $LN20@RegionalOp

; 164  :                 {
; 165  :                     int KIndex = (KX * PixelSize) + KYOffset;

	mov	eax, DWORD PTR _KX$14[ebp]
	imul	eax, DWORD PTR _PixelSize$[ebp]
	add	eax, DWORD PTR _KYOffset$9[ebp]
	mov	DWORD PTR _KIndex$13[ebp], eax

; 166  :                     if (DoAlpha)

	movzx	ecx, BYTE PTR _DoAlpha$[ebp]
	test	ecx, ecx
	je	SHORT $LN41@RegionalOp

; 167  :                         Src[KIndex + 3] = WorkingA;

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$13[ebp]
	mov	al, BYTE PTR _WorkingA$29[ebp]
	mov	BYTE PTR [edx+3], al
$LN41@RegionalOp:

; 168  :                     if (DoRed)

	movzx	ecx, BYTE PTR _DoRed$[ebp]
	test	ecx, ecx
	je	SHORT $LN42@RegionalOp

; 169  :                         Src[KIndex + 2] = WorkingR;

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$13[ebp]
	mov	al, BYTE PTR _WorkingR$28[ebp]
	mov	BYTE PTR [edx+2], al
$LN42@RegionalOp:

; 170  :                     if (DoGreen)

	movzx	ecx, BYTE PTR _DoGreen$[ebp]
	test	ecx, ecx
	je	SHORT $LN43@RegionalOp

; 171  :                         Src[KIndex + 1] = WorkingG;

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$13[ebp]
	mov	al, BYTE PTR _WorkingG$27[ebp]
	mov	BYTE PTR [edx+1], al
$LN43@RegionalOp:

; 172  :                     if (DoBlue)

	movzx	ecx, BYTE PTR _DoBlue$[ebp]
	test	ecx, ecx
	je	SHORT $LN44@RegionalOp

; 173  :                         Src[KIndex + 0] = WorkingB;

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$13[ebp]
	mov	al, BYTE PTR _WorkingB$26[ebp]
	mov	BYTE PTR [edx], al
$LN44@RegionalOp:

; 174  :                 }

	jmp	SHORT $LN19@RegionalOp
$LN20@RegionalOp:

; 175  :             }

	jmp	$LN16@RegionalOp
$LN17@RegionalOp:

; 176  :         }

	jmp	$LN5@RegionalOp
$LN6@RegionalOp:

; 177  :     }

	jmp	$LN2@RegionalOp
$LN3@RegionalOp:

; 178  : 
; 179  :     return Success;

	xor	eax, eax
$LN1@RegionalOp:

; 180  : }

	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
	npad	3
$LN62@RegionalOp:
	DD	$LN38@RegionalOp
	DD	$LN39@RegionalOp
	DD	$LN34@RegionalOp
	DD	$LN36@RegionalOp
	DD	$LN33@RegionalOp
_RegionalOperation@48 ENDP
_TEXT	ENDS
END
