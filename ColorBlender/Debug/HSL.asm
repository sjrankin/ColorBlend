; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Users\Stuart\Desktop\Projects4\ColorBlend\ColorBlender\HSL.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_NormalizedRGBtoHSL@36
PUBLIC	_RGB8ToHSL@24
PUBLIC	_HSLtoNormalizedRGB@36
PUBLIC	_HSLtoRGB8@36
PUBLIC	_CircularDouble@24
PUBLIC	_CircularDouble360@8
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@4018000000000000
PUBLIC	__real@404e000000000000
PUBLIC	__real@405e000000000000
PUBLIC	__real@4066800000000000
PUBLIC	__real@406e000000000000
PUBLIC	__real@406fe00000000000
PUBLIC	__real@4072c00000000000
PUBLIC	__real@4076800000000000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
EXTRN	__CIfmod:PROC
EXTRN	__fltused:DWORD
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@4076800000000000
CONST	SEGMENT
__real@4076800000000000 DQ 04076800000000000r	; 360
CONST	ENDS
;	COMDAT __real@4072c00000000000
CONST	SEGMENT
__real@4072c00000000000 DQ 04072c00000000000r	; 300
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@406e000000000000
CONST	SEGMENT
__real@406e000000000000 DQ 0406e000000000000r	; 240
CONST	ENDS
;	COMDAT __real@4066800000000000
CONST	SEGMENT
__real@4066800000000000 DQ 04066800000000000r	; 180
CONST	ENDS
;	COMDAT __real@405e000000000000
CONST	SEGMENT
__real@405e000000000000 DQ 0405e000000000000r	; 120
CONST	ENDS
;	COMDAT __real@404e000000000000
CONST	SEGMENT
__real@404e000000000000 DQ 0404e000000000000r	; 60
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\hsl.cpp
_TEXT	SEGMENT
_Value$ = 8						; size = 8
_CircularDouble360@8 PROC

; 183  : {

	push	ebp
	mov	ebp, esp

; 184  : 	return CircularDouble(Value, 0.0, 360.0);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4076800000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Value$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_CircularDouble@24

; 185  : }

	pop	ebp
	ret	8
_CircularDouble360@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\hsl.cpp
_TEXT	SEGMENT
_Mod$1 = -32						; size = 8
_Modl$2 = -24						; size = 8
_s$3 = -16						; size = 8
_Range$ = -8						; size = 8
_Value$ = 8						; size = 8
_Low$ = 16						; size = 8
_High$ = 24						; size = 8
_CircularDouble@24 PROC

; 157  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 158  : 	if (Low > High)

	movsd	xmm0, QWORD PTR _Low$[ebp]
	comisd	xmm0, QWORD PTR _High$[ebp]
	jbe	SHORT $LN2@CircularDo

; 159  : 	{
; 160  : 		double s = Low;

	movsd	xmm0, QWORD PTR _Low$[ebp]
	movsd	QWORD PTR _s$3[ebp], xmm0

; 161  : 		Low = High;

	movsd	xmm0, QWORD PTR _High$[ebp]
	movsd	QWORD PTR _Low$[ebp], xmm0

; 162  : 		High = s;

	movsd	xmm0, QWORD PTR _s$3[ebp]
	movsd	QWORD PTR _High$[ebp], xmm0
$LN2@CircularDo:

; 163  : 	}
; 164  : 	if ((Value >= Low) && (Value <= High))

	movsd	xmm0, QWORD PTR _Value$[ebp]
	comisd	xmm0, QWORD PTR _Low$[ebp]
	jb	SHORT $LN3@CircularDo
	movsd	xmm0, QWORD PTR _High$[ebp]
	comisd	xmm0, QWORD PTR _Value$[ebp]
	jb	SHORT $LN3@CircularDo

; 165  : 		return Value;

	fld	QWORD PTR _Value$[ebp]
	jmp	$LN1@CircularDo
$LN3@CircularDo:

; 166  : 	double Range = fabs(High - Low);

	movsd	xmm0, QWORD PTR _High$[ebp]
	subsd	xmm0, QWORD PTR _Low$[ebp]
	andps	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	movsd	QWORD PTR _Range$[ebp], xmm0

; 167  : 	if (Value < Low)

	movsd	xmm0, QWORD PTR _Low$[ebp]
	comisd	xmm0, QWORD PTR _Value$[ebp]
	jbe	SHORT $LN4@CircularDo

; 168  : 	{
; 169  : 		Value = fabs(Value - Low);

	movsd	xmm0, QWORD PTR _Value$[ebp]
	subsd	xmm0, QWORD PTR _Low$[ebp]
	andps	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	movsd	QWORD PTR _Value$[ebp], xmm0

; 170  : 		double Modl = fmod(Value, Range);

	fld	QWORD PTR _Value$[ebp]
	fld	QWORD PTR _Range$[ebp]
	call	__CIfmod
	fstp	QWORD PTR _Modl$2[ebp]

; 171  : 		Value = High - Modl;

	movsd	xmm0, QWORD PTR _High$[ebp]
	subsd	xmm0, QWORD PTR _Modl$2[ebp]
	movsd	QWORD PTR _Value$[ebp], xmm0

; 172  : 	}
; 173  : 	else

	jmp	SHORT $LN5@CircularDo
$LN4@CircularDo:

; 174  : 	{
; 175  : 		Value = Value - Low;

	movsd	xmm0, QWORD PTR _Value$[ebp]
	subsd	xmm0, QWORD PTR _Low$[ebp]
	movsd	QWORD PTR _Value$[ebp], xmm0

; 176  : 		double Mod = fmod(Value, Range);

	fld	QWORD PTR _Value$[ebp]
	fld	QWORD PTR _Range$[ebp]
	call	__CIfmod
	fstp	QWORD PTR _Mod$1[ebp]

; 177  : 		Value = Low + Mod;

	movsd	xmm0, QWORD PTR _Low$[ebp]
	addsd	xmm0, QWORD PTR _Mod$1[ebp]
	movsd	QWORD PTR _Value$[ebp], xmm0
$LN5@CircularDo:

; 178  : 	}
; 179  : 	return Value;

	fld	QWORD PTR _Value$[ebp]
$LN1@CircularDo:

; 180  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_CircularDouble@24 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\hsl.cpp
_TEXT	SEGMENT
_NB$ = -24						; size = 8
_NG$ = -16						; size = 8
_NR$ = -8						; size = 8
_H$ = 8							; size = 8
_S$ = 16						; size = 8
_L$ = 24						; size = 8
_R$ = 32						; size = 4
_G$ = 36						; size = 4
_B$ = 40						; size = 4
_HSLtoRGB8@36 PROC

; 146  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 147  : 	double NR = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _NR$[ebp], xmm0

; 148  : 	double NG = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _NG$[ebp], xmm0

; 149  : 	double NB = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _NB$[ebp], xmm0

; 150  : 	HSLtoNormalizedRGB(H, S, L, &NR, &NG, &NB);

	lea	eax, DWORD PTR _NB$[ebp]
	push	eax
	lea	ecx, DWORD PTR _NG$[ebp]
	push	ecx
	lea	edx, DWORD PTR _NR$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _L$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _S$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _H$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_HSLtoNormalizedRGB@36

; 151  : 	*R = (BYTE)(NR * 255.0);

	movsd	xmm0, QWORD PTR _NR$[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si eax, xmm0
	mov	ecx, DWORD PTR _R$[ebp]
	mov	BYTE PTR [ecx], al

; 152  : 	*G = (BYTE)(NG * 255.0);

	movsd	xmm0, QWORD PTR _NG$[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si edx, xmm0
	mov	eax, DWORD PTR _G$[ebp]
	mov	BYTE PTR [eax], dl

; 153  : 	*B = (BYTE)(NB * 255.0);

	movsd	xmm0, QWORD PTR _NB$[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si ecx, xmm0
	mov	edx, DWORD PTR _B$[ebp]
	mov	BYTE PTR [edx], cl

; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_HSLtoRGB8@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\hsl.cpp
_TEXT	SEGMENT
_ModTerm$ = -72						; size = 8
tv131 = -64						; size = 8
_AbsTerm$ = -56						; size = 8
_m$ = -48						; size = 8
_X$ = -40						; size = 8
_Bp$ = -32						; size = 8
_Gp$ = -24						; size = 8
_Rp$ = -16						; size = 8
_C$ = -8						; size = 8
_H$ = 8							; size = 8
_S$ = 16						; size = 8
_L$ = 24						; size = 8
_R$ = 32						; size = 4
_G$ = 36						; size = 4
_B$ = 40						; size = 4
_HSLtoNormalizedRGB@36 PROC

; 82   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H

; 83   : 	double AbsTerm = fabs((2.0 * L) - 1.0);

	movsd	xmm0, QWORD PTR __real@4000000000000000
	mulsd	xmm0, QWORD PTR _L$[ebp]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	andps	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	movsd	QWORD PTR _AbsTerm$[ebp], xmm0

; 84   : 	double C = (1.0 - AbsTerm) * S;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR _AbsTerm$[ebp]
	mulsd	xmm0, QWORD PTR _S$[ebp]
	movsd	QWORD PTR _C$[ebp], xmm0

; 85   : 	double ModTerm = fmod(H / 60.0, 2.0);

	movsd	xmm0, QWORD PTR _H$[ebp]
	divsd	xmm0, QWORD PTR __real@404e000000000000
	movsd	QWORD PTR tv131[ebp], xmm0
	fld	QWORD PTR tv131[ebp]
	fld	QWORD PTR __real@4000000000000000
	call	__CIfmod
	fstp	QWORD PTR _ModTerm$[ebp]

; 86   : 	double X = C * (1.0 - fabs(ModTerm - 1.0));

	movsd	xmm0, QWORD PTR _ModTerm$[ebp]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	andps	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	mulsd	xmm1, QWORD PTR _C$[ebp]
	movsd	QWORD PTR _X$[ebp], xmm1

; 87   : 	double m = L - (C / 2.0);

	movsd	xmm0, QWORD PTR _C$[ebp]
	divsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	xmm1, QWORD PTR _L$[ebp]
	subsd	xmm1, xmm0
	movsd	QWORD PTR _m$[ebp], xmm1

; 88   : 	double Rp = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _Rp$[ebp], xmm0

; 89   : 	double Gp = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _Gp$[ebp], xmm0

; 90   : 	double Bp = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _Bp$[ebp], xmm0

; 91   : 	if ((H >= 0.0) && (H < 60.0))

	movsd	xmm0, QWORD PTR _H$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN2@HSLtoNorma
	movsd	xmm0, QWORD PTR __real@404e000000000000
	comisd	xmm0, QWORD PTR _H$[ebp]
	jbe	SHORT $LN2@HSLtoNorma

; 92   : 	{
; 93   : 		Rp = C;

	movsd	xmm0, QWORD PTR _C$[ebp]
	movsd	QWORD PTR _Rp$[ebp], xmm0

; 94   : 		Gp = X;

	movsd	xmm0, QWORD PTR _X$[ebp]
	movsd	QWORD PTR _Gp$[ebp], xmm0

; 95   : 		Bp = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _Bp$[ebp], xmm0

; 96   : 	}
; 97   : 	else

	jmp	$LN11@HSLtoNorma
$LN2@HSLtoNorma:

; 98   : 		if ((H >= 60.0) && (H < 120.0))

	movsd	xmm0, QWORD PTR _H$[ebp]
	comisd	xmm0, QWORD PTR __real@404e000000000000
	jb	SHORT $LN4@HSLtoNorma
	movsd	xmm0, QWORD PTR __real@405e000000000000
	comisd	xmm0, QWORD PTR _H$[ebp]
	jbe	SHORT $LN4@HSLtoNorma

; 99   : 		{
; 100  : 			Rp = X;

	movsd	xmm0, QWORD PTR _X$[ebp]
	movsd	QWORD PTR _Rp$[ebp], xmm0

; 101  : 			Gp = C;

	movsd	xmm0, QWORD PTR _C$[ebp]
	movsd	QWORD PTR _Gp$[ebp], xmm0

; 102  : 			Bp = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _Bp$[ebp], xmm0

; 103  : 		}
; 104  : 		else

	jmp	$LN11@HSLtoNorma
$LN4@HSLtoNorma:

; 105  : 			if ((H >= 120.0) && (H < 180.0))

	movsd	xmm0, QWORD PTR _H$[ebp]
	comisd	xmm0, QWORD PTR __real@405e000000000000
	jb	SHORT $LN6@HSLtoNorma
	movsd	xmm0, QWORD PTR __real@4066800000000000
	comisd	xmm0, QWORD PTR _H$[ebp]
	jbe	SHORT $LN6@HSLtoNorma

; 106  : 			{
; 107  : 				Rp = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _Rp$[ebp], xmm0

; 108  : 				Gp = C;

	movsd	xmm0, QWORD PTR _C$[ebp]
	movsd	QWORD PTR _Gp$[ebp], xmm0

; 109  : 				Bp = X;

	movsd	xmm0, QWORD PTR _X$[ebp]
	movsd	QWORD PTR _Bp$[ebp], xmm0

; 110  : 			}
; 111  : 			else

	jmp	$LN11@HSLtoNorma
$LN6@HSLtoNorma:

; 112  : 				if ((H >= 180.0) && (H < 240.0))

	movsd	xmm0, QWORD PTR _H$[ebp]
	comisd	xmm0, QWORD PTR __real@4066800000000000
	jb	SHORT $LN8@HSLtoNorma
	movsd	xmm0, QWORD PTR __real@406e000000000000
	comisd	xmm0, QWORD PTR _H$[ebp]
	jbe	SHORT $LN8@HSLtoNorma

; 113  : 				{
; 114  : 					Rp = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _Rp$[ebp], xmm0

; 115  : 					Gp = X;

	movsd	xmm0, QWORD PTR _X$[ebp]
	movsd	QWORD PTR _Gp$[ebp], xmm0

; 116  : 					Bp = C;

	movsd	xmm0, QWORD PTR _C$[ebp]
	movsd	QWORD PTR _Bp$[ebp], xmm0

; 117  : 				}
; 118  : 				else

	jmp	SHORT $LN11@HSLtoNorma
$LN8@HSLtoNorma:

; 119  : 					if ((H >= 240.0) && (H < 300.0))

	movsd	xmm0, QWORD PTR _H$[ebp]
	comisd	xmm0, QWORD PTR __real@406e000000000000
	jb	SHORT $LN10@HSLtoNorma
	movsd	xmm0, QWORD PTR __real@4072c00000000000
	comisd	xmm0, QWORD PTR _H$[ebp]
	jbe	SHORT $LN10@HSLtoNorma

; 120  : 					{
; 121  : 						Rp = X;

	movsd	xmm0, QWORD PTR _X$[ebp]
	movsd	QWORD PTR _Rp$[ebp], xmm0

; 122  : 						Gp = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _Gp$[ebp], xmm0

; 123  : 						Bp = C;

	movsd	xmm0, QWORD PTR _C$[ebp]
	movsd	QWORD PTR _Bp$[ebp], xmm0

; 124  : 					}
; 125  : 					else

	jmp	SHORT $LN11@HSLtoNorma
$LN10@HSLtoNorma:

; 126  : 					{
; 127  : 						Rp = C;

	movsd	xmm0, QWORD PTR _C$[ebp]
	movsd	QWORD PTR _Rp$[ebp], xmm0

; 128  : 						Gp = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _Gp$[ebp], xmm0

; 129  : 						Bp = X;

	movsd	xmm0, QWORD PTR _X$[ebp]
	movsd	QWORD PTR _Bp$[ebp], xmm0
$LN11@HSLtoNorma:

; 130  : 					}
; 131  : 	*R = Rp + m;

	movsd	xmm0, QWORD PTR _Rp$[ebp]
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _R$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 132  : 	*G = Gp + m;

	movsd	xmm0, QWORD PTR _Gp$[ebp]
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _G$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 133  : 	*B = Bp + m;

	movsd	xmm0, QWORD PTR _Bp$[ebp]
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _B$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 134  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_HSLtoNormalizedRGB@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\hsl.cpp
_TEXT	SEGMENT
_NR$ = -24						; size = 8
_NG$ = -16						; size = 8
_NB$ = -8						; size = 8
_R$ = 8							; size = 1
_G$ = 12						; size = 1
_B$ = 16						; size = 1
_H$ = 20						; size = 4
_S$ = 24						; size = 4
_L$ = 28						; size = 4
_RGB8ToHSL@24 PROC

; 65   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 66   : 	double NR = (double)R / 255.0;

	movzx	eax, BYTE PTR _R$[ebp]
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	movsd	QWORD PTR _NR$[ebp], xmm0

; 67   : 	double NG = (double)G / 255.0;

	movzx	ecx, BYTE PTR _G$[ebp]
	cvtsi2sd xmm0, ecx
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	movsd	QWORD PTR _NG$[ebp], xmm0

; 68   : 	double NB = (double)B / 255.0;

	movzx	edx, BYTE PTR _B$[ebp]
	cvtsi2sd xmm0, edx
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	movsd	QWORD PTR _NB$[ebp], xmm0

; 69   : 	NormalizedRGBtoHSL(NR, NG, NB, H, S, L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _S$[ebp]
	push	ecx
	mov	edx, DWORD PTR _H$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _NB$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _NG$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _NR$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_NormalizedRGBtoHSL@36

; 70   : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_RGB8ToHSL@24 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\hsl.cpp
_TEXT	SEGMENT
tv196 = -88						; size = 8
tv190 = -80						; size = 8
_Min$ = -72						; size = 8
tv75 = -64						; size = 8
tv74 = -56						; size = 8
tv71 = -48						; size = 8
tv69 = -40						; size = 8
tv68 = -32						; size = 8
tv65 = -24						; size = 8
_Delta$ = -16						; size = 8
_Max$ = -8						; size = 8
_R$ = 8							; size = 8
_G$ = 16						; size = 8
_B$ = 24						; size = 8
_H$ = 32						; size = 4
_S$ = 36						; size = 4
_L$ = 40						; size = 4
_NormalizedRGBtoHSL@36 PROC

; 21   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H

; 22   : 	double Max = max(R, max(G, B));

	movsd	xmm0, QWORD PTR _G$[ebp]
	comisd	xmm0, QWORD PTR _B$[ebp]
	jbe	SHORT $LN10@Normalized
	movsd	xmm0, QWORD PTR _G$[ebp]
	movsd	QWORD PTR tv65[ebp], xmm0
	jmp	SHORT $LN11@Normalized
$LN10@Normalized:
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR tv65[ebp], xmm0
$LN11@Normalized:
	movsd	xmm0, QWORD PTR _R$[ebp]
	comisd	xmm0, QWORD PTR tv65[ebp]
	jbe	SHORT $LN14@Normalized
	movsd	xmm0, QWORD PTR _R$[ebp]
	movsd	QWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN15@Normalized
$LN14@Normalized:
	movsd	xmm0, QWORD PTR _G$[ebp]
	comisd	xmm0, QWORD PTR _B$[ebp]
	jbe	SHORT $LN12@Normalized
	movsd	xmm0, QWORD PTR _G$[ebp]
	movsd	QWORD PTR tv68[ebp], xmm0
	jmp	SHORT $LN13@Normalized
$LN12@Normalized:
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR tv68[ebp], xmm0
$LN13@Normalized:
	movsd	xmm0, QWORD PTR tv68[ebp]
	movsd	QWORD PTR tv69[ebp], xmm0
$LN15@Normalized:
	movsd	xmm0, QWORD PTR tv69[ebp]
	movsd	QWORD PTR _Max$[ebp], xmm0

; 23   : 	double Min = min(R, min(G, B));

	movsd	xmm0, QWORD PTR _B$[ebp]
	comisd	xmm0, QWORD PTR _G$[ebp]
	jbe	SHORT $LN16@Normalized
	movsd	xmm0, QWORD PTR _G$[ebp]
	movsd	QWORD PTR tv71[ebp], xmm0
	jmp	SHORT $LN17@Normalized
$LN16@Normalized:
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR tv71[ebp], xmm0
$LN17@Normalized:
	movsd	xmm0, QWORD PTR tv71[ebp]
	comisd	xmm0, QWORD PTR _R$[ebp]
	jbe	SHORT $LN20@Normalized
	movsd	xmm0, QWORD PTR _R$[ebp]
	movsd	QWORD PTR tv75[ebp], xmm0
	jmp	SHORT $LN21@Normalized
$LN20@Normalized:
	movsd	xmm0, QWORD PTR _B$[ebp]
	comisd	xmm0, QWORD PTR _G$[ebp]
	jbe	SHORT $LN18@Normalized
	movsd	xmm0, QWORD PTR _G$[ebp]
	movsd	QWORD PTR tv74[ebp], xmm0
	jmp	SHORT $LN19@Normalized
$LN18@Normalized:
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR tv74[ebp], xmm0
$LN19@Normalized:
	movsd	xmm0, QWORD PTR tv74[ebp]
	movsd	QWORD PTR tv75[ebp], xmm0
$LN21@Normalized:
	movsd	xmm0, QWORD PTR tv75[ebp]
	movsd	QWORD PTR _Min$[ebp], xmm0

; 24   : 	*L = (Max + Min) / 2.0;

	movsd	xmm0, QWORD PTR _Max$[ebp]
	addsd	xmm0, QWORD PTR _Min$[ebp]
	divsd	xmm0, QWORD PTR __real@4000000000000000
	mov	eax, DWORD PTR _L$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 25   : 	double Delta = Max - Min;

	movsd	xmm0, QWORD PTR _Max$[ebp]
	subsd	xmm0, QWORD PTR _Min$[ebp]
	movsd	QWORD PTR _Delta$[ebp], xmm0

; 26   : 	*S = 0.0;

	mov	ecx, DWORD PTR _S$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0

; 27   : 	*H = 0.0;

	mov	edx, DWORD PTR _H$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx], xmm0

; 28   : 	if (Delta == 0)

	movsd	xmm0, QWORD PTR _Delta$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@Normalized

; 29   : 	{
; 30   : 		*H = 0.0;

	mov	eax, DWORD PTR _H$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [eax], xmm0

; 31   : 		*S = 0.0;

	mov	ecx, DWORD PTR _S$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0

; 32   : 	}
; 33   : 	else

	jmp	$LN6@Normalized
$LN2@Normalized:

; 34   : 	{
; 35   : 		*S = Delta / (1.0 - fabs((2.0 * *L) - 1.0));

	mov	edx, DWORD PTR _L$[ebp]
	movsd	xmm0, QWORD PTR __real@4000000000000000
	mulsd	xmm0, QWORD PTR [edx]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	andps	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	movsd	xmm0, QWORD PTR _Delta$[ebp]
	divsd	xmm0, xmm1
	mov	eax, DWORD PTR _S$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 36   : 		if (Max == R)

	movsd	xmm0, QWORD PTR _Max$[ebp]
	ucomisd	xmm0, QWORD PTR _R$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@Normalized

; 37   : 		{
; 38   : 			*H = 60.0 * fmod(((G - B) / Delta), 6.0);

	movsd	xmm0, QWORD PTR _G$[ebp]
	subsd	xmm0, QWORD PTR _B$[ebp]
	divsd	xmm0, QWORD PTR _Delta$[ebp]
	movsd	QWORD PTR tv190[ebp], xmm0
	fld	QWORD PTR tv190[ebp]
	fld	QWORD PTR __real@4018000000000000
	call	__CIfmod
	fstp	QWORD PTR tv196[ebp]
	movsd	xmm0, QWORD PTR tv196[ebp]
	mulsd	xmm0, QWORD PTR __real@404e000000000000
	mov	ecx, DWORD PTR _H$[ebp]
	movsd	QWORD PTR [ecx], xmm0
$LN4@Normalized:

; 39   : 		}
; 40   : 		if (Max == G)

	movsd	xmm0, QWORD PTR _Max$[ebp]
	ucomisd	xmm0, QWORD PTR _G$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@Normalized

; 41   : 		{
; 42   : 			*H = 60.0 * (((B - R) / Delta) + 2.0);

	movsd	xmm0, QWORD PTR _B$[ebp]
	subsd	xmm0, QWORD PTR _R$[ebp]
	divsd	xmm0, QWORD PTR _Delta$[ebp]
	addsd	xmm0, QWORD PTR __real@4000000000000000
	mulsd	xmm0, QWORD PTR __real@404e000000000000
	mov	edx, DWORD PTR _H$[ebp]
	movsd	QWORD PTR [edx], xmm0
$LN5@Normalized:

; 43   : 		}
; 44   : 		if (Max == B)

	movsd	xmm0, QWORD PTR _Max$[ebp]
	ucomisd	xmm0, QWORD PTR _B$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@Normalized

; 45   : 		{
; 46   : 			*H = 60.0 * (((R - G) / Delta) + 4.0);

	movsd	xmm0, QWORD PTR _R$[ebp]
	subsd	xmm0, QWORD PTR _G$[ebp]
	divsd	xmm0, QWORD PTR _Delta$[ebp]
	addsd	xmm0, QWORD PTR __real@4010000000000000
	mulsd	xmm0, QWORD PTR __real@404e000000000000
	mov	eax, DWORD PTR _H$[ebp]
	movsd	QWORD PTR [eax], xmm0
$LN6@Normalized:

; 47   : 		}
; 48   : 	}
; 49   : 	if (*H < 0.0)

	mov	ecx, DWORD PTR _H$[ebp]
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR [ecx]
	jbe	SHORT $LN7@Normalized

; 50   : 		*H = 0.0;

	mov	edx, DWORD PTR _H$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx], xmm0
$LN7@Normalized:

; 51   : 	if (*H > 360.0)

	mov	eax, DWORD PTR _H$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	comisd	xmm0, QWORD PTR __real@4076800000000000
	jbe	SHORT $LN8@Normalized

; 52   : 		*H = 360.0;

	mov	ecx, DWORD PTR _H$[ebp]
	movsd	xmm0, QWORD PTR __real@4076800000000000
	movsd	QWORD PTR [ecx], xmm0
$LN8@Normalized:

; 53   : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_NormalizedRGBtoHSL@36 ENDP
_TEXT	ENDS
END
