; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Users\Stuart\Desktop\Projects4\ColorBlend\ColorBlender\Scaling.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_floorf
PUBLIC	_ScaleImage@32
PUBLIC	_NearestNeighborScaling@28
PUBLIC	_BilinearScaling@28
PUBLIC	__real@3ff0000000000000
EXTRN	_floor:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\scaling.cpp
_TEXT	SEGMENT
_Blue$1 = -104						; size = 8
_Green$2 = -96						; size = 8
_Red$3 = -88						; size = 8
_VerticalRatio$ = -80					; size = 8
_HorizontalRatio$ = -72					; size = 8
_YDiff$4 = -64						; size = 8
_XDiff$5 = -56						; size = 8
_Dest$ = -48						; size = 4
_X$6 = -44						; size = 4
_Y$7 = -40						; size = 4
_DestIndex$ = -36					; size = 4
_d$8 = -32						; size = 4
_c$9 = -28						; size = 4
_b$10 = -24						; size = 4
_a$11 = -20						; size = 4
_Src$ = -16						; size = 4
_Index$12 = -12						; size = 4
_Row$13 = -8						; size = 4
_Column$14 = -4						; size = 4
_Source$ = 8						; size = 4
_Width$ = 12						; size = 4
_Height$ = 16						; size = 4
_Stride$ = 20						; size = 4
_Destination$ = 24					; size = 4
_DestWidth$ = 28					; size = 4
_DestHeight$ = 32					; size = 4
_BilinearScaling@28 PROC

; 66   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H

; 67   :     if (Source == NULL)

	cmp	DWORD PTR _Source$[ebp], 0
	jne	SHORT $LN8@BilinearSc

; 68   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@BilinearSc
$LN8@BilinearSc:

; 69   :     if (Destination == NULL)

	cmp	DWORD PTR _Destination$[ebp], 0
	jne	SHORT $LN9@BilinearSc

; 70   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@BilinearSc
$LN9@BilinearSc:

; 71   :     if (DestWidth == 0 || DestHeight == 0)

	cmp	DWORD PTR _DestWidth$[ebp], 0
	je	SHORT $LN11@BilinearSc
	cmp	DWORD PTR _DestHeight$[ebp], 0
	jne	SHORT $LN10@BilinearSc
$LN11@BilinearSc:

; 72   :         return InvalidOperation;

	mov	eax, 11					; 0000000bH
	jmp	$LN1@BilinearSc
$LN10@BilinearSc:

; 73   :     if (Width == DestWidth && Height == DestHeight)

	mov	eax, DWORD PTR _Width$[ebp]
	cmp	eax, DWORD PTR _DestWidth$[ebp]
	jne	SHORT $LN12@BilinearSc
	mov	ecx, DWORD PTR _Height$[ebp]
	cmp	ecx, DWORD PTR _DestHeight$[ebp]
	jne	SHORT $LN12@BilinearSc

; 74   :         return NoActionTaken;

	mov	eax, 12					; 0000000cH
	jmp	$LN1@BilinearSc
$LN12@BilinearSc:

; 75   : 
; 76   :     BYTE *Src = (BYTE *)Source;

	mov	edx, DWORD PTR _Source$[ebp]
	mov	DWORD PTR _Src$[ebp], edx

; 77   :     BYTE *Dest = (BYTE *)Destination;

	mov	eax, DWORD PTR _Destination$[ebp]
	mov	DWORD PTR _Dest$[ebp], eax

; 78   : 
; 79   :     double HorizontalRatio = ((double)(Width - 1)) / DestWidth;

	mov	ecx, DWORD PTR _Width$[ebp]
	sub	ecx, 1
	cvtsi2sd xmm0, ecx
	cvtsi2sd xmm1, DWORD PTR _DestWidth$[ebp]
	divsd	xmm0, xmm1
	movsd	QWORD PTR _HorizontalRatio$[ebp], xmm0

; 80   :     double VerticalRatio = ((double)(Height - 1)) / DestHeight;

	mov	edx, DWORD PTR _Height$[ebp]
	sub	edx, 1
	cvtsi2sd xmm0, edx
	cvtsi2sd xmm1, DWORD PTR _DestHeight$[ebp]
	divsd	xmm0, xmm1
	movsd	QWORD PTR _VerticalRatio$[ebp], xmm0

; 81   :     int DestIndex = 0;

	mov	DWORD PTR _DestIndex$[ebp], 0

; 82   : 
; 83   :     for (int Row = 0; Row < DestHeight; Row++)

	mov	DWORD PTR _Row$13[ebp], 0
	jmp	SHORT $LN4@BilinearSc
$LN2@BilinearSc:
	mov	eax, DWORD PTR _Row$13[ebp]
	add	eax, 1
	mov	DWORD PTR _Row$13[ebp], eax
$LN4@BilinearSc:
	mov	ecx, DWORD PTR _Row$13[ebp]
	cmp	ecx, DWORD PTR _DestHeight$[ebp]
	jge	$LN3@BilinearSc

; 84   :     {
; 85   :         for (int Column = 0; Column < DestWidth; Column++)

	mov	DWORD PTR _Column$14[ebp], 0
	jmp	SHORT $LN7@BilinearSc
$LN5@BilinearSc:
	mov	edx, DWORD PTR _Column$14[ebp]
	add	edx, 1
	mov	DWORD PTR _Column$14[ebp], edx
$LN7@BilinearSc:
	mov	eax, DWORD PTR _Column$14[ebp]
	cmp	eax, DWORD PTR _DestWidth$[ebp]
	jge	$LN6@BilinearSc

; 86   :         {
; 87   :             int X = (int)(HorizontalRatio * Column);

	cvtsi2sd xmm0, DWORD PTR _Column$14[ebp]
	mulsd	xmm0, QWORD PTR _HorizontalRatio$[ebp]
	cvttsd2si ecx, xmm0
	mov	DWORD PTR _X$6[ebp], ecx

; 88   :             int Y = (int)(VerticalRatio * Row);

	cvtsi2sd xmm0, DWORD PTR _Row$13[ebp]
	mulsd	xmm0, QWORD PTR _VerticalRatio$[ebp]
	cvttsd2si edx, xmm0
	mov	DWORD PTR _Y$7[ebp], edx

; 89   :             double XDiff = (HorizontalRatio * Column) - X;

	cvtsi2sd xmm0, DWORD PTR _Column$14[ebp]
	mulsd	xmm0, QWORD PTR _HorizontalRatio$[ebp]
	cvtsi2sd xmm1, DWORD PTR _X$6[ebp]
	subsd	xmm0, xmm1
	movsd	QWORD PTR _XDiff$5[ebp], xmm0

; 90   :             double YDiff = (VerticalRatio * Row) - Y;

	cvtsi2sd xmm0, DWORD PTR _Row$13[ebp]
	mulsd	xmm0, QWORD PTR _VerticalRatio$[ebp]
	cvtsi2sd xmm1, DWORD PTR _Y$7[ebp]
	subsd	xmm0, xmm1
	movsd	QWORD PTR _YDiff$4[ebp], xmm0

; 91   :             int Index = (Y * Width) + X;

	mov	eax, DWORD PTR _Y$7[ebp]
	imul	eax, DWORD PTR _Width$[ebp]
	add	eax, DWORD PTR _X$6[ebp]
	mov	DWORD PTR _Index$12[ebp], eax

; 92   :             int a = Src[Index];

	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index$12[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _a$11[ebp], edx

; 93   :             int b = Src[Index + 1];

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index$12[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	mov	DWORD PTR _b$10[ebp], ecx

; 94   :             int c = Src[Index + Width];

	mov	edx, DWORD PTR _Index$12[ebp]
	add	edx, DWORD PTR _Width$[ebp]
	mov	eax, DWORD PTR _Src$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	mov	DWORD PTR _c$9[ebp], ecx

; 95   :             int d = Src[Index + Width + 1];

	mov	edx, DWORD PTR _Index$12[ebp]
	add	edx, DWORD PTR _Width$[ebp]
	mov	eax, DWORD PTR _Src$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1]
	mov	DWORD PTR _d$8[ebp], ecx

; 96   :             double Blue = (a & 0xff) * (1 - XDiff) * (1 - YDiff) +
; 97   :                 (b & 0xff) * (XDiff)* (1 - YDiff) +
; 98   :                 (c & 0xff) * (YDiff)* (1 - XDiff) +

	mov	edx, DWORD PTR _a$11[ebp]
	and	edx, 255				; 000000ffH
	cvtsi2sd xmm0, edx
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, QWORD PTR _XDiff$5[ebp]
	mulsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, QWORD PTR _YDiff$4[ebp]
	mulsd	xmm0, xmm1
	mov	eax, DWORD PTR _b$10[ebp]
	and	eax, 255				; 000000ffH
	cvtsi2sd xmm1, eax
	mulsd	xmm1, QWORD PTR _XDiff$5[ebp]
	movsd	xmm2, QWORD PTR __real@3ff0000000000000
	subsd	xmm2, QWORD PTR _YDiff$4[ebp]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _c$9[ebp]
	and	ecx, 255				; 000000ffH
	cvtsi2sd xmm1, ecx
	mulsd	xmm1, QWORD PTR _YDiff$4[ebp]
	movsd	xmm2, QWORD PTR __real@3ff0000000000000
	subsd	xmm2, QWORD PTR _XDiff$5[ebp]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	mov	edx, DWORD PTR _d$8[ebp]
	and	edx, 255				; 000000ffH
	cvtsi2sd xmm1, edx
	movsd	xmm2, QWORD PTR _XDiff$5[ebp]
	mulsd	xmm2, QWORD PTR _YDiff$4[ebp]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	movsd	QWORD PTR _Blue$1[ebp], xmm0

; 99   :                 (d & 0xff) * (XDiff * YDiff);
; 100  :             double Green = ((a >> 8) & 0xff) * (1 - XDiff) * (1 - YDiff) + 
; 101  :                 ((b >> 8) & 0xff) * (XDiff) * (1 - YDiff) +
; 102  :                 ((c >> 8) & 0xff) * (YDiff) * (1 - XDiff) + 

	mov	eax, DWORD PTR _a$11[ebp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	cvtsi2sd xmm0, eax
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, QWORD PTR _XDiff$5[ebp]
	mulsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, QWORD PTR _YDiff$4[ebp]
	mulsd	xmm0, xmm1
	mov	ecx, DWORD PTR _b$10[ebp]
	sar	ecx, 8
	and	ecx, 255				; 000000ffH
	cvtsi2sd xmm1, ecx
	mulsd	xmm1, QWORD PTR _XDiff$5[ebp]
	movsd	xmm2, QWORD PTR __real@3ff0000000000000
	subsd	xmm2, QWORD PTR _YDiff$4[ebp]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	mov	edx, DWORD PTR _c$9[ebp]
	sar	edx, 8
	and	edx, 255				; 000000ffH
	cvtsi2sd xmm1, edx
	mulsd	xmm1, QWORD PTR _YDiff$4[ebp]
	movsd	xmm2, QWORD PTR __real@3ff0000000000000
	subsd	xmm2, QWORD PTR _XDiff$5[ebp]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	mov	eax, DWORD PTR _d$8[ebp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	cvtsi2sd xmm1, eax
	movsd	xmm2, QWORD PTR _XDiff$5[ebp]
	mulsd	xmm2, QWORD PTR _YDiff$4[ebp]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	movsd	QWORD PTR _Green$2[ebp], xmm0

; 103  :                 ((d >> 8) & 0xff) * (XDiff * YDiff);
; 104  :             double Red = ((a >> 16) & 0xff) * (1 - XDiff) * (1 - YDiff) + 
; 105  :                 ((b >> 16) & 0xff) * (XDiff) * (1 - YDiff) +
; 106  :                 ((c >> 16) & 0xff) * (YDiff) * (1 - XDiff) + 

	mov	ecx, DWORD PTR _a$11[ebp]
	sar	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	cvtsi2sd xmm0, ecx
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, QWORD PTR _XDiff$5[ebp]
	mulsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, QWORD PTR _YDiff$4[ebp]
	mulsd	xmm0, xmm1
	mov	edx, DWORD PTR _b$10[ebp]
	sar	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	cvtsi2sd xmm1, edx
	mulsd	xmm1, QWORD PTR _XDiff$5[ebp]
	movsd	xmm2, QWORD PTR __real@3ff0000000000000
	subsd	xmm2, QWORD PTR _YDiff$4[ebp]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	mov	eax, DWORD PTR _c$9[ebp]
	sar	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	cvtsi2sd xmm1, eax
	mulsd	xmm1, QWORD PTR _YDiff$4[ebp]
	movsd	xmm2, QWORD PTR __real@3ff0000000000000
	subsd	xmm2, QWORD PTR _XDiff$5[ebp]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _d$8[ebp]
	sar	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	cvtsi2sd xmm1, ecx
	movsd	xmm2, QWORD PTR _XDiff$5[ebp]
	mulsd	xmm2, QWORD PTR _YDiff$4[ebp]
	mulsd	xmm1, xmm2
	addsd	xmm0, xmm1
	movsd	QWORD PTR _Red$3[ebp], xmm0

; 107  :                 ((d >> 16) & 0xff) * (XDiff * YDiff);
; 108  :             Dest[DestIndex++] = 0xff000000 |

	cvttsd2si edx, QWORD PTR _Red$3[ebp]
	shl	edx, 16					; 00000010H
	and	edx, 16711680				; 00ff0000H
	or	edx, -16777216				; ff000000H
	cvttsd2si eax, QWORD PTR _Green$2[ebp]
	shl	eax, 8
	and	eax, 65280				; 0000ff00H
	or	edx, eax
	cvttsd2si ecx, QWORD PTR _Blue$1[ebp]
	or	edx, ecx
	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _DestIndex$[ebp]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _DestIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _DestIndex$[ebp], ecx

; 109  :                                 ((((int)Red) << 16) & 0xff0000) |
; 110  :                                 ((((int)Green) << 8) & 0xff00) |
; 111  :                                 ((int)Blue);
; 112  :         }

	jmp	$LN5@BilinearSc
$LN6@BilinearSc:

; 113  :     }

	jmp	$LN2@BilinearSc
$LN3@BilinearSc:

; 114  : 
; 115  :     return Success;

	xor	eax, eax
$LN1@BilinearSc:

; 116  : }

	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_BilinearScaling@28 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\scaling.cpp
_TEXT	SEGMENT
_NewX$1 = -48						; size = 8
_NewY$2 = -40						; size = 8
_VerticalRatio$ = -32					; size = 8
_HorizontalRatio$ = -24					; size = 8
_Src$ = -16						; size = 4
_Dest$ = -12						; size = 4
_Column$3 = -8						; size = 4
_Row$4 = -4						; size = 4
_Source$ = 8						; size = 4
_Width$ = 12						; size = 4
_Height$ = 16						; size = 4
_Stride$ = 20						; size = 4
_Destination$ = 24					; size = 4
_DestWidth$ = 28					; size = 4
_DestHeight$ = 32					; size = 4
_NearestNeighborScaling@28 PROC

; 35   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi

; 36   :     if (Source == NULL)

	cmp	DWORD PTR _Source$[ebp], 0
	jne	SHORT $LN8@NearestNei

; 37   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@NearestNei
$LN8@NearestNei:

; 38   :     if (Destination == NULL)

	cmp	DWORD PTR _Destination$[ebp], 0
	jne	SHORT $LN9@NearestNei

; 39   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@NearestNei
$LN9@NearestNei:

; 40   :     if (DestWidth == 0 || DestHeight == 0)

	cmp	DWORD PTR _DestWidth$[ebp], 0
	je	SHORT $LN11@NearestNei
	cmp	DWORD PTR _DestHeight$[ebp], 0
	jne	SHORT $LN10@NearestNei
$LN11@NearestNei:

; 41   :         return InvalidOperation;

	mov	eax, 11					; 0000000bH
	jmp	$LN1@NearestNei
$LN10@NearestNei:

; 42   :     if (Width == DestWidth && Height == DestHeight)

	mov	eax, DWORD PTR _Width$[ebp]
	cmp	eax, DWORD PTR _DestWidth$[ebp]
	jne	SHORT $LN12@NearestNei
	mov	ecx, DWORD PTR _Height$[ebp]
	cmp	ecx, DWORD PTR _DestHeight$[ebp]
	jne	SHORT $LN12@NearestNei

; 43   :         return NoActionTaken;

	mov	eax, 12					; 0000000cH
	jmp	$LN1@NearestNei
$LN12@NearestNei:

; 44   : 
; 45   :     UINT32 *Src = (UINT32 *)Source;

	mov	edx, DWORD PTR _Source$[ebp]
	mov	DWORD PTR _Src$[ebp], edx

; 46   :     UINT32 *Dest = (UINT32 *)Destination;

	mov	eax, DWORD PTR _Destination$[ebp]
	mov	DWORD PTR _Dest$[ebp], eax

; 47   : 
; 48   :     double HorizontalRatio = (double)Width / (double)DestWidth;

	cvtsi2sd xmm0, DWORD PTR _Width$[ebp]
	cvtsi2sd xmm1, DWORD PTR _DestWidth$[ebp]
	divsd	xmm0, xmm1
	movsd	QWORD PTR _HorizontalRatio$[ebp], xmm0

; 49   :     double VerticalRatio = (double)Height / (double)DestHeight;

	cvtsi2sd xmm0, DWORD PTR _Height$[ebp]
	cvtsi2sd xmm1, DWORD PTR _DestHeight$[ebp]
	divsd	xmm0, xmm1
	movsd	QWORD PTR _VerticalRatio$[ebp], xmm0

; 50   : 
; 51   :     for (int Row = 0; Row < DestHeight; Row++)

	mov	DWORD PTR _Row$4[ebp], 0
	jmp	SHORT $LN4@NearestNei
$LN2@NearestNei:
	mov	ecx, DWORD PTR _Row$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _Row$4[ebp], ecx
$LN4@NearestNei:
	mov	edx, DWORD PTR _Row$4[ebp]
	cmp	edx, DWORD PTR _DestHeight$[ebp]
	jge	$LN3@NearestNei

; 52   :     {
; 53   :         for (int Column = 0; Column < DestWidth; Column++)

	mov	DWORD PTR _Column$3[ebp], 0
	jmp	SHORT $LN7@NearestNei
$LN5@NearestNei:
	mov	eax, DWORD PTR _Column$3[ebp]
	add	eax, 1
	mov	DWORD PTR _Column$3[ebp], eax
$LN7@NearestNei:
	mov	ecx, DWORD PTR _Column$3[ebp]
	cmp	ecx, DWORD PTR _DestWidth$[ebp]
	jge	SHORT $LN6@NearestNei

; 54   :         {
; 55   :             double NewX = floorf((double)Column * HorizontalRatio);

	cvtsi2sd xmm0, DWORD PTR _Column$3[ebp]
	mulsd	xmm0, QWORD PTR _HorizontalRatio$[ebp]
	cvtsd2ss xmm0, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_floorf
	add	esp, 4
	fstp	QWORD PTR _NewX$1[ebp]

; 56   :             double NewY = floorf((double)Row * VerticalRatio);

	cvtsi2sd xmm0, DWORD PTR _Row$4[ebp]
	mulsd	xmm0, QWORD PTR _VerticalRatio$[ebp]
	cvtsd2ss xmm0, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_floorf
	add	esp, 4
	fstp	QWORD PTR _NewY$2[ebp]

; 57   :             Dest[(Row * DestWidth) + Column] = Src[(int)((NewY * Width) + NewX)];

	cvtsi2sd xmm0, DWORD PTR _Width$[ebp]
	mulsd	xmm0, QWORD PTR _NewY$2[ebp]
	addsd	xmm0, QWORD PTR _NewX$1[ebp]
	cvttsd2si edx, xmm0
	mov	eax, DWORD PTR _Row$4[ebp]
	imul	eax, DWORD PTR _DestWidth$[ebp]
	add	eax, DWORD PTR _Column$3[ebp]
	mov	ecx, DWORD PTR _Dest$[ebp]
	mov	esi, DWORD PTR _Src$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx

; 58   :         }

	jmp	SHORT $LN5@NearestNei
$LN6@NearestNei:

; 59   :     }

	jmp	$LN2@NearestNei
$LN3@NearestNei:

; 60   : 
; 61   :     return Success;

	xor	eax, eax
$LN1@NearestNei:

; 62   : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_NearestNeighborScaling@28 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\scaling.cpp
_TEXT	SEGMENT
tv70 = -4						; size = 4
_Source$ = 8						; size = 4
_Width$ = 12						; size = 4
_Height$ = 16						; size = 4
_Stride$ = 20						; size = 4
_Destination$ = 24					; size = 4
_DestWidth$ = 28					; size = 4
_DestHeight$ = 32					; size = 4
_ScalingMethod$ = 36					; size = 4
_ScaleImage@32 PROC

; 8    : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 9    :     if (Source == NULL)

	cmp	DWORD PTR _Source$[ebp], 0
	jne	SHORT $LN4@ScaleImage

; 10   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@ScaleImage
$LN4@ScaleImage:

; 11   :     if (Destination == NULL)

	cmp	DWORD PTR _Destination$[ebp], 0
	jne	SHORT $LN5@ScaleImage

; 12   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@ScaleImage
$LN5@ScaleImage:

; 13   :     if (DestWidth == 0 || DestHeight == 0)

	cmp	DWORD PTR _DestWidth$[ebp], 0
	je	SHORT $LN7@ScaleImage
	cmp	DWORD PTR _DestHeight$[ebp], 0
	jne	SHORT $LN6@ScaleImage
$LN7@ScaleImage:

; 14   :         return InvalidOperation;

	mov	eax, 11					; 0000000bH
	jmp	$LN1@ScaleImage
$LN6@ScaleImage:

; 15   :     if (Width == DestWidth && Height == DestHeight)

	mov	eax, DWORD PTR _Width$[ebp]
	cmp	eax, DWORD PTR _DestWidth$[ebp]
	jne	SHORT $LN8@ScaleImage
	mov	ecx, DWORD PTR _Height$[ebp]
	cmp	ecx, DWORD PTR _DestHeight$[ebp]
	jne	SHORT $LN8@ScaleImage

; 16   :         return NoActionTaken;

	mov	eax, 12					; 0000000cH
	jmp	SHORT $LN1@ScaleImage
$LN8@ScaleImage:

; 17   : 
; 18   :     switch (ScalingMethod)

	mov	edx, DWORD PTR _ScalingMethod$[ebp]
	mov	DWORD PTR tv70[ebp], edx
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN9@ScaleImage
	cmp	DWORD PTR tv70[ebp], 1
	je	SHORT $LN10@ScaleImage
	cmp	DWORD PTR tv70[ebp], 2
	je	SHORT $LN11@ScaleImage
	jmp	SHORT $LN2@ScaleImage
$LN9@ScaleImage:

; 19   :     {
; 20   :     case NoScaling:
; 21   :         return NoActionTaken;

	mov	eax, 12					; 0000000cH
	jmp	SHORT $LN1@ScaleImage
$LN10@ScaleImage:

; 22   : 
; 23   :     case NearestNeighbor:
; 24   :         return NearestNeighborScaling(Source, Width, Height, Stride, Destination, DestWidth, DestHeight);

	mov	eax, DWORD PTR _DestHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _DestWidth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Destination$[ebp]
	push	edx
	mov	eax, DWORD PTR _Stride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Width$[ebp]
	push	edx
	mov	eax, DWORD PTR _Source$[ebp]
	push	eax
	call	_NearestNeighborScaling@28
	jmp	SHORT $LN1@ScaleImage
$LN11@ScaleImage:

; 25   : 
; 26   :     case Bilinear:
; 27   :         return BilinearScaling(Source, Width, Height, Stride, Destination, DestWidth, DestHeight);

	mov	ecx, DWORD PTR _DestHeight$[ebp]
	push	ecx
	mov	edx, DWORD PTR _DestWidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _Destination$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Stride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Height$[ebp]
	push	edx
	mov	eax, DWORD PTR _Width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Source$[ebp]
	push	ecx
	call	_BilinearScaling@28
	jmp	SHORT $LN1@ScaleImage
$LN2@ScaleImage:

; 28   :     }
; 29   : 
; 30   :     return InvalidOperation;

	mov	eax, 11					; 0000000bH
$LN1@ScaleImage:

; 31   : }

	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
_ScaleImage@32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv77 = -20						; size = 8
tv71 = -12						; size = 8
tv79 = -4						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 684  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 685  :             return (float)floor(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	movsd	QWORD PTR tv71[ebp], xmm0
	fld	QWORD PTR tv71[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	fstp	QWORD PTR tv77[ebp]
	movsd	xmm0, QWORD PTR tv77[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv79[ebp], xmm0
	fld	DWORD PTR tv79[ebp]

; 686  :         }

	mov	esp, ebp
	pop	ebp
	ret	0
_floorf	ENDP
_TEXT	ENDS
END
