; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Users\Stuart\Desktop\Projects4\ColorBlend\ColorBlender\BayerDecoder.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_BayerDemosaic@28
PUBLIC	?BayerNearestDemosaic@@YGHPAXHHH0H@Z		; BayerNearestDemosaic
PUBLIC	?BayerLinearDemosaic@@YGHPAXHHH0H@Z		; BayerLinearDemosaic
PUBLIC	?BayerCubicDemosaic@@YGHPAXHHH0H@Z		; BayerCubicDemosaic
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\bayerdecoder.cpp
_TEXT	SEGMENT
_Index$1 = -28						; size = 4
_Dest$ = -24						; size = 4
_Src$ = -20						; size = 4
_RowOffset$2 = -16					; size = 4
_PixelSize$ = -12					; size = 4
_Column$3 = -8						; size = 4
_Row$4 = -4						; size = 4
_Source$ = 8						; size = 4
_BufferWidth$ = 12					; size = 4
_BufferHeight$ = 16					; size = 4
_BufferStride$ = 20					; size = 4
_Destination$ = 24					; size = 4
_Pattern$ = 28						; size = 4
?BayerCubicDemosaic@@YGHPAXHHH0H@Z PROC			; BayerCubicDemosaic

; 290  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 291  :     BYTE *Src = (BYTE *)Source;

	mov	eax, DWORD PTR _Source$[ebp]
	mov	DWORD PTR _Src$[ebp], eax

; 292  :     BYTE *Dest = (BYTE *)Destination;

	mov	ecx, DWORD PTR _Destination$[ebp]
	mov	DWORD PTR _Dest$[ebp], ecx

; 293  :     int PixelSize = 4;

	mov	DWORD PTR _PixelSize$[ebp], 4

; 294  : 
; 295  :     for (int Row = 0; Row < BufferHeight; Row++)

	mov	DWORD PTR _Row$4[ebp], 0
	jmp	SHORT $LN4@BayerCubic
$LN2@BayerCubic:
	mov	edx, DWORD PTR _Row$4[ebp]
	add	edx, 1
	mov	DWORD PTR _Row$4[ebp], edx
$LN4@BayerCubic:
	mov	eax, DWORD PTR _Row$4[ebp]
	cmp	eax, DWORD PTR _BufferHeight$[ebp]
	jge	SHORT $LN3@BayerCubic

; 296  :     {
; 297  :         int RowOffset = Row * BufferStride;

	mov	ecx, DWORD PTR _Row$4[ebp]
	imul	ecx, DWORD PTR _BufferStride$[ebp]
	mov	DWORD PTR _RowOffset$2[ebp], ecx

; 298  :         for (int Column = 0; Column < BufferWidth; Column++)

	mov	DWORD PTR _Column$3[ebp], 0
	jmp	SHORT $LN7@BayerCubic
$LN5@BayerCubic:
	mov	edx, DWORD PTR _Column$3[ebp]
	add	edx, 1
	mov	DWORD PTR _Column$3[ebp], edx
$LN7@BayerCubic:
	mov	eax, DWORD PTR _Column$3[ebp]
	cmp	eax, DWORD PTR _BufferWidth$[ebp]
	jge	SHORT $LN6@BayerCubic

; 299  :         {
; 300  :             int Index = RowOffset + (Column * PixelSize);

	mov	ecx, DWORD PTR _Column$3[ebp]
	imul	ecx, DWORD PTR _PixelSize$[ebp]
	add	ecx, DWORD PTR _RowOffset$2[ebp]
	mov	DWORD PTR _Index$1[ebp], ecx

; 301  :         }

	jmp	SHORT $LN5@BayerCubic
$LN6@BayerCubic:

; 302  :     }

	jmp	SHORT $LN2@BayerCubic
$LN3@BayerCubic:

; 303  : 
; 304  :     return Success;

	xor	eax, eax

; 305  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?BayerCubicDemosaic@@YGHPAXHHH0H@Z ENDP			; BayerCubicDemosaic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\bayerdecoder.cpp
_TEXT	SEGMENT
_RowOffset2$1 = -100					; size = 4
_RowOffset1$2 = -96					; size = 4
_RowOffset0$3 = -92					; size = 4
_HeightRemainder$ = -88					; size = 4
_WidthRemainder$ = -84					; size = 4
tv89 = -80						; size = 4
_Column$4 = -76						; size = 4
_Row$5 = -72						; size = 4
_PixelSize$ = -68					; size = 4
_B8$ = -62						; size = 1
_B6$ = -61						; size = 1
_B4$ = -60						; size = 1
_B2$ = -59						; size = 1
_B5$ = -58						; size = 1
_R8$ = -57						; size = 1
_R6$ = -56						; size = 1
_R4$ = -55						; size = 1
_R2$ = -54						; size = 1
_R5$ = -53						; size = 1
_Index9$ = -52						; size = 4
_Index7$ = -48						; size = 4
_Index3$ = -44						; size = 4
_Index1$ = -40						; size = 4
_Index4$ = -36						; size = 4
_Index2$ = -32						; size = 4
_G5$ = -25						; size = 1
_Index6$ = -24						; size = 4
_G9$ = -20						; size = 1
_G7$ = -19						; size = 1
_G3$ = -18						; size = 1
_G1$ = -17						; size = 1
_Index8$ = -16						; size = 4
_Index5$ = -12						; size = 4
_Dest$ = -8						; size = 4
_Src$ = -4						; size = 4
_Source$ = 8						; size = 4
_BufferWidth$ = 12					; size = 4
_BufferHeight$ = 16					; size = 4
_BufferStride$ = 20					; size = 4
_Destination$ = 24					; size = 4
_Pattern$ = 28						; size = 4
?BayerLinearDemosaic@@YGHPAXHHH0H@Z PROC		; BayerLinearDemosaic

; 111  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H

; 112  :     BYTE *Src = (BYTE *)Source;

	mov	eax, DWORD PTR _Source$[ebp]
	mov	DWORD PTR _Src$[ebp], eax

; 113  :     BYTE *Dest = (BYTE *)Destination;

	mov	ecx, DWORD PTR _Destination$[ebp]
	mov	DWORD PTR _Dest$[ebp], ecx

; 114  :     int PixelSize = 4;

	mov	DWORD PTR _PixelSize$[ebp], 4

; 115  :     int WidthRemainder = BufferWidth % 3;

	mov	eax, DWORD PTR _BufferWidth$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _WidthRemainder$[ebp], edx

; 116  :     int HeightRemainder = BufferHeight % 3;

	mov	eax, DWORD PTR _BufferHeight$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _HeightRemainder$[ebp], edx

; 117  :     BufferWidth -= WidthRemainder;

	mov	edx, DWORD PTR _BufferWidth$[ebp]
	sub	edx, DWORD PTR _WidthRemainder$[ebp]
	mov	DWORD PTR _BufferWidth$[ebp], edx

; 118  :     BufferHeight -= HeightRemainder;

	mov	eax, DWORD PTR _BufferHeight$[ebp]
	sub	eax, DWORD PTR _HeightRemainder$[ebp]
	mov	DWORD PTR _BufferHeight$[ebp], eax

; 119  :     BYTE G5 = 0;

	mov	BYTE PTR _G5$[ebp], 0

; 120  :     BYTE B5 = 0;

	mov	BYTE PTR _B5$[ebp], 0

; 121  :     BYTE B2 = 0;

	mov	BYTE PTR _B2$[ebp], 0

; 122  :     BYTE B4 = 0;

	mov	BYTE PTR _B4$[ebp], 0

; 123  :     BYTE B6 = 0;

	mov	BYTE PTR _B6$[ebp], 0

; 124  :     BYTE B8 = 0;

	mov	BYTE PTR _B8$[ebp], 0

; 125  :     BYTE G1 = 0;

	mov	BYTE PTR _G1$[ebp], 0

; 126  :     BYTE G3 = 0;

	mov	BYTE PTR _G3$[ebp], 0

; 127  :     BYTE G7 = 0;

	mov	BYTE PTR _G7$[ebp], 0

; 128  :     BYTE G9 = 0;

	mov	BYTE PTR _G9$[ebp], 0

; 129  :     BYTE R5 = 0;

	mov	BYTE PTR _R5$[ebp], 0

; 130  :     BYTE R2 = 0;

	mov	BYTE PTR _R2$[ebp], 0

; 131  :     BYTE R4 = 0;

	mov	BYTE PTR _R4$[ebp], 0

; 132  :     BYTE R6 = 0;

	mov	BYTE PTR _R6$[ebp], 0

; 133  :     BYTE R8 = 0;

	mov	BYTE PTR _R8$[ebp], 0

; 134  :     int Index1 = 0;

	mov	DWORD PTR _Index1$[ebp], 0

; 135  :     int Index2 = 0;

	mov	DWORD PTR _Index2$[ebp], 0

; 136  :     int Index3 = 0;

	mov	DWORD PTR _Index3$[ebp], 0

; 137  :     int Index4 = 0;

	mov	DWORD PTR _Index4$[ebp], 0

; 138  :     int Index5 = 0;

	mov	DWORD PTR _Index5$[ebp], 0

; 139  :     int Index6 = 0;

	mov	DWORD PTR _Index6$[ebp], 0

; 140  :     int Index7 = 0;

	mov	DWORD PTR _Index7$[ebp], 0

; 141  :     int Index8 = 0;

	mov	DWORD PTR _Index8$[ebp], 0

; 142  :     int Index9 = 0;

	mov	DWORD PTR _Index9$[ebp], 0

; 143  : 
; 144  :     for (int Row = 0; Row < BufferHeight; Row += 3)

	mov	DWORD PTR _Row$5[ebp], 0
	jmp	SHORT $LN4@BayerLinea
$LN2@BayerLinea:
	mov	ecx, DWORD PTR _Row$5[ebp]
	add	ecx, 3
	mov	DWORD PTR _Row$5[ebp], ecx
$LN4@BayerLinea:
	mov	edx, DWORD PTR _Row$5[ebp]
	cmp	edx, DWORD PTR _BufferHeight$[ebp]
	jge	$LN3@BayerLinea

; 145  :     {
; 146  :         int RowOffset0 = Row * BufferStride;

	mov	eax, DWORD PTR _Row$5[ebp]
	imul	eax, DWORD PTR _BufferStride$[ebp]
	mov	DWORD PTR _RowOffset0$3[ebp], eax

; 147  :         int RowOffset1 = (Row + 1) * BufferStride;

	mov	ecx, DWORD PTR _Row$5[ebp]
	add	ecx, 1
	imul	ecx, DWORD PTR _BufferStride$[ebp]
	mov	DWORD PTR _RowOffset1$2[ebp], ecx

; 148  :         int RowOffset2 = (Row + 2) * BufferStride;

	mov	edx, DWORD PTR _Row$5[ebp]
	add	edx, 2
	imul	edx, DWORD PTR _BufferStride$[ebp]
	mov	DWORD PTR _RowOffset2$1[ebp], edx

; 149  :         for (int Column = 0; Column < BufferWidth; Column += 3)

	mov	DWORD PTR _Column$4[ebp], 0
	jmp	SHORT $LN7@BayerLinea
$LN5@BayerLinea:
	mov	eax, DWORD PTR _Column$4[ebp]
	add	eax, 3
	mov	DWORD PTR _Column$4[ebp], eax
$LN7@BayerLinea:
	mov	ecx, DWORD PTR _Column$4[ebp]
	cmp	ecx, DWORD PTR _BufferWidth$[ebp]
	jge	$LN6@BayerLinea

; 150  :         {
; 151  :             Index1 = (Column * PixelSize) + RowOffset0;

	mov	edx, DWORD PTR _Column$4[ebp]
	imul	edx, DWORD PTR _PixelSize$[ebp]
	add	edx, DWORD PTR _RowOffset0$3[ebp]
	mov	DWORD PTR _Index1$[ebp], edx

; 152  :             Index2 = Index1 + PixelSize;

	mov	eax, DWORD PTR _Index1$[ebp]
	add	eax, DWORD PTR _PixelSize$[ebp]
	mov	DWORD PTR _Index2$[ebp], eax

; 153  :             Index3 = Index2 + PixelSize;

	mov	ecx, DWORD PTR _Index2$[ebp]
	add	ecx, DWORD PTR _PixelSize$[ebp]
	mov	DWORD PTR _Index3$[ebp], ecx

; 154  :             Index4 = (Column * PixelSize) + RowOffset1;

	mov	edx, DWORD PTR _Column$4[ebp]
	imul	edx, DWORD PTR _PixelSize$[ebp]
	add	edx, DWORD PTR _RowOffset1$2[ebp]
	mov	DWORD PTR _Index4$[ebp], edx

; 155  :             Index5 = Index4 + PixelSize;

	mov	eax, DWORD PTR _Index4$[ebp]
	add	eax, DWORD PTR _PixelSize$[ebp]
	mov	DWORD PTR _Index5$[ebp], eax

; 156  :             Index6 = Index5 + PixelSize;

	mov	ecx, DWORD PTR _Index5$[ebp]
	add	ecx, DWORD PTR _PixelSize$[ebp]
	mov	DWORD PTR _Index6$[ebp], ecx

; 157  :             Index7 = (Column * PixelSize) + RowOffset2;

	mov	edx, DWORD PTR _Column$4[ebp]
	imul	edx, DWORD PTR _PixelSize$[ebp]
	add	edx, DWORD PTR _RowOffset2$1[ebp]
	mov	DWORD PTR _Index7$[ebp], edx

; 158  :             Index8 = Index7 + PixelSize;

	mov	eax, DWORD PTR _Index7$[ebp]
	add	eax, DWORD PTR _PixelSize$[ebp]
	mov	DWORD PTR _Index8$[ebp], eax

; 159  :             Index9 = Index8 + PixelSize;

	mov	ecx, DWORD PTR _Index8$[ebp]
	add	ecx, DWORD PTR _PixelSize$[ebp]
	mov	DWORD PTR _Index9$[ebp], ecx

; 160  : 
; 161  :             switch (Pattern)

	mov	edx, DWORD PTR _Pattern$[ebp]
	mov	DWORD PTR tv89[ebp], edx
	cmp	DWORD PTR tv89[ebp], 0
	je	SHORT $LN10@BayerLinea
	cmp	DWORD PTR tv89[ebp], 1
	je	$LN11@BayerLinea
	jmp	$LN12@BayerLinea
$LN10@BayerLinea:

; 162  :             {
; 163  :             case BayerRGGB:
; 164  :                 //1,1
; 165  :                 G5 = (Src[Index2 + 1] + Src[Index4 + 1] + Src[Index6 + 1] + Src[Index8 + 1]) / 4;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index2$[ebp]
	movzx	eax, BYTE PTR [eax+1]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index4$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index6$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index8$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	BYTE PTR _G5$[ebp], al

; 166  :                 R5 = (Src[Index1 + 2] + Src[Index3 + 2] + Src[Index6 + 2] + Src[Index8 + 2]) / 4;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index1$[ebp]
	movzx	eax, BYTE PTR [eax+2]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index3$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	add	eax, edx
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index6$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	add	eax, edx
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index8$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	add	eax, edx
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	BYTE PTR _R5$[ebp], al

; 167  :                 Dest[Index5 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index5$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 168  :                 Dest[Index5 + 2] = R5;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index5$[ebp]
	mov	dl, BYTE PTR _R5$[ebp]
	mov	BYTE PTR [ecx+2], dl

; 169  :                 Dest[Index5 + 1] = G5;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index5$[ebp]
	mov	cl, BYTE PTR _G5$[ebp]
	mov	BYTE PTR [eax+1], cl

; 170  :                 Dest[Index5 + 0] = Src[Index5 + 0];

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _Index5$[ebp]
	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index5$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl

; 171  :                 //1,0
; 172  :                 R2 = (Src[Index1 + 2] + Src[Index3 + 2]) / 2;

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index1$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index3$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR _R2$[ebp], al

; 173  :                 Dest[Index2 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index2$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 174  :                 Dest[Index2 + 2] = R2;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index2$[ebp]
	mov	dl, BYTE PTR _R2$[ebp]
	mov	BYTE PTR [ecx+2], dl

; 175  :                 Dest[Index2 + 1] = Src[Index2 + 1];

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index2$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index2$[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax+1], dl

; 176  :                 Dest[Index2 + 0] = Src[Index5 + 0];

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index2$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index5$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 177  :                 //0,1
; 178  :                 R4 = (Src[Index1 + 2] + Src[Index7 + 2]) / 2;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index1$[ebp]
	movzx	eax, BYTE PTR [eax+2]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index7$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR _R4$[ebp], al

; 179  :                 Dest[Index4 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index4$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 180  :                 Dest[Index4 + 2] = R4;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index4$[ebp]
	mov	dl, BYTE PTR _R4$[ebp]
	mov	BYTE PTR [ecx+2], dl

; 181  :                 Dest[Index4 + 1] = Src[Index4 + 1];

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index4$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index4$[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax+1], dl

; 182  :                 Dest[Index4 + 0] = Src[Index5 + 0];

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index4$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index5$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 183  :                 //2,1
; 184  :                 R6 = (Src[Index3 + 2] + Src[Index9 + 2]) / 2;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index3$[ebp]
	movzx	eax, BYTE PTR [eax+2]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index9$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR _R6$[ebp], al

; 185  :                 Dest[Index6 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index6$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 186  :                 Dest[Index6 + 2] = R6;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index6$[ebp]
	mov	dl, BYTE PTR _R6$[ebp]
	mov	BYTE PTR [ecx+2], dl

; 187  :                 Dest[Index6 + 1] = Src[Index6 + 1];

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index6$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index6$[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax+1], dl

; 188  :                 Dest[Index6 + 0] = Src[Index5 + 0];

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index6$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index5$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 189  :                 //1,2
; 190  :                 R8 = (Src[Index7 + 2] + Src[Index9 + 2]) / 2;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index7$[ebp]
	movzx	eax, BYTE PTR [eax+2]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index9$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR _R8$[ebp], al

; 191  :                 Dest[Index8 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index8$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 192  :                 Dest[Index8 + 2] = R8;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index8$[ebp]
	mov	dl, BYTE PTR _R8$[ebp]
	mov	BYTE PTR [ecx+2], dl

; 193  :                 Dest[Index8 + 1] = Src[Index8 + 1];

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index8$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index8$[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax+1], dl

; 194  :                 Dest[Index8 + 0] = Src[Index5 + 0];;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index8$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index5$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 195  :                 //0,0
; 196  :                 G1 = (Src[Index2 + 1] + Src[Index4 + 1]) / 2;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index2$[ebp]
	movzx	eax, BYTE PTR [eax+1]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index4$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR _G1$[ebp], al

; 197  :                 Dest[Index1 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index1$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 198  :                 Dest[Index1 + 2] = Src[Index1 + 2];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index1$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index1$[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al

; 199  :                 Dest[Index1 + 1] = G1;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index1$[ebp]
	mov	dl, BYTE PTR _G1$[ebp]
	mov	BYTE PTR [ecx+1], dl

; 200  :                 Dest[Index1 + 0] = Src[Index5 + 0];

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index1$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index5$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 201  :                 //2,0
; 202  :                 G3 = (Src[Index2 + 1] + Src[Index6 + 1]) / 2;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index2$[ebp]
	movzx	eax, BYTE PTR [eax+1]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index6$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR _G3$[ebp], al

; 203  :                 Dest[Index3 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index3$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 204  :                 Dest[Index3 + 2] = Src[Index3 + 2];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index3$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index3$[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al

; 205  :                 Dest[Index3 + 1] = G3;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index3$[ebp]
	mov	dl, BYTE PTR _G3$[ebp]
	mov	BYTE PTR [ecx+1], dl

; 206  :                 Dest[Index3 + 0] = Src[Index5 + 0];

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index3$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index5$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 207  :                 //0,2
; 208  :                 G7 = (Src[Index4 + 1] + Src[Index8 + 1]) / 2;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index4$[ebp]
	movzx	eax, BYTE PTR [eax+1]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index8$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR _G7$[ebp], al

; 209  :                 Dest[Index7 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index7$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 210  :                 Dest[Index7 + 2] = Src[Index7 + 2];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index7$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index7$[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al

; 211  :                 Dest[Index7 + 1] = G7;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index7$[ebp]
	mov	dl, BYTE PTR _G7$[ebp]
	mov	BYTE PTR [ecx+1], dl

; 212  :                 Dest[Index7 + 0] = Src[Index5 + 0];

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index7$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index5$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 213  :                 //2,2
; 214  :                 G9 = (Src[Index6 + 1] + Src[Index8 + 1]) / 2;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index6$[ebp]
	movzx	eax, BYTE PTR [eax+1]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index8$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR _G9$[ebp], al

; 215  :                 Dest[Index9 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index9$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 216  :                 Dest[Index9 + 2] = Src[Index9 + 2];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index9$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index9$[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al

; 217  :                 Dest[Index9 + 1] = G9;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index9$[ebp]
	mov	dl, BYTE PTR _G9$[ebp]
	mov	BYTE PTR [ecx+1], dl

; 218  :                 Dest[Index9 + 0] = Src[Index5 + 0];

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index9$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index5$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 219  :                 break;

	jmp	$LN8@BayerLinea
$LN11@BayerLinea:

; 220  : 
; 221  :             case BayerBGGR:
; 222  :                 //1,1
; 223  :                 G5 = (Src[Index2 + 1] + Src[Index4 + 1] + Src[Index6 + 1] + Src[Index8 + 1]) / 4;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index2$[ebp]
	movzx	eax, BYTE PTR [eax+1]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index4$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index6$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index8$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	BYTE PTR _G5$[ebp], al

; 224  :                 B5 = (Src[Index2 + 0] + Src[Index4 + 0] + Src[Index6 + 0] + Src[Index8 + 0]) / 4;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index2$[ebp]
	movzx	eax, BYTE PTR [eax]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index4$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	eax, edx
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index6$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	eax, edx
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index8$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	eax, edx
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	BYTE PTR _B5$[ebp], al

; 225  :                 Dest[Index5 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index5$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 226  :                 Dest[Index5 + 2] = Src[Index5 + 2];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index5$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index5$[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al

; 227  :                 Dest[Index5 + 1] = G5;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index5$[ebp]
	mov	dl, BYTE PTR _G5$[ebp]
	mov	BYTE PTR [ecx+1], dl

; 228  :                 Dest[Index5 + 0] = B5;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index5$[ebp]
	mov	cl, BYTE PTR _B5$[ebp]
	mov	BYTE PTR [eax], cl

; 229  :                 //1,0
; 230  :                 B2 = (Src[Index1 + 0] + Src[Index3 + 0]) / 2;

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index1$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index3$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR _B2$[ebp], al

; 231  :                 Dest[Index2 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index2$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 232  :                 Dest[Index2 + 2] = Src[Index5 + 2];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index2$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index5$[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al

; 233  :                 Dest[Index2 + 1] = Src[Index2 + 1];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index2$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index2$[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al

; 234  :                 Dest[Index2 + 0] = B2;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index2$[ebp]
	mov	dl, BYTE PTR _B2$[ebp]
	mov	BYTE PTR [ecx], dl

; 235  :                 //0,1
; 236  :                 B4 = (Src[Index1 + 0] + Src[Index7 + 0]) / 2;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index1$[ebp]
	movzx	eax, BYTE PTR [eax]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index7$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR _B4$[ebp], al

; 237  :                 Dest[Index4 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index4$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 238  :                 Dest[Index4 + 2] = Src[Index5 + 2];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index4$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index5$[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al

; 239  :                 Dest[Index4 + 1] = Src[Index4 + 1];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index4$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index4$[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al

; 240  :                 Dest[Index4 + 0] = B4;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index4$[ebp]
	mov	dl, BYTE PTR _B4$[ebp]
	mov	BYTE PTR [ecx], dl

; 241  :                 //2,1
; 242  :                 B6 = (Src[Index3 + 0] + Src[Index9 + 0]) / 2;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index3$[ebp]
	movzx	eax, BYTE PTR [eax]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index9$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR _B6$[ebp], al

; 243  :                 Dest[Index6 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index6$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 244  :                 Dest[Index6 + 2] = Src[Index5 + 2];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index6$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index5$[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al

; 245  :                 Dest[Index6 + 1] = Src[Index6 + 1];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index6$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index6$[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al

; 246  :                 Dest[Index6 + 0] = B6;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index6$[ebp]
	mov	dl, BYTE PTR _B6$[ebp]
	mov	BYTE PTR [ecx], dl

; 247  :                 //1,2
; 248  :                 B8 = (Src[Index7 + 0] + Src[Index9 + 0]) / 2;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index7$[ebp]
	movzx	eax, BYTE PTR [eax]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index9$[ebp]
	movzx	edx, BYTE PTR [ecx]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR _B8$[ebp], al

; 249  :                 Dest[Index8 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index8$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 250  :                 Dest[Index8 + 2] = Src[Index5 + 2];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index8$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index5$[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al

; 251  :                 Dest[Index8 + 1] = Src[Index8 + 1];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index8$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index8$[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al

; 252  :                 Dest[Index8 + 0] = B8;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index8$[ebp]
	mov	dl, BYTE PTR _B8$[ebp]
	mov	BYTE PTR [ecx], dl

; 253  :                 //0,0
; 254  :                 G1 = (Src[Index2 + 1] + Src[Index4 + 1]) / 2;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index2$[ebp]
	movzx	eax, BYTE PTR [eax+1]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index4$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR _G1$[ebp], al

; 255  :                 Dest[Index1 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index1$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 256  :                 Dest[Index1 + 2] = Src[Index5 + 2];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index1$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index5$[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al

; 257  :                 Dest[Index1 + 1] = G1;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index1$[ebp]
	mov	dl, BYTE PTR _G1$[ebp]
	mov	BYTE PTR [ecx+1], dl

; 258  :                 Dest[Index1 + 0] = Src[Index1 + 0];

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index1$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index1$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 259  :                 //2,0
; 260  :                 G3 = (Src[Index2 + 1] + Src[Index6 + 1]) / 2;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index2$[ebp]
	movzx	eax, BYTE PTR [eax+1]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index6$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR _G3$[ebp], al

; 261  :                 Dest[Index3 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index3$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 262  :                 Dest[Index3 + 2] = Src[Index5 + 2];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index3$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index5$[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al

; 263  :                 Dest[Index3 + 1] = G3;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index3$[ebp]
	mov	dl, BYTE PTR _G3$[ebp]
	mov	BYTE PTR [ecx+1], dl

; 264  :                 Dest[Index3 + 0] = Src[Index3 + 0];

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index3$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index3$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 265  :                 //0,2
; 266  :                 G7 = (Src[Index4 + 1] + Src[Index8 + 1]) / 2;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index4$[ebp]
	movzx	eax, BYTE PTR [eax+1]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index8$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR _G7$[ebp], al

; 267  :                 Dest[Index7 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index7$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 268  :                 Dest[Index7 + 2] = Src[Index5 + 2];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index7$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index5$[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al

; 269  :                 Dest[Index7 + 1] = G7;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index7$[ebp]
	mov	dl, BYTE PTR _G7$[ebp]
	mov	BYTE PTR [ecx+1], dl

; 270  :                 Dest[Index7 + 0] = Src[Index7 + 0];

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index7$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index7$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 271  :                 //2,2
; 272  :                 G9 = (Src[Index6 + 1] + Src[Index8 + 1]) / 2;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index6$[ebp]
	movzx	eax, BYTE PTR [eax+1]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index8$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR _G9$[ebp], al

; 273  :                 Dest[Index9 + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index9$[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 274  :                 Dest[Index9 + 2] = Src[Index5 + 2];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index9$[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index5$[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al

; 275  :                 Dest[Index9 + 1] = G9;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index9$[ebp]
	mov	dl, BYTE PTR _G9$[ebp]
	mov	BYTE PTR [ecx+1], dl

; 276  :                 Dest[Index9 + 0] = Src[Index9 + 0];

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index9$[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index9$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 277  :                 break;

	jmp	SHORT $LN8@BayerLinea
$LN12@BayerLinea:

; 278  : 
; 279  :             default:
; 280  :                 return InvalidOperation;

	mov	eax, 11					; 0000000bH
	jmp	SHORT $LN1@BayerLinea
$LN8@BayerLinea:

; 281  :             }
; 282  :         }

	jmp	$LN5@BayerLinea
$LN6@BayerLinea:

; 283  :     }

	jmp	$LN2@BayerLinea
$LN3@BayerLinea:

; 284  : 
; 285  :     return Success;

	xor	eax, eax
$LN1@BayerLinea:

; 286  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?BayerLinearDemosaic@@YGHPAXHHH0H@Z ENDP		; BayerLinearDemosaic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\bayerdecoder.cpp
_TEXT	SEGMENT
_RowOffset1$1 = -64					; size = 4
_RowOffset0$2 = -60					; size = 4
tv83 = -56						; size = 4
_GTemp$ = -52						; size = 4
_PixelSize$ = -48					; size = 4
_Column$3 = -44						; size = 4
_Row$4 = -40						; size = 4
_GTemp1$ = -36						; size = 4
_GTemp0$ = -32						; size = 4
_LR$5 = -28						; size = 4
_UR$6 = -24						; size = 4
_LL$7 = -20						; size = 4
_UL$8 = -16						; size = 4
_Src$ = -12						; size = 4
_Dest$ = -8						; size = 4
_MeanG$ = -3						; size = 1
_MeanB$ = -2						; size = 1
_MeanR$ = -1						; size = 1
_Source$ = 8						; size = 4
_BufferWidth$ = 12					; size = 4
_BufferHeight$ = 16					; size = 4
_BufferStride$ = 20					; size = 4
_Destination$ = 24					; size = 4
_Pattern$ = 28						; size = 4
?BayerNearestDemosaic@@YGHPAXHHH0H@Z PROC		; BayerNearestDemosaic

; 14   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H

; 15   :     BYTE *Src = (BYTE *)Source;

	mov	eax, DWORD PTR _Source$[ebp]
	mov	DWORD PTR _Src$[ebp], eax

; 16   :     BYTE *Dest = (BYTE *)Destination;

	mov	ecx, DWORD PTR _Destination$[ebp]
	mov	DWORD PTR _Dest$[ebp], ecx

; 17   :     BYTE MeanR = 0x0;

	mov	BYTE PTR _MeanR$[ebp], 0

; 18   :     BYTE MeanG = 0x0;

	mov	BYTE PTR _MeanG$[ebp], 0

; 19   :     BYTE MeanB = 0x0;

	mov	BYTE PTR _MeanB$[ebp], 0

; 20   :     int GTemp0 = 0;

	mov	DWORD PTR _GTemp0$[ebp], 0

; 21   :     int GTemp1 = 0;

	mov	DWORD PTR _GTemp1$[ebp], 0

; 22   :     int GTemp = 0;

	mov	DWORD PTR _GTemp$[ebp], 0

; 23   :     int PixelSize = 4;

	mov	DWORD PTR _PixelSize$[ebp], 4

; 24   :     if (BufferWidth % 2 != 0)

	mov	edx, DWORD PTR _BufferWidth$[ebp]
	and	edx, -2147483647			; 80000001H
	jns	SHORT $LN16@BayerNeare
	dec	edx
	or	edx, -2					; fffffffeH
	inc	edx
$LN16@BayerNeare:
	test	edx, edx
	je	SHORT $LN10@BayerNeare

; 25   :         BufferWidth--;

	mov	eax, DWORD PTR _BufferWidth$[ebp]
	sub	eax, 1
	mov	DWORD PTR _BufferWidth$[ebp], eax
$LN10@BayerNeare:

; 26   :     if (BufferHeight % 2 != 0)

	mov	ecx, DWORD PTR _BufferHeight$[ebp]
	and	ecx, -2147483647			; 80000001H
	jns	SHORT $LN17@BayerNeare
	dec	ecx
	or	ecx, -2					; fffffffeH
	inc	ecx
$LN17@BayerNeare:
	test	ecx, ecx
	je	SHORT $LN11@BayerNeare

; 27   :         BufferHeight--;

	mov	edx, DWORD PTR _BufferHeight$[ebp]
	sub	edx, 1
	mov	DWORD PTR _BufferHeight$[ebp], edx
$LN11@BayerNeare:

; 28   :     //ClearBufferDWord(Destination, BufferWidth, BufferHeight, 0x0);
; 29   : 
; 30   :     for (int Row = 0; Row < BufferHeight; Row += 2)

	mov	DWORD PTR _Row$4[ebp], 0
	jmp	SHORT $LN4@BayerNeare
$LN2@BayerNeare:
	mov	eax, DWORD PTR _Row$4[ebp]
	add	eax, 2
	mov	DWORD PTR _Row$4[ebp], eax
$LN4@BayerNeare:
	mov	ecx, DWORD PTR _Row$4[ebp]
	cmp	ecx, DWORD PTR _BufferHeight$[ebp]
	jge	$LN3@BayerNeare

; 31   :     {
; 32   :         int RowOffset0 = Row * BufferStride;

	mov	edx, DWORD PTR _Row$4[ebp]
	imul	edx, DWORD PTR _BufferStride$[ebp]
	mov	DWORD PTR _RowOffset0$2[ebp], edx

; 33   :         int RowOffset1 = (Row + 1) * BufferStride;

	mov	eax, DWORD PTR _Row$4[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _BufferStride$[ebp]
	mov	DWORD PTR _RowOffset1$1[ebp], eax

; 34   :         for (int Column = 0; Column < BufferWidth; Column += 2)

	mov	DWORD PTR _Column$3[ebp], 0
	jmp	SHORT $LN7@BayerNeare
$LN5@BayerNeare:
	mov	ecx, DWORD PTR _Column$3[ebp]
	add	ecx, 2
	mov	DWORD PTR _Column$3[ebp], ecx
$LN7@BayerNeare:
	mov	edx, DWORD PTR _Column$3[ebp]
	cmp	edx, DWORD PTR _BufferWidth$[ebp]
	jge	$LN6@BayerNeare

; 35   :         {
; 36   :             int UL = RowOffset0 + (Column * PixelSize);

	mov	eax, DWORD PTR _Column$3[ebp]
	imul	eax, DWORD PTR _PixelSize$[ebp]
	add	eax, DWORD PTR _RowOffset0$2[ebp]
	mov	DWORD PTR _UL$8[ebp], eax

; 37   :             int UR = UL + PixelSize;

	mov	ecx, DWORD PTR _UL$8[ebp]
	add	ecx, DWORD PTR _PixelSize$[ebp]
	mov	DWORD PTR _UR$6[ebp], ecx

; 38   :             int LL = RowOffset1 + (Column * PixelSize);

	mov	edx, DWORD PTR _Column$3[ebp]
	imul	edx, DWORD PTR _PixelSize$[ebp]
	add	edx, DWORD PTR _RowOffset1$1[ebp]
	mov	DWORD PTR _LL$7[ebp], edx

; 39   :             int LR = LL + PixelSize;

	mov	eax, DWORD PTR _LL$7[ebp]
	add	eax, DWORD PTR _PixelSize$[ebp]
	mov	DWORD PTR _LR$5[ebp], eax

; 40   :             switch (Pattern)

	mov	ecx, DWORD PTR _Pattern$[ebp]
	mov	DWORD PTR tv83[ebp], ecx
	cmp	DWORD PTR tv83[ebp], 0
	je	SHORT $LN12@BayerNeare
	cmp	DWORD PTR tv83[ebp], 1
	je	$LN13@BayerNeare
	jmp	$LN14@BayerNeare
$LN12@BayerNeare:

; 41   :             {
; 42   :             case BayerRGGB:
; 43   :                 MeanR = (Src[UL + 0] + Src[UL + 1] + Src[UL + 2]) / 3;

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _UL$8[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _UL$8[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _UL$8[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	add	eax, edx
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	BYTE PTR _MeanR$[ebp], al

; 44   :                 MeanB = (Src[LR + 0] + Src[LR + 1] + Src[LR + 2]) / 3;

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _LR$5[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _LR$5[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _LR$5[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	add	eax, edx
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	BYTE PTR _MeanB$[ebp], al

; 45   :                 GTemp0 = Src[UR + 0] + Src[UR + 1] + Src[UR + 2];

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _UR$6[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _UR$6[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _UR$6[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	add	eax, edx
	mov	DWORD PTR _GTemp0$[ebp], eax

; 46   :                 GTemp1 = Src[LL + 0] + Src[LL + 1] + Src[LL + 2];

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _LL$7[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _LL$7[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	ecx, eax
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _LL$7[ebp]
	movzx	eax, BYTE PTR [edx+2]
	add	ecx, eax
	mov	DWORD PTR _GTemp1$[ebp], ecx

; 47   :                 GTemp = GTemp0 + GTemp1;

	mov	ecx, DWORD PTR _GTemp0$[ebp]
	add	ecx, DWORD PTR _GTemp1$[ebp]
	mov	DWORD PTR _GTemp$[ebp], ecx

; 48   :                 MeanG = (BYTE)(GTemp / 6);

	mov	eax, DWORD PTR _GTemp$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	BYTE PTR _MeanG$[ebp], al

; 49   :                 //Upper-left (red)
; 50   :                 Dest[UL + 3] = 0xff;

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _UL$8[ebp]
	mov	BYTE PTR [edx+3], 255			; 000000ffH

; 51   :                 Dest[UL + 2] = MeanR;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _UL$8[ebp]
	mov	cl, BYTE PTR _MeanR$[ebp]
	mov	BYTE PTR [eax+2], cl

; 52   :                 Dest[UL + 1] = MeanG;

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _UL$8[ebp]
	mov	al, BYTE PTR _MeanG$[ebp]
	mov	BYTE PTR [edx+1], al

; 53   :                 Dest[UL + 0] = MeanB;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _UL$8[ebp]
	mov	dl, BYTE PTR _MeanB$[ebp]
	mov	BYTE PTR [ecx], dl

; 54   :                 //Upper-right (green)
; 55   :                 Dest[UR + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _UR$6[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 56   :                 Dest[UR + 2] = MeanR;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _UR$6[ebp]
	mov	dl, BYTE PTR _MeanR$[ebp]
	mov	BYTE PTR [ecx+2], dl

; 57   :                 Dest[UR + 1] = (GTemp0 / 3);

	mov	eax, DWORD PTR _GTemp0$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _UR$6[ebp]
	mov	BYTE PTR [edx+1], al

; 58   :                 Dest[UR + 0] = MeanB;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _UR$6[ebp]
	mov	cl, BYTE PTR _MeanB$[ebp]
	mov	BYTE PTR [eax], cl

; 59   :                 //Lower-left (green)
; 60   :                 Dest[LL + 3] = 0xff;

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _LL$7[ebp]
	mov	BYTE PTR [edx+3], 255			; 000000ffH

; 61   :                 Dest[LL + 2] = MeanR;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _LL$7[ebp]
	mov	cl, BYTE PTR _MeanR$[ebp]
	mov	BYTE PTR [eax+2], cl

; 62   :                 Dest[LL + 1] = (GTemp1 / 3);

	mov	eax, DWORD PTR _GTemp1$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _LL$7[ebp]
	mov	BYTE PTR [edx+1], al

; 63   :                 Dest[LL + 0] = MeanB;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _LL$7[ebp]
	mov	cl, BYTE PTR _MeanB$[ebp]
	mov	BYTE PTR [eax], cl

; 64   :                 //Lower-right (blue)
; 65   :                 Dest[LR + 3] = 0xff;

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _LR$5[ebp]
	mov	BYTE PTR [edx+3], 255			; 000000ffH

; 66   :                 Dest[LR + 2] = MeanR;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _LR$5[ebp]
	mov	cl, BYTE PTR _MeanR$[ebp]
	mov	BYTE PTR [eax+2], cl

; 67   :                 Dest[LR + 1] = MeanG;

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _LR$5[ebp]
	mov	al, BYTE PTR _MeanG$[ebp]
	mov	BYTE PTR [edx+1], al

; 68   :                 Dest[LR + 0] = MeanB;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _LR$5[ebp]
	mov	dl, BYTE PTR _MeanB$[ebp]
	mov	BYTE PTR [ecx], dl

; 69   :                 break;

	jmp	$LN8@BayerNeare
$LN13@BayerNeare:

; 70   : 
; 71   :             case BayerBGGR:
; 72   :                 MeanR = (Src[LR + 0] + Src[LR + 1] + Src[LR + 2]) / 3;

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _LR$5[ebp]
	movzx	eax, BYTE PTR [eax]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _LR$5[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _LR$5[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	add	eax, edx
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	BYTE PTR _MeanR$[ebp], al

; 73   :                 MeanB = (Src[UL + 0] + Src[UL + 1] + Src[UL + 2]) / 3;

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _UL$8[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _UL$8[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _UL$8[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	add	eax, edx
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	BYTE PTR _MeanB$[ebp], al

; 74   :                 GTemp0 = Src[UR + 0] + Src[UR + 1] + Src[UR + 2];

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _UR$6[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _UR$6[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _UR$6[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	add	eax, edx
	mov	DWORD PTR _GTemp0$[ebp], eax

; 75   :                 GTemp1 = Src[LL + 0] + Src[LL + 1] + Src[LL + 2];

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _LL$7[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _LL$7[ebp]
	movzx	eax, BYTE PTR [edx+1]
	add	ecx, eax
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _LL$7[ebp]
	movzx	eax, BYTE PTR [edx+2]
	add	ecx, eax
	mov	DWORD PTR _GTemp1$[ebp], ecx

; 76   :                 GTemp = GTemp0 + GTemp1;

	mov	ecx, DWORD PTR _GTemp0$[ebp]
	add	ecx, DWORD PTR _GTemp1$[ebp]
	mov	DWORD PTR _GTemp$[ebp], ecx

; 77   :                 MeanG = (BYTE)(GTemp / 6);

	mov	eax, DWORD PTR _GTemp$[ebp]
	cdq
	mov	ecx, 6
	idiv	ecx
	mov	BYTE PTR _MeanG$[ebp], al

; 78   :                 //Upper-left (blue)
; 79   :                 Dest[UL + 3] = 0xff;

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _UL$8[ebp]
	mov	BYTE PTR [edx+3], 255			; 000000ffH

; 80   :                 Dest[UL + 2] = MeanR;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _UL$8[ebp]
	mov	cl, BYTE PTR _MeanR$[ebp]
	mov	BYTE PTR [eax+2], cl

; 81   :                 Dest[UL + 1] = MeanG;

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _UL$8[ebp]
	mov	al, BYTE PTR _MeanG$[ebp]
	mov	BYTE PTR [edx+1], al

; 82   :                 Dest[UL + 0] = MeanB;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _UL$8[ebp]
	mov	dl, BYTE PTR _MeanB$[ebp]
	mov	BYTE PTR [ecx], dl

; 83   :                 //Upper-right (green)
; 84   :                 Dest[UR + 3] = 0xff;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _UR$6[ebp]
	mov	BYTE PTR [eax+3], 255			; 000000ffH

; 85   :                 Dest[UR + 2] = MeanR;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _UR$6[ebp]
	mov	dl, BYTE PTR _MeanR$[ebp]
	mov	BYTE PTR [ecx+2], dl

; 86   :                 Dest[UR + 1] = (GTemp0 / 3);

	mov	eax, DWORD PTR _GTemp0$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _UR$6[ebp]
	mov	BYTE PTR [edx+1], al

; 87   :                 Dest[UR + 0] = MeanB;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _UR$6[ebp]
	mov	cl, BYTE PTR _MeanB$[ebp]
	mov	BYTE PTR [eax], cl

; 88   :                 //Lower-left (green)
; 89   :                 Dest[LL + 3] = 0xff;

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _LL$7[ebp]
	mov	BYTE PTR [edx+3], 255			; 000000ffH

; 90   :                 Dest[LL + 2] = MeanR;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _LL$7[ebp]
	mov	cl, BYTE PTR _MeanR$[ebp]
	mov	BYTE PTR [eax+2], cl

; 91   :                 Dest[LL + 1] = (GTemp1 / 3);

	mov	eax, DWORD PTR _GTemp1$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _LL$7[ebp]
	mov	BYTE PTR [edx+1], al

; 92   :                 Dest[LL + 0] = MeanB;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _LL$7[ebp]
	mov	cl, BYTE PTR _MeanB$[ebp]
	mov	BYTE PTR [eax], cl

; 93   :                 //Lower-right (red)
; 94   :                 Dest[LR + 3] = 0xff;

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _LR$5[ebp]
	mov	BYTE PTR [edx+3], 255			; 000000ffH

; 95   :                 Dest[LR + 2] = MeanR;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _LR$5[ebp]
	mov	cl, BYTE PTR _MeanR$[ebp]
	mov	BYTE PTR [eax+2], cl

; 96   :                 Dest[LR + 1] = MeanG;

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _LR$5[ebp]
	mov	al, BYTE PTR _MeanG$[ebp]
	mov	BYTE PTR [edx+1], al

; 97   :                 Dest[LR + 0] = MeanB;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _LR$5[ebp]
	mov	dl, BYTE PTR _MeanB$[ebp]
	mov	BYTE PTR [ecx], dl

; 98   :                 break;

	jmp	SHORT $LN8@BayerNeare
$LN14@BayerNeare:

; 99   : 
; 100  :             default:
; 101  :                 return InvalidOperation;

	mov	eax, 11					; 0000000bH
	jmp	SHORT $LN1@BayerNeare
$LN8@BayerNeare:

; 102  :             }
; 103  :         }

	jmp	$LN5@BayerNeare
$LN6@BayerNeare:

; 104  :     }

	jmp	$LN2@BayerNeare
$LN3@BayerNeare:

; 105  : 
; 106  :     return Success;

	xor	eax, eax
$LN1@BayerNeare:

; 107  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?BayerNearestDemosaic@@YGHPAXHHH0H@Z ENDP		; BayerNearestDemosaic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\bayerdecoder.cpp
_TEXT	SEGMENT
tv66 = -8						; size = 4
_Result$ = -4						; size = 4
_Source$ = 8						; size = 4
_BufferWidth$ = 12					; size = 4
_BufferHeight$ = 16					; size = 4
_BufferStride$ = 20					; size = 4
_Destination$ = 24					; size = 4
_Pattern$ = 28						; size = 4
_Method$ = 32						; size = 4
_BayerDemosaic@28 PROC

; 309  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 310  :     if (Source == NULL)

	cmp	DWORD PTR _Source$[ebp], 0
	jne	SHORT $LN4@BayerDemos

; 311  :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@BayerDemos
$LN4@BayerDemos:

; 312  :     if (Destination == NULL)

	cmp	DWORD PTR _Destination$[ebp], 0
	jne	SHORT $LN5@BayerDemos

; 313  :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@BayerDemos
$LN5@BayerDemos:

; 314  :     int Result = InvalidOperation;

	mov	DWORD PTR _Result$[ebp], 11		; 0000000bH

; 315  : 
; 316  :     switch (Method)

	mov	eax, DWORD PTR _Method$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 0
	je	SHORT $LN6@BayerDemos
	cmp	DWORD PTR tv66[ebp], 1
	je	SHORT $LN7@BayerDemos
	cmp	DWORD PTR tv66[ebp], 2
	je	SHORT $LN8@BayerDemos
	jmp	SHORT $LN9@BayerDemos
$LN6@BayerDemos:

; 317  :     {
; 318  :     case BayerDemosaicNearest:
; 319  :         Result = BayerNearestDemosaic(Source, BufferWidth, BufferHeight, BufferStride, Destination, Pattern);

	mov	ecx, DWORD PTR _Pattern$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Destination$[ebp]
	push	edx
	mov	eax, DWORD PTR _BufferStride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BufferHeight$[ebp]
	push	ecx
	mov	edx, DWORD PTR _BufferWidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _Source$[ebp]
	push	eax
	call	?BayerNearestDemosaic@@YGHPAXHHH0H@Z	; BayerNearestDemosaic
	mov	DWORD PTR _Result$[ebp], eax

; 320  :         break;

	jmp	SHORT $LN2@BayerDemos
$LN7@BayerDemos:

; 321  : 
; 322  :     case BayerDemosaicLinear:
; 323  :         Result = BayerLinearDemosaic(Source, BufferWidth, BufferHeight, BufferStride, Destination, Pattern);

	mov	ecx, DWORD PTR _Pattern$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Destination$[ebp]
	push	edx
	mov	eax, DWORD PTR _BufferStride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BufferHeight$[ebp]
	push	ecx
	mov	edx, DWORD PTR _BufferWidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _Source$[ebp]
	push	eax
	call	?BayerLinearDemosaic@@YGHPAXHHH0H@Z	; BayerLinearDemosaic
	mov	DWORD PTR _Result$[ebp], eax

; 324  :         break;

	jmp	SHORT $LN2@BayerDemos
$LN8@BayerDemos:

; 325  : 
; 326  :     case BayerDemosaicCubic:
; 327  :         Result = BayerCubicDemosaic(Source, BufferWidth, BufferHeight, BufferStride, Destination, Pattern);

	mov	ecx, DWORD PTR _Pattern$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Destination$[ebp]
	push	edx
	mov	eax, DWORD PTR _BufferStride$[ebp]
	push	eax
	mov	ecx, DWORD PTR _BufferHeight$[ebp]
	push	ecx
	mov	edx, DWORD PTR _BufferWidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _Source$[ebp]
	push	eax
	call	?BayerCubicDemosaic@@YGHPAXHHH0H@Z	; BayerCubicDemosaic
	mov	DWORD PTR _Result$[ebp], eax

; 328  :         break;

	jmp	SHORT $LN2@BayerDemos
$LN9@BayerDemos:

; 329  : 
; 330  :     default:
; 331  :         Result = InvalidOperation;

	mov	DWORD PTR _Result$[ebp], 11		; 0000000bH
$LN2@BayerDemos:

; 332  :         break;
; 333  :     }
; 334  : 
; 335  :     return Result;

	mov	eax, DWORD PTR _Result$[ebp]
$LN1@BayerDemos:

; 336  : }

	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_BayerDemosaic@28 ENDP
_TEXT	ENDS
END
