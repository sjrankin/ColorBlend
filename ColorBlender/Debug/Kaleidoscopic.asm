; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Users\Stuart\Desktop\Projects4\ColorBlend\ColorBlender\Kaleidoscopic.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?SimpleVerticalKaleidoscope@@YGHPAXHH0H@Z	; SimpleVerticalKaleidoscope
PUBLIC	?SimpleHorizontalKaleidoscope@@YGHPAXHH0H@Z	; SimpleHorizontalKaleidoscope
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_HorizontalMirrorPixelRegion@32:PROC
EXTRN	_VerticalMirrorPixelRegion@32:PROC
EXTRN	_CopyBufferRegionPixel@32:PROC
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\kaleidoscopic.cpp
_TEXT	SEGMENT
_Right$1 = -28						; size = 4
_Dest$ = -24						; size = 4
_Src$ = -20						; size = 4
$T2 = -16						; size = 4
_RightWidth$ = -12					; size = 4
_LeftWidth$ = -8					; size = 4
_OpResult$ = -4						; size = 4
_Source$ = 8						; size = 4
_Width$ = 12						; size = 4
_Height$ = 16						; size = 4
_Destination$ = 20					; size = 4
_Pivot$ = 24						; size = 4
?SimpleHorizontalKaleidoscope@@YGHPAXHH0H@Z PROC	; SimpleHorizontalKaleidoscope

; 60   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 61   :     if (Source == NULL)

	cmp	DWORD PTR _Source$[ebp], 0
	jne	SHORT $LN2@SimpleHori

; 62   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@SimpleHori
$LN2@SimpleHori:

; 63   :     if (Destination == NULL)

	cmp	DWORD PTR _Destination$[ebp], 0
	jne	SHORT $LN3@SimpleHori

; 64   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@SimpleHori
$LN3@SimpleHori:

; 65   : 
; 66   :     if (Pivot > Width - 1)

	mov	eax, DWORD PTR _Width$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _Pivot$[ebp], eax
	jle	SHORT $LN4@SimpleHori

; 67   :         return InvalidOperation;

	mov	eax, 11					; 0000000bH
	jmp	$LN1@SimpleHori
$LN4@SimpleHori:

; 68   :     if (Pivot < 1)

	cmp	DWORD PTR _Pivot$[ebp], 1
	jge	SHORT $LN5@SimpleHori

; 69   :         Pivot = Width / 2;

	mov	eax, DWORD PTR _Width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _Pivot$[ebp], eax
$LN5@SimpleHori:

; 70   :     int LeftWidth = Pivot;

	mov	ecx, DWORD PTR _Pivot$[ebp]
	mov	DWORD PTR _LeftWidth$[ebp], ecx

; 71   :     int RightWidth = Width - Pivot - 1;

	mov	edx, DWORD PTR _Width$[ebp]
	sub	edx, DWORD PTR _Pivot$[ebp]
	sub	edx, 1
	mov	DWORD PTR _RightWidth$[ebp], edx

; 72   : 
; 73   :     UINT32 *Src = (UINT32 *)Source;

	mov	eax, DWORD PTR _Source$[ebp]
	mov	DWORD PTR _Src$[ebp], eax

; 74   :     UINT32 *Dest = (UINT32 *)Destination;

	mov	ecx, DWORD PTR _Destination$[ebp]
	mov	DWORD PTR _Dest$[ebp], ecx

; 75   : 
; 76   :     int OpResult = NotSet;

	mov	DWORD PTR _OpResult$[ebp], -1

; 77   :     OpResult = CopyBufferRegionPixel(Source, Width, Height, Destination, 0, 0, LeftWidth, Height);

	mov	edx, DWORD PTR _Height$[ebp]
	push	edx
	mov	eax, DWORD PTR _LeftWidth$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _Destination$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Height$[ebp]
	push	edx
	mov	eax, DWORD PTR _Width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Source$[ebp]
	push	ecx
	call	_CopyBufferRegionPixel@32
	mov	DWORD PTR _OpResult$[ebp], eax

; 78   :     if (OpResult)

	cmp	DWORD PTR _OpResult$[ebp], 0
	je	SHORT $LN6@SimpleHori

; 79   :     {
; 80   :         UINT32 *Right = new UINT32[RightWidth * Height];

	mov	eax, DWORD PTR _RightWidth$[ebp]
	imul	eax, DWORD PTR _Height$[ebp]
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _Right$1[ebp], eax

; 81   :         OpResult = HorizontalMirrorPixelRegion(Source, Width, Height, Destination, Pivot + 1, 0, Width, Height);

	mov	ecx, DWORD PTR _Height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Width$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _Pivot$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _Destination$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Height$[ebp]
	push	edx
	mov	eax, DWORD PTR _Width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Source$[ebp]
	push	ecx
	call	_HorizontalMirrorPixelRegion@32
	mov	DWORD PTR _OpResult$[ebp], eax
$LN6@SimpleHori:

; 82   :     }
; 83   : 
; 84   :     return OpResult;

	mov	eax, DWORD PTR _OpResult$[ebp]
$LN1@SimpleHori:

; 85   : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?SimpleHorizontalKaleidoscope@@YGHPAXHH0H@Z ENDP	; SimpleHorizontalKaleidoscope
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\kaleidoscopic.cpp
_TEXT	SEGMENT
_Dest$ = -44						; size = 4
_Src$ = -40						; size = 4
$T1 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
_Bottom$ = -20						; size = 4
_Top$ = -16						; size = 4
_BottomHeight$ = -12					; size = 4
_TopHeight$ = -8					; size = 4
_OpResult$ = -4						; size = 4
_Source$ = 8						; size = 4
_Width$ = 12						; size = 4
_Height$ = 16						; size = 4
_Destination$ = 20					; size = 4
_Pivot$ = 24						; size = 4
?SimpleVerticalKaleidoscope@@YGHPAXHH0H@Z PROC		; SimpleVerticalKaleidoscope

; 13   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 14   :     if (Source == NULL)

	cmp	DWORD PTR _Source$[ebp], 0
	jne	SHORT $LN2@SimpleVert

; 15   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@SimpleVert
$LN2@SimpleVert:

; 16   :     if (Destination == NULL)

	cmp	DWORD PTR _Destination$[ebp], 0
	jne	SHORT $LN3@SimpleVert

; 17   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@SimpleVert
$LN3@SimpleVert:

; 18   :     if (Pivot > Height - 1)

	mov	eax, DWORD PTR _Height$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _Pivot$[ebp], eax
	jle	SHORT $LN4@SimpleVert

; 19   :         return InvalidOperation;

	mov	eax, 11					; 0000000bH
	jmp	$LN1@SimpleVert
$LN4@SimpleVert:

; 20   :     if (Pivot < 1)

	cmp	DWORD PTR _Pivot$[ebp], 1
	jge	SHORT $LN5@SimpleVert

; 21   :         Pivot = Height / 2;

	mov	eax, DWORD PTR _Height$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _Pivot$[ebp], eax
$LN5@SimpleVert:

; 22   :     int TopHeight = Pivot;

	mov	ecx, DWORD PTR _Pivot$[ebp]
	mov	DWORD PTR _TopHeight$[ebp], ecx

; 23   :     int BottomHeight = Height - Pivot - 1;

	mov	edx, DWORD PTR _Height$[ebp]
	sub	edx, DWORD PTR _Pivot$[ebp]
	sub	edx, 1
	mov	DWORD PTR _BottomHeight$[ebp], edx

; 24   : 
; 25   :     UINT32 *Src = (UINT32 *)Source;

	mov	eax, DWORD PTR _Source$[ebp]
	mov	DWORD PTR _Src$[ebp], eax

; 26   :     UINT32 *Dest = (UINT32 *)Destination;

	mov	ecx, DWORD PTR _Destination$[ebp]
	mov	DWORD PTR _Dest$[ebp], ecx

; 27   :     UINT32 *Top = new UINT32[Width * TopHeight];

	mov	eax, DWORD PTR _Width$[ebp]
	imul	eax, DWORD PTR _TopHeight$[ebp]
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR _Top$[ebp], eax

; 28   :     UINT32 *Bottom = new UINT32[Width * BottomHeight];

	mov	eax, DWORD PTR _Width$[ebp]
	imul	eax, DWORD PTR _BottomHeight$[ebp]
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR _Bottom$[ebp], eax

; 29   : 
; 30   :     int OpResult = NotSet;

	mov	DWORD PTR _OpResult$[ebp], -1

; 31   :     OpResult = CopyBufferRegionPixel(Source, Width, Height, Top, 0, 0, Width - 1, TopHeight);

	mov	ecx, DWORD PTR _TopHeight$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Width$[ebp]
	sub	edx, 1
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _Top$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Width$[ebp]
	push	edx
	mov	eax, DWORD PTR _Source$[ebp]
	push	eax
	call	_CopyBufferRegionPixel@32
	mov	DWORD PTR _OpResult$[ebp], eax

; 32   :     if (OpResult == Success)

	cmp	DWORD PTR _OpResult$[ebp], 0
	jne	$LN6@SimpleVert

; 33   :     {
; 34   :         OpResult = VerticalMirrorPixelRegion(Source, Width, Height, Bottom, 0, TopHeight + 1, Width - 1, BottomHeight);

	mov	ecx, DWORD PTR _BottomHeight$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Width$[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _TopHeight$[ebp]
	add	eax, 1
	push	eax
	push	0
	mov	ecx, DWORD PTR _Bottom$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Height$[ebp]
	push	edx
	mov	eax, DWORD PTR _Width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Source$[ebp]
	push	ecx
	call	_VerticalMirrorPixelRegion@32
	mov	DWORD PTR _OpResult$[ebp], eax

; 35   :         if (OpResult == Success)

	cmp	DWORD PTR _OpResult$[ebp], 0
	jne	SHORT $LN6@SimpleVert

; 36   :         {
; 37   :             OpResult = CopyBufferRegionPixel(Top, Width, TopHeight, Destination, 0, 0, Width - 1, TopHeight);

	mov	edx, DWORD PTR _TopHeight$[ebp]
	push	edx
	mov	eax, DWORD PTR _Width$[ebp]
	sub	eax, 1
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _Destination$[ebp]
	push	ecx
	mov	edx, DWORD PTR _TopHeight$[ebp]
	push	edx
	mov	eax, DWORD PTR _Width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Top$[ebp]
	push	ecx
	call	_CopyBufferRegionPixel@32
	mov	DWORD PTR _OpResult$[ebp], eax

; 38   :             if (OpResult == Success)

	cmp	DWORD PTR _OpResult$[ebp], 0
	jne	SHORT $LN6@SimpleVert

; 39   :             {
; 40   :                 OpResult = CopyBufferRegionPixel(Bottom, Width, BottomHeight, Destination, 0, TopHeight + 1, Width - 1, BottomHeight);

	mov	edx, DWORD PTR _BottomHeight$[ebp]
	push	edx
	mov	eax, DWORD PTR _Width$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _TopHeight$[ebp]
	add	ecx, 1
	push	ecx
	push	0
	mov	edx, DWORD PTR _Destination$[ebp]
	push	edx
	mov	eax, DWORD PTR _BottomHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Bottom$[ebp]
	push	edx
	call	_CopyBufferRegionPixel@32
	mov	DWORD PTR _OpResult$[ebp], eax
$LN6@SimpleVert:

; 41   :             }
; 42   :         }
; 43   :     }
; 44   : 
; 45   :     delete[] Top;

	mov	eax, DWORD PTR _Top$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 46   :     delete[] Bottom;

	mov	edx, DWORD PTR _Bottom$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 47   :     return OpResult;

	mov	eax, DWORD PTR _OpResult$[ebp]
$LN1@SimpleVert:

; 48   : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?SimpleVerticalKaleidoscope@@YGHPAXHH0H@Z ENDP		; SimpleVerticalKaleidoscope
_TEXT	ENDS
END
