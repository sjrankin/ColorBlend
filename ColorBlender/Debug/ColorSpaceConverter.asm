; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Users\Stuart\Desktop\Projects4\ColorBlend\ColorBlender\ColorSpaceConverter.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_ConvertColorSpace@24
PUBLIC	__real@406fe00000000000
EXTRN	_RGBtoYCbCr@36:PROC
EXTRN	_RGBtoHSL@36:PROC
EXTRN	_RGBtoYIQ@36:PROC
EXTRN	_RGBtoXYZ@36:PROC
EXTRN	_RGBtoCMY@36:PROC
EXTRN	_RGBtoCIELAB@36:PROC
EXTRN	_RGBtoYUV@36:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colorspaceconverter.cpp
_TEXT	SEGMENT
_ANormal$1 = -264					; size = 8
_I$2 = -256						; size = 8
_Y$3 = -248						; size = 8
_U$4 = -240						; size = 8
_Y$5 = -232						; size = 8
_Cb$6 = -224						; size = 8
_Y$7 = -216						; size = 8
_M$8 = -208						; size = 8
_C$9 = -200						; size = 8
_Y$10 = -192						; size = 8
_X$11 = -184						; size = 8
_Al$12 = -176						; size = 8
_L$13 = -168						; size = 8
_S$14 = -160						; size = 8
_H$15 = -152						; size = 8
_S$16 = -144						; size = 8
_H$17 = -136						; size = 8
_Q$18 = -128						; size = 8
_V$19 = -120						; size = 8
_Cr$20 = -112						; size = 8
_Y$21 = -104						; size = 8
_Z$22 = -96						; size = 8
_Bl$23 = -88						; size = 8
_V$24 = -80						; size = 8
_L$25 = -72						; size = 8
_RowOffset$26 = -64					; size = 4
_PixelSize$ = -60					; size = 4
tv130 = -56						; size = 4
_RNormal$27 = -52					; size = 8
_GNormal$28 = -44					; size = 8
_BNormal$29 = -36					; size = 8
_Dest$ = -28						; size = 4
_Src$ = -24						; size = 4
_Column$30 = -20					; size = 4
_Row$31 = -16						; size = 4
_FinalA$32 = -12					; size = 1
_B$33 = -11						; size = 1
_G$34 = -10						; size = 1
_R$35 = -9						; size = 1
_Index$36 = -8						; size = 4
_A$37 = -4						; size = 1
_FinalB$38 = -3						; size = 1
_FinalG$39 = -2						; size = 1
_FinalR$40 = -1						; size = 1
_Source$ = 8						; size = 4
_Width$ = 12						; size = 4
_Height$ = 16						; size = 4
_Stride$ = 20						; size = 4
_Destination$ = 24					; size = 4
_ToColorSpace$ = 28					; size = 1
_ConvertColorSpace@24 PROC

; 18   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H

; 19   :     if (Source == NULL)

	cmp	DWORD PTR _Source$[ebp], 0
	jne	SHORT $LN10@ConvertCol

; 20   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@ConvertCol
$LN10@ConvertCol:

; 21   :     if (Destination == NULL)

	cmp	DWORD PTR _Destination$[ebp], 0
	jne	SHORT $LN11@ConvertCol

; 22   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@ConvertCol
$LN11@ConvertCol:

; 23   : 
; 24   :     int PixelSize = 4;

	mov	DWORD PTR _PixelSize$[ebp], 4

; 25   :     BYTE *Src = (BYTE *)Source;

	mov	eax, DWORD PTR _Source$[ebp]
	mov	DWORD PTR _Src$[ebp], eax

; 26   :     BYTE *Dest = (BYTE *)Destination;

	mov	ecx, DWORD PTR _Destination$[ebp]
	mov	DWORD PTR _Dest$[ebp], ecx

; 27   : 
; 28   :     for (int Row = 0; Row < Height; Row++)

	mov	DWORD PTR _Row$31[ebp], 0
	jmp	SHORT $LN4@ConvertCol
$LN2@ConvertCol:
	mov	edx, DWORD PTR _Row$31[ebp]
	add	edx, 1
	mov	DWORD PTR _Row$31[ebp], edx
$LN4@ConvertCol:
	mov	eax, DWORD PTR _Row$31[ebp]
	cmp	eax, DWORD PTR _Height$[ebp]
	jge	$LN3@ConvertCol

; 29   :     {
; 30   :         int RowOffset = Row * Stride;

	mov	ecx, DWORD PTR _Row$31[ebp]
	imul	ecx, DWORD PTR _Stride$[ebp]
	mov	DWORD PTR _RowOffset$26[ebp], ecx

; 31   :         for (int Column = 0; Column < Width; Column++)

	mov	DWORD PTR _Column$30[ebp], 0
	jmp	SHORT $LN7@ConvertCol
$LN5@ConvertCol:
	mov	edx, DWORD PTR _Column$30[ebp]
	add	edx, 1
	mov	DWORD PTR _Column$30[ebp], edx
$LN7@ConvertCol:
	mov	eax, DWORD PTR _Column$30[ebp]
	cmp	eax, DWORD PTR _Width$[ebp]
	jge	$LN6@ConvertCol

; 32   :         {
; 33   :             int Index = (Column * PixelSize) + RowOffset;

	mov	ecx, DWORD PTR _Column$30[ebp]
	imul	ecx, DWORD PTR _PixelSize$[ebp]
	add	ecx, DWORD PTR _RowOffset$26[ebp]
	mov	DWORD PTR _Index$36[ebp], ecx

; 34   :             BYTE A = Src[Index + 3];

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index$36[ebp]
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR _A$37[ebp], al

; 35   :             BYTE R = Src[Index + 2];

	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index$36[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR _R$35[ebp], dl

; 36   :             BYTE G = Src[Index + 1];

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index$36[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR _G$34[ebp], cl

; 37   :             BYTE B = Src[Index + 0];

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index$36[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _B$33[ebp], al

; 38   :             double ANormal = (double)A / 255.0;

	movzx	ecx, BYTE PTR _A$37[ebp]
	cvtsi2sd xmm0, ecx
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	movsd	QWORD PTR _ANormal$1[ebp], xmm0

; 39   :             double RNormal = (double)R / 255.0;

	movzx	edx, BYTE PTR _R$35[ebp]
	cvtsi2sd xmm0, edx
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	movsd	QWORD PTR _RNormal$27[ebp], xmm0

; 40   :             double GNormal = (double)G / 255.0;

	movzx	eax, BYTE PTR _G$34[ebp]
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	movsd	QWORD PTR _GNormal$28[ebp], xmm0

; 41   :             double BNormal = (double)B / 255.0;

	movzx	ecx, BYTE PTR _B$33[ebp]
	cvtsi2sd xmm0, ecx
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	movsd	QWORD PTR _BNormal$29[ebp], xmm0

; 42   :             BYTE FinalA = A;

	mov	dl, BYTE PTR _A$37[ebp]
	mov	BYTE PTR _FinalA$32[ebp], dl

; 43   :             BYTE FinalR = 0x0;

	mov	BYTE PTR _FinalR$40[ebp], 0

; 44   :             BYTE FinalG = 0x0;

	mov	BYTE PTR _FinalG$39[ebp], 0

; 45   :             BYTE FinalB = 0x0;

	mov	BYTE PTR _FinalB$38[ebp], 0

; 46   : 
; 47   :             switch (ToColorSpace)

	movzx	eax, BYTE PTR _ToColorSpace$[ebp]
	mov	DWORD PTR tv130[ebp], eax
	cmp	DWORD PTR tv130[ebp], 9
	ja	$LN21@ConvertCol
	mov	ecx, DWORD PTR tv130[ebp]
	jmp	DWORD PTR $LN23@ConvertCol[ecx*4]
$LN12@ConvertCol:

; 48   :             {
; 49   :                 case ToHSL:
; 50   :                 {
; 51   :                     double H, S, L = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _L$25[ebp], xmm0

; 52   :                     RGBtoHSL(RNormal, GNormal, BNormal, &H, &S, &L);

	lea	edx, DWORD PTR _L$25[ebp]
	push	edx
	lea	eax, DWORD PTR _S$16[ebp]
	push	eax
	lea	ecx, DWORD PTR _H$17[ebp]
	push	ecx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _BNormal$29[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _GNormal$28[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _RNormal$27[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoHSL@36

; 53   :                     FinalR = (BYTE)(H * 255.0);

	movsd	xmm0, QWORD PTR _H$17[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si edx, xmm0
	mov	BYTE PTR _FinalR$40[ebp], dl

; 54   :                     FinalG = (BYTE)(S * 255.0);

	movsd	xmm0, QWORD PTR _S$16[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si eax, xmm0
	mov	BYTE PTR _FinalG$39[ebp], al

; 55   :                     FinalB = (BYTE)(L * 255.0);

	movsd	xmm0, QWORD PTR _L$25[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si ecx, xmm0
	mov	BYTE PTR _FinalB$38[ebp], cl

; 56   :                 }
; 57   :                 break;

	jmp	$LN8@ConvertCol
$LN13@ConvertCol:

; 58   : 
; 59   :                 case ToHSV:
; 60   :                 {
; 61   :                     double H, S, V = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _V$24[ebp], xmm0

; 62   :                     RGBtoHSL(RNormal, GNormal, BNormal, &H, &S, &V);

	lea	edx, DWORD PTR _V$24[ebp]
	push	edx
	lea	eax, DWORD PTR _S$14[ebp]
	push	eax
	lea	ecx, DWORD PTR _H$15[ebp]
	push	ecx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _BNormal$29[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _GNormal$28[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _RNormal$27[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoHSL@36

; 63   :                     FinalR = (BYTE)(H * 255.0);

	movsd	xmm0, QWORD PTR _H$15[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si edx, xmm0
	mov	BYTE PTR _FinalR$40[ebp], dl

; 64   :                     FinalG = (BYTE)(S * 255.0);

	movsd	xmm0, QWORD PTR _S$14[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si eax, xmm0
	mov	BYTE PTR _FinalG$39[ebp], al

; 65   :                     FinalB = (BYTE)(V * 255.0);

	movsd	xmm0, QWORD PTR _V$24[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si ecx, xmm0
	mov	BYTE PTR _FinalB$38[ebp], cl

; 66   :                 }
; 67   :                 break;

	jmp	$LN8@ConvertCol
$LN14@ConvertCol:

; 68   : 
; 69   :                 case ToLAB:
; 70   :                 {
; 71   :                     double L, Al, Bl = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _Bl$23[ebp], xmm0

; 72   :                     RGBtoCIELAB(RNormal, GNormal, BNormal, &L, &Al, &Bl);

	lea	edx, DWORD PTR _Bl$23[ebp]
	push	edx
	lea	eax, DWORD PTR _Al$12[ebp]
	push	eax
	lea	ecx, DWORD PTR _L$13[ebp]
	push	ecx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _BNormal$29[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _GNormal$28[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _RNormal$27[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoCIELAB@36

; 73   :                     FinalR = (BYTE)(L * 255.0);

	movsd	xmm0, QWORD PTR _L$13[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si edx, xmm0
	mov	BYTE PTR _FinalR$40[ebp], dl

; 74   :                     FinalG = (BYTE)(Al * 255.0);

	movsd	xmm0, QWORD PTR _Al$12[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si eax, xmm0
	mov	BYTE PTR _FinalG$39[ebp], al

; 75   :                     FinalB = (BYTE)(Bl * 255.0);

	movsd	xmm0, QWORD PTR _Bl$23[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si ecx, xmm0
	mov	BYTE PTR _FinalB$38[ebp], cl

; 76   :                 }
; 77   :                 break;

	jmp	$LN8@ConvertCol
$LN15@ConvertCol:

; 78   : 
; 79   :                 case ToXYZ:
; 80   :                 {
; 81   :                     double X, Y, Z = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _Z$22[ebp], xmm0

; 82   :                     RGBtoXYZ(RNormal, GNormal, BNormal, &X, &Y, &Z);

	lea	edx, DWORD PTR _Z$22[ebp]
	push	edx
	lea	eax, DWORD PTR _Y$10[ebp]
	push	eax
	lea	ecx, DWORD PTR _X$11[ebp]
	push	ecx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _BNormal$29[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _GNormal$28[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _RNormal$27[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoXYZ@36

; 83   :                     FinalR = (BYTE)(X * 255.0);

	movsd	xmm0, QWORD PTR _X$11[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si edx, xmm0
	mov	BYTE PTR _FinalR$40[ebp], dl

; 84   :                     FinalG = (BYTE)(Y * 255.0);

	movsd	xmm0, QWORD PTR _Y$10[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si eax, xmm0
	mov	BYTE PTR _FinalG$39[ebp], al

; 85   :                     FinalB = (BYTE)(Z * 255.0);

	movsd	xmm0, QWORD PTR _Z$22[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si ecx, xmm0
	mov	BYTE PTR _FinalB$38[ebp], cl

; 86   :                 }
; 87   :                 break;

	jmp	$LN8@ConvertCol
$LN16@ConvertCol:

; 88   : 
; 89   :                 case ToCMY:
; 90   :                 {
; 91   :                     double C, M, Y = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _Y$21[ebp], xmm0

; 92   :                     RGBtoCMY(RNormal, GNormal, BNormal, &C, &M, &Y);

	lea	edx, DWORD PTR _Y$21[ebp]
	push	edx
	lea	eax, DWORD PTR _M$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _C$9[ebp]
	push	ecx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _BNormal$29[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _GNormal$28[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _RNormal$27[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoCMY@36

; 93   :                     FinalR = (BYTE)(C * 255.0);

	movsd	xmm0, QWORD PTR _C$9[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si edx, xmm0
	mov	BYTE PTR _FinalR$40[ebp], dl

; 94   :                     FinalG = (BYTE)(M * 255.0);

	movsd	xmm0, QWORD PTR _M$8[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si eax, xmm0
	mov	BYTE PTR _FinalG$39[ebp], al

; 95   :                     FinalB = (BYTE)(Y * 255.0);

	movsd	xmm0, QWORD PTR _Y$21[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si ecx, xmm0
	mov	BYTE PTR _FinalB$38[ebp], cl

; 96   :                 }
; 97   :                 break;

	jmp	$LN8@ConvertCol
$LN17@ConvertCol:

; 98   : 
; 99   :                 case ToCMYK:
; 100  :                     break;

	jmp	$LN8@ConvertCol
$LN18@ConvertCol:

; 101  : 
; 102  :                 case ToYCbCr:
; 103  :                 {
; 104  :                     double Y, Cb, Cr = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _Cr$20[ebp], xmm0

; 105  :                     RGBtoYCbCr(RNormal, GNormal, BNormal, &Y, &Cb, &Cr);

	lea	edx, DWORD PTR _Cr$20[ebp]
	push	edx
	lea	eax, DWORD PTR _Cb$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _Y$7[ebp]
	push	ecx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _BNormal$29[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _GNormal$28[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _RNormal$27[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoYCbCr@36

; 106  :                     FinalR = (BYTE)(Y * 255.0);

	movsd	xmm0, QWORD PTR _Y$7[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si edx, xmm0
	mov	BYTE PTR _FinalR$40[ebp], dl

; 107  :                     FinalG = (BYTE)(Cb * 255.0);

	movsd	xmm0, QWORD PTR _Cb$6[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si eax, xmm0
	mov	BYTE PTR _FinalG$39[ebp], al

; 108  :                     FinalB = (BYTE)(Cr * 255.0);

	movsd	xmm0, QWORD PTR _Cr$20[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si ecx, xmm0
	mov	BYTE PTR _FinalB$38[ebp], cl

; 109  :                 }
; 110  :                 break;

	jmp	$LN8@ConvertCol
$LN19@ConvertCol:

; 111  : 
; 112  :                 case ToYUV:
; 113  :                 {
; 114  :                     double Y, U, V = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _V$19[ebp], xmm0

; 115  :                     RGBtoYUV(RNormal, GNormal, BNormal, &Y, &U, &V);

	lea	edx, DWORD PTR _V$19[ebp]
	push	edx
	lea	eax, DWORD PTR _U$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _Y$5[ebp]
	push	ecx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _BNormal$29[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _GNormal$28[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _RNormal$27[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoYUV@36

; 116  :                     FinalR = (BYTE)(Y * 255.0);

	movsd	xmm0, QWORD PTR _Y$5[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si edx, xmm0
	mov	BYTE PTR _FinalR$40[ebp], dl

; 117  :                     FinalG = (BYTE)(U * 255.0);

	movsd	xmm0, QWORD PTR _U$4[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si eax, xmm0
	mov	BYTE PTR _FinalG$39[ebp], al

; 118  :                     FinalB = (BYTE)(V * 255.0);

	movsd	xmm0, QWORD PTR _V$19[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si ecx, xmm0
	mov	BYTE PTR _FinalB$38[ebp], cl

; 119  :                 }
; 120  :                 break;

	jmp	$LN8@ConvertCol
$LN20@ConvertCol:

; 121  : 
; 122  :                 case ToYIQ:
; 123  :                 {
; 124  :                     double Y, I, Q = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _Q$18[ebp], xmm0

; 125  :                     RGBtoYIQ(RNormal, GNormal, BNormal, &Y, &I, &Q);

	lea	edx, DWORD PTR _Q$18[ebp]
	push	edx
	lea	eax, DWORD PTR _I$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _Y$3[ebp]
	push	ecx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _BNormal$29[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _GNormal$28[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _RNormal$27[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoYIQ@36

; 126  :                     FinalR = (BYTE)(Y * 255.0);

	movsd	xmm0, QWORD PTR _Y$3[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si edx, xmm0
	mov	BYTE PTR _FinalR$40[ebp], dl

; 127  :                     FinalG = (BYTE)(I * 255.0);

	movsd	xmm0, QWORD PTR _I$2[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si eax, xmm0
	mov	BYTE PTR _FinalG$39[ebp], al

; 128  :                     FinalB = (BYTE)(Q * 255.0);

	movsd	xmm0, QWORD PTR _Q$18[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si ecx, xmm0
	mov	BYTE PTR _FinalB$38[ebp], cl

; 129  :                 }
; 130  :                 break;

	jmp	SHORT $LN8@ConvertCol
$LN21@ConvertCol:

; 131  : 
; 132  :                 default:
; 133  :                     return InvalidOperation;

	mov	eax, 11					; 0000000bH
	jmp	SHORT $LN1@ConvertCol
$LN8@ConvertCol:

; 134  :             }
; 135  : 
; 136  :             Dest[Index + 3] = FinalA;

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _Index$36[ebp]
	mov	al, BYTE PTR _FinalA$32[ebp]
	mov	BYTE PTR [edx+3], al

; 137  :             Dest[Index + 2] = FinalR;

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index$36[ebp]
	mov	dl, BYTE PTR _FinalR$40[ebp]
	mov	BYTE PTR [ecx+2], dl

; 138  :             Dest[Index + 1] = FinalG;

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index$36[ebp]
	mov	cl, BYTE PTR _FinalG$39[ebp]
	mov	BYTE PTR [eax+1], cl

; 139  :             Dest[Index + 0] = FinalB;

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _Index$36[ebp]
	mov	al, BYTE PTR _FinalB$38[ebp]
	mov	BYTE PTR [edx], al

; 140  :         }

	jmp	$LN5@ConvertCol
$LN6@ConvertCol:

; 141  :     }

	jmp	$LN2@ConvertCol
$LN3@ConvertCol:

; 142  :     return Success;

	xor	eax, eax
$LN1@ConvertCol:

; 143  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
$LN23@ConvertCol:
	DD	$LN12@ConvertCol
	DD	$LN13@ConvertCol
	DD	$LN21@ConvertCol
	DD	$LN14@ConvertCol
	DD	$LN15@ConvertCol
	DD	$LN16@ConvertCol
	DD	$LN17@ConvertCol
	DD	$LN18@ConvertCol
	DD	$LN19@ConvertCol
	DD	$LN20@ConvertCol
_ConvertColorSpace@24 ENDP
_TEXT	ENDS
END
