; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Users\Stuart\Desktop\Projects4\ColorBlend\ColorBlender\Convolution.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_MasterConvolveWithKernel@88
PUBLIC	_ConvolveWithKernel3@72
PUBLIC	_ConvolveWithKernel2@52
PUBLIC	__real@0000000000000000
PUBLIC	__real@406fe00000000000
EXTRN	_ColorLuminance@12:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\convolution.cpp
_TEXT	SEGMENT
_Source$ = 8						; size = 4
_Width$ = 12						; size = 4
_Height$ = 16						; size = 4
_Stride$ = 20						; size = 4
_Destination$ = 24					; size = 4
_PackedBGPixel$ = 28					; size = 4
_KernelMatrix$ = 32					; size = 4
_KernelX$ = 36						; size = 4
_KernelY$ = 40						; size = 4
_Bias$ = 44						; size = 8
_Factor$ = 52						; size = 8
_ConvolveWithKernel2@52 PROC

; 199  : {

	push	ebp
	mov	ebp, esp

; 200  :     return MasterConvolveWithKernel(Source, Width, Height, Stride, Destination, PackedBGPixel, KernelMatrix, KernelX, KernelY, Bias, Factor,

	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	push	0
	push	0
	push	0
	push	1
	push	1
	push	1
	push	0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Factor$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Bias$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _KernelY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _KernelX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _KernelMatrix$[ebp]
	push	edx
	mov	eax, DWORD PTR _PackedBGPixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Destination$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Stride$[ebp]
	push	edx
	mov	eax, DWORD PTR _Height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Source$[ebp]
	push	edx
	call	_MasterConvolveWithKernel@88

; 201  :         FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, 0.0);
; 202  : }

	pop	ebp
	ret	52					; 00000034H
_ConvolveWithKernel2@52 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\convolution.cpp
_TEXT	SEGMENT
_Source$ = 8						; size = 4
_Width$ = 12						; size = 4
_Height$ = 16						; size = 4
_Stride$ = 20						; size = 4
_Destination$ = 24					; size = 4
_PackedBGPixel$ = 28					; size = 4
_KernelMatrix$ = 32					; size = 4
_KernelX$ = 36						; size = 4
_KernelY$ = 40						; size = 4
_Bias$ = 44						; size = 8
_Factor$ = 52						; size = 8
_SkipTransparentPixels$ = 60				; size = 4
_IncludeTransparentPixels$ = 64				; size = 4
_UseLuminance$ = 68					; size = 4
_Luminance$ = 72					; size = 8
_ConvolveWithKernel3@72 PROC

; 177  : {

	push	ebp
	mov	ebp, esp

; 178  :     return MasterConvolveWithKernel(Source, Width, Height, Stride, Destination, PackedBGPixel, KernelMatrix, KernelX, KernelY, Bias, Factor,

	sub	esp, 8
	movsd	xmm0, QWORD PTR _Luminance$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _UseLuminance$[ebp]
	push	eax
	mov	ecx, DWORD PTR _IncludeTransparentPixels$[ebp]
	push	ecx
	mov	edx, DWORD PTR _SkipTransparentPixels$[ebp]
	push	edx
	push	1
	push	1
	push	1
	push	0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Factor$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Bias$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _KernelY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _KernelX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _KernelMatrix$[ebp]
	push	edx
	mov	eax, DWORD PTR _PackedBGPixel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Destination$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Stride$[ebp]
	push	edx
	mov	eax, DWORD PTR _Height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Source$[ebp]
	push	edx
	call	_MasterConvolveWithKernel@88

; 179  :         FALSE, TRUE, TRUE, TRUE, SkipTransparentPixels, IncludeTransparentPixels, UseLuminance, Luminance);
; 180  : }

	pop	ebp
	ret	72					; 00000048H
_ConvolveWithKernel3@72 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\convolution.cpp
_TEXT	SEGMENT
_PixelLuminance$1 = -212				; size = 8
tv282 = -204						; size = 8
tv281 = -196						; size = 8
tv278 = -188						; size = 8
tv274 = -180						; size = 8
tv273 = -172						; size = 8
tv270 = -164						; size = 8
tv266 = -156						; size = 8
tv265 = -148						; size = 8
tv262 = -140						; size = 8
tv258 = -132						; size = 8
tv257 = -124						; size = 8
tv254 = -116						; size = 8
_KYOffset$2 = -108					; size = 4
_RowOffset$3 = -104					; size = 4
_PixelSize$ = -100					; size = 4
_HeightHalfSpan$ = -96					; size = 4
_WidthHalfSpan$ = -92					; size = 4
_KHEnd$4 = -88						; size = 4
_KHStart$5 = -84					; size = 4
_KVEnd$6 = -80						; size = 4
_KVStart$7 = -76					; size = 4
_Kernel$ = -72						; size = 4
_KX$8 = -68						; size = 4
_KY$9 = -64						; size = 4
_BAcc$10 = -60						; size = 8
_GAcc$11 = -52						; size = 8
_RAcc$12 = -44						; size = 8
_AAcc$13 = -36						; size = 8
_KIndex$14 = -28					; size = 4
_Kdx$15 = -24						; size = 4
_Row$16 = -20						; size = 4
_Column$17 = -16					; size = 4
_Dest$ = -12						; size = 4
_Src$ = -8						; size = 4
_Index$18 = -4						; size = 4
_Source$ = 8						; size = 4
_Width$ = 12						; size = 4
_Height$ = 16						; size = 4
_Stride$ = 20						; size = 4
_Destination$ = 24					; size = 4
_PackedBGPixel$ = 28					; size = 4
_KernelMatrix$ = 32					; size = 4
_KernelX$ = 36						; size = 4
_KernelY$ = 40						; size = 4
_Bias$ = 44						; size = 8
_Factor$ = 52						; size = 8
_UseAlpha$ = 60						; size = 4
_UseRed$ = 64						; size = 4
_UseGreen$ = 68						; size = 4
_UseBlue$ = 72						; size = 4
_SkipTransparentPixels$ = 76				; size = 4
_IncludeTransparentPixels$ = 80				; size = 4
_UseLuminance$ = 84					; size = 4
_LuminanceThreshold$ = 88				; size = 8
_MasterConvolveWithKernel@88 PROC

; 44   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H

; 45   :     if (Source == NULL)

	cmp	DWORD PTR _Source$[ebp], 0
	jne	SHORT $LN14@MasterConv

; 46   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@MasterConv
$LN14@MasterConv:

; 47   :     if (Destination == NULL)

	cmp	DWORD PTR _Destination$[ebp], 0
	jne	SHORT $LN15@MasterConv

; 48   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@MasterConv
$LN15@MasterConv:

; 49   :     if (KernelMatrix == NULL)

	cmp	DWORD PTR _KernelMatrix$[ebp], 0
	jne	SHORT $LN16@MasterConv

; 50   :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@MasterConv
$LN16@MasterConv:

; 51   :     if (KernelX < 1)

	cmp	DWORD PTR _KernelX$[ebp], 1
	jge	SHORT $LN17@MasterConv

; 52   :         return InvalidOperation;

	mov	eax, 11					; 0000000bH
	jmp	$LN1@MasterConv
$LN17@MasterConv:

; 53   :     if (KernelY < 1)

	cmp	DWORD PTR _KernelY$[ebp], 1
	jge	SHORT $LN18@MasterConv

; 54   :         return InvalidOperation;

	mov	eax, 11					; 0000000bH
	jmp	$LN1@MasterConv
$LN18@MasterConv:

; 55   :     if ((KernelX & 0x1) == 0)

	mov	eax, DWORD PTR _KernelX$[ebp]
	and	eax, 1
	jne	SHORT $LN19@MasterConv

; 56   :         return InvalidOperation;

	mov	eax, 11					; 0000000bH
	jmp	$LN1@MasterConv
$LN19@MasterConv:

; 57   :     if ((KernelY & 0x1) == 0)

	mov	ecx, DWORD PTR _KernelY$[ebp]
	and	ecx, 1
	jne	SHORT $LN20@MasterConv

; 58   :         return InvalidOperation;

	mov	eax, 11					; 0000000bH
	jmp	$LN1@MasterConv
$LN20@MasterConv:

; 59   : 
; 60   :     BYTE *Src = (BYTE *)Source;

	mov	edx, DWORD PTR _Source$[ebp]
	mov	DWORD PTR _Src$[ebp], edx

; 61   :     BYTE *Dest = (BYTE *)Destination;

	mov	eax, DWORD PTR _Destination$[ebp]
	mov	DWORD PTR _Dest$[ebp], eax

; 62   :     double *Kernel = (double *)KernelMatrix;

	mov	ecx, DWORD PTR _KernelMatrix$[ebp]
	mov	DWORD PTR _Kernel$[ebp], ecx

; 63   :     int PixelSize = 4;

	mov	DWORD PTR _PixelSize$[ebp], 4

; 64   :     int WidthHalfSpan = KernelX / 2;

	mov	eax, DWORD PTR _KernelX$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _WidthHalfSpan$[ebp], eax

; 65   :     int HeightHalfSpan = KernelY / 2;

	mov	eax, DWORD PTR _KernelY$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _HeightHalfSpan$[ebp], eax

; 66   : 
; 67   :     for (int Row = 0; Row < Height; Row++)

	mov	DWORD PTR _Row$16[ebp], 0
	jmp	SHORT $LN4@MasterConv
$LN2@MasterConv:
	mov	edx, DWORD PTR _Row$16[ebp]
	add	edx, 1
	mov	DWORD PTR _Row$16[ebp], edx
$LN4@MasterConv:
	mov	eax, DWORD PTR _Row$16[ebp]
	cmp	eax, DWORD PTR _Height$[ebp]
	jge	$LN3@MasterConv

; 68   :     {
; 69   :         int RowOffset = Row * Stride;

	mov	ecx, DWORD PTR _Row$16[ebp]
	imul	ecx, DWORD PTR _Stride$[ebp]
	mov	DWORD PTR _RowOffset$3[ebp], ecx

; 70   :         for (int Column = 0; Column < Width; Column++)

	mov	DWORD PTR _Column$17[ebp], 0
	jmp	SHORT $LN7@MasterConv
$LN5@MasterConv:
	mov	edx, DWORD PTR _Column$17[ebp]
	add	edx, 1
	mov	DWORD PTR _Column$17[ebp], edx
$LN7@MasterConv:
	mov	eax, DWORD PTR _Column$17[ebp]
	cmp	eax, DWORD PTR _Width$[ebp]
	jge	$LN6@MasterConv

; 71   :         {
; 72   :             int Index = (Column * PixelSize) + RowOffset;

	mov	ecx, DWORD PTR _Column$17[ebp]
	imul	ecx, DWORD PTR _PixelSize$[ebp]
	add	ecx, DWORD PTR _RowOffset$3[ebp]
	mov	DWORD PTR _Index$18[ebp], ecx

; 73   :             if (UseLuminance)

	cmp	DWORD PTR _UseLuminance$[ebp], 0
	je	SHORT $LN22@MasterConv

; 74   :             {
; 75   :                 double PixelLuminance = ColorLuminance(Src[Index + 2], Src[Index + 1], Src[Index + 0]);

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index$18[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index$18[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	push	edx
	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index$18[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	push	ecx
	call	_ColorLuminance@12
	fstp	QWORD PTR _PixelLuminance$1[ebp]

; 76   :                 if (PixelLuminance > LuminanceThreshold)

	movsd	xmm0, QWORD PTR _PixelLuminance$1[ebp]
	comisd	xmm0, QWORD PTR _LuminanceThreshold$[ebp]
	jbe	SHORT $LN22@MasterConv

; 77   :                     continue;

	jmp	SHORT $LN5@MasterConv
$LN22@MasterConv:

; 78   :             }
; 79   :             if (SkipTransparentPixels)

	cmp	DWORD PTR _SkipTransparentPixels$[ebp], 0
	je	SHORT $LN24@MasterConv

; 80   :             {
; 81   :                 if (Src[Index + 3] == 0x0)

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index$18[ebp]
	movzx	eax, BYTE PTR [edx+3]
	test	eax, eax
	jne	SHORT $LN24@MasterConv

; 82   :                 {
; 83   :                     Dest[Index + 3] = Src[Index + 3];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index$18[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index$18[ebp]
	mov	al, BYTE PTR [edx+3]
	mov	BYTE PTR [ecx+3], al

; 84   :                     Dest[Index + 2] = Src[Index + 2];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index$18[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index$18[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al

; 85   :                     Dest[Index + 1] = Src[Index + 1];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index$18[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index$18[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR [ecx+1], al

; 86   :                     Dest[Index + 0] = Src[Index + 0];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index$18[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index$18[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al

; 87   :                     continue;

	jmp	$LN5@MasterConv
$LN24@MasterConv:

; 88   :                 }
; 89   :             }
; 90   : 
; 91   :             int KHStart = Column - WidthHalfSpan;

	mov	ecx, DWORD PTR _Column$17[ebp]
	sub	ecx, DWORD PTR _WidthHalfSpan$[ebp]
	mov	DWORD PTR _KHStart$5[ebp], ecx

; 92   :             if (KHStart < 0)

	jns	SHORT $LN25@MasterConv

; 93   :                 KHStart = 0;

	mov	DWORD PTR _KHStart$5[ebp], 0
$LN25@MasterConv:

; 94   :             int KHEnd = Column + WidthHalfSpan;

	mov	edx, DWORD PTR _Column$17[ebp]
	add	edx, DWORD PTR _WidthHalfSpan$[ebp]
	mov	DWORD PTR _KHEnd$4[ebp], edx

; 95   :             if (KHEnd >= Width)

	mov	eax, DWORD PTR _KHEnd$4[ebp]
	cmp	eax, DWORD PTR _Width$[ebp]
	jl	SHORT $LN26@MasterConv

; 96   :                 KHEnd = Width - 1;

	mov	ecx, DWORD PTR _Width$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _KHEnd$4[ebp], ecx
$LN26@MasterConv:

; 97   : 
; 98   :             int KVStart = Row - HeightHalfSpan;

	mov	edx, DWORD PTR _Row$16[ebp]
	sub	edx, DWORD PTR _HeightHalfSpan$[ebp]
	mov	DWORD PTR _KVStart$7[ebp], edx

; 99   :             if (KVStart < 0)

	jns	SHORT $LN27@MasterConv

; 100  :                 KVStart = 0;

	mov	DWORD PTR _KVStart$7[ebp], 0
$LN27@MasterConv:

; 101  :             int KVEnd = Row + HeightHalfSpan;

	mov	eax, DWORD PTR _Row$16[ebp]
	add	eax, DWORD PTR _HeightHalfSpan$[ebp]
	mov	DWORD PTR _KVEnd$6[ebp], eax

; 102  :             if (KVEnd >= Height)

	mov	ecx, DWORD PTR _KVEnd$6[ebp]
	cmp	ecx, DWORD PTR _Height$[ebp]
	jl	SHORT $LN28@MasterConv

; 103  :                 KVEnd = Height - 1;

	mov	edx, DWORD PTR _Height$[ebp]
	sub	edx, 1
	mov	DWORD PTR _KVEnd$6[ebp], edx
$LN28@MasterConv:

; 104  : 
; 105  :             double AAcc = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _AAcc$13[ebp], xmm0

; 106  :             double RAcc = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _RAcc$12[ebp], xmm0

; 107  :             double GAcc = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _GAcc$11[ebp], xmm0

; 108  :             double BAcc = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _BAcc$10[ebp], xmm0

; 109  : 
; 110  :             int Kdx = 0;

	mov	DWORD PTR _Kdx$15[ebp], 0

; 111  :             for (int KY = KVStart; KY <= KVEnd; KY++)

	mov	eax, DWORD PTR _KVStart$7[ebp]
	mov	DWORD PTR _KY$9[ebp], eax
	jmp	SHORT $LN10@MasterConv
$LN8@MasterConv:
	mov	ecx, DWORD PTR _KY$9[ebp]
	add	ecx, 1
	mov	DWORD PTR _KY$9[ebp], ecx
$LN10@MasterConv:
	mov	edx, DWORD PTR _KY$9[ebp]
	cmp	edx, DWORD PTR _KVEnd$6[ebp]
	jg	$LN9@MasterConv

; 112  :             {
; 113  :                 int KYOffset = KY * Stride;

	mov	eax, DWORD PTR _KY$9[ebp]
	imul	eax, DWORD PTR _Stride$[ebp]
	mov	DWORD PTR _KYOffset$2[ebp], eax

; 114  :                 for (int KX = KHStart; KX <= KHEnd; KX++)

	mov	ecx, DWORD PTR _KHStart$5[ebp]
	mov	DWORD PTR _KX$8[ebp], ecx
	jmp	SHORT $LN13@MasterConv
$LN11@MasterConv:
	mov	edx, DWORD PTR _KX$8[ebp]
	add	edx, 1
	mov	DWORD PTR _KX$8[ebp], edx
$LN13@MasterConv:
	mov	eax, DWORD PTR _KX$8[ebp]
	cmp	eax, DWORD PTR _KHEnd$4[ebp]
	jg	$LN12@MasterConv

; 115  :                 {
; 116  :                     int KIndex = (KX * PixelSize) + KYOffset;

	mov	ecx, DWORD PTR _KX$8[ebp]
	imul	ecx, DWORD PTR _PixelSize$[ebp]
	add	ecx, DWORD PTR _KYOffset$2[ebp]
	mov	DWORD PTR _KIndex$14[ebp], ecx

; 117  :                     if (!IncludeTransparentPixels)

	cmp	DWORD PTR _IncludeTransparentPixels$[ebp], 0
	jne	SHORT $LN30@MasterConv

; 118  :                         if (Src[KIndex + 3] == 0)

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$14[ebp]
	movzx	eax, BYTE PTR [edx+3]
	test	eax, eax
	jne	SHORT $LN30@MasterConv

; 119  :                             continue;

	jmp	SHORT $LN11@MasterConv
$LN30@MasterConv:

; 120  :                     AAcc += (double)Src[KIndex + 3] * Kernel[Kdx];

	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _KIndex$14[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	cvtsi2sd xmm0, edx
	mov	eax, DWORD PTR _Kdx$15[ebp]
	mov	ecx, DWORD PTR _Kernel$[ebp]
	mulsd	xmm0, QWORD PTR [ecx+eax*8]
	addsd	xmm0, QWORD PTR _AAcc$13[ebp]
	movsd	QWORD PTR _AAcc$13[ebp], xmm0

; 121  :                     RAcc += (double)Src[KIndex + 2] * Kernel[Kdx];

	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _KIndex$14[ebp]
	movzx	eax, BYTE PTR [edx+2]
	cvtsi2sd xmm0, eax
	mov	ecx, DWORD PTR _Kdx$15[ebp]
	mov	edx, DWORD PTR _Kernel$[ebp]
	mulsd	xmm0, QWORD PTR [edx+ecx*8]
	addsd	xmm0, QWORD PTR _RAcc$12[ebp]
	movsd	QWORD PTR _RAcc$12[ebp], xmm0

; 122  :                     GAcc += (double)Src[KIndex + 1] * Kernel[Kdx];

	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _KIndex$14[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cvtsi2sd xmm0, ecx
	mov	edx, DWORD PTR _Kdx$15[ebp]
	mov	eax, DWORD PTR _Kernel$[ebp]
	mulsd	xmm0, QWORD PTR [eax+edx*8]
	addsd	xmm0, QWORD PTR _GAcc$11[ebp]
	movsd	QWORD PTR _GAcc$11[ebp], xmm0

; 123  :                     BAcc += (double)Src[KIndex + 0] * Kernel[Kdx];

	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _KIndex$14[ebp]
	movzx	edx, BYTE PTR [ecx]
	cvtsi2sd xmm0, edx
	mov	eax, DWORD PTR _Kdx$15[ebp]
	mov	ecx, DWORD PTR _Kernel$[ebp]
	mulsd	xmm0, QWORD PTR [ecx+eax*8]
	addsd	xmm0, QWORD PTR _BAcc$10[ebp]
	movsd	QWORD PTR _BAcc$10[ebp], xmm0

; 124  :                     Kdx++;

	mov	edx, DWORD PTR _Kdx$15[ebp]
	add	edx, 1
	mov	DWORD PTR _Kdx$15[ebp], edx

; 125  :                 }

	jmp	$LN11@MasterConv
$LN12@MasterConv:

; 126  :             }

	jmp	$LN8@MasterConv
$LN9@MasterConv:

; 127  :             AAcc = AAcc * Factor + Bias;

	movsd	xmm0, QWORD PTR _AAcc$13[ebp]
	mulsd	xmm0, QWORD PTR _Factor$[ebp]
	addsd	xmm0, QWORD PTR _Bias$[ebp]
	movsd	QWORD PTR _AAcc$13[ebp], xmm0

; 128  :             AAcc = min(max(AAcc, 0), 255);

	movsd	xmm0, QWORD PTR _AAcc$13[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN40@MasterConv
	movsd	xmm0, QWORD PTR _AAcc$13[ebp]
	movsd	QWORD PTR tv254[ebp], xmm0
	jmp	SHORT $LN41@MasterConv
$LN40@MasterConv:
	xorps	xmm0, xmm0
	movsd	QWORD PTR tv254[ebp], xmm0
$LN41@MasterConv:
	movsd	xmm0, QWORD PTR __real@406fe00000000000
	comisd	xmm0, QWORD PTR tv254[ebp]
	jbe	SHORT $LN44@MasterConv
	movsd	xmm0, QWORD PTR _AAcc$13[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN42@MasterConv
	movsd	xmm0, QWORD PTR _AAcc$13[ebp]
	movsd	QWORD PTR tv257[ebp], xmm0
	jmp	SHORT $LN43@MasterConv
$LN42@MasterConv:
	xorps	xmm0, xmm0
	movsd	QWORD PTR tv257[ebp], xmm0
$LN43@MasterConv:
	movsd	xmm0, QWORD PTR tv257[ebp]
	movsd	QWORD PTR tv258[ebp], xmm0
	jmp	SHORT $LN45@MasterConv
$LN44@MasterConv:
	movsd	xmm0, QWORD PTR __real@406fe00000000000
	movsd	QWORD PTR tv258[ebp], xmm0
$LN45@MasterConv:
	movsd	xmm0, QWORD PTR tv258[ebp]
	movsd	QWORD PTR _AAcc$13[ebp], xmm0

; 129  :             RAcc = RAcc * Factor + Bias;

	movsd	xmm0, QWORD PTR _RAcc$12[ebp]
	mulsd	xmm0, QWORD PTR _Factor$[ebp]
	addsd	xmm0, QWORD PTR _Bias$[ebp]
	movsd	QWORD PTR _RAcc$12[ebp], xmm0

; 130  :             RAcc = min(max(RAcc, 0), 255);

	movsd	xmm0, QWORD PTR _RAcc$12[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN46@MasterConv
	movsd	xmm0, QWORD PTR _RAcc$12[ebp]
	movsd	QWORD PTR tv262[ebp], xmm0
	jmp	SHORT $LN47@MasterConv
$LN46@MasterConv:
	xorps	xmm0, xmm0
	movsd	QWORD PTR tv262[ebp], xmm0
$LN47@MasterConv:
	movsd	xmm0, QWORD PTR __real@406fe00000000000
	comisd	xmm0, QWORD PTR tv262[ebp]
	jbe	SHORT $LN50@MasterConv
	movsd	xmm0, QWORD PTR _RAcc$12[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN48@MasterConv
	movsd	xmm0, QWORD PTR _RAcc$12[ebp]
	movsd	QWORD PTR tv265[ebp], xmm0
	jmp	SHORT $LN49@MasterConv
$LN48@MasterConv:
	xorps	xmm0, xmm0
	movsd	QWORD PTR tv265[ebp], xmm0
$LN49@MasterConv:
	movsd	xmm0, QWORD PTR tv265[ebp]
	movsd	QWORD PTR tv266[ebp], xmm0
	jmp	SHORT $LN51@MasterConv
$LN50@MasterConv:
	movsd	xmm0, QWORD PTR __real@406fe00000000000
	movsd	QWORD PTR tv266[ebp], xmm0
$LN51@MasterConv:
	movsd	xmm0, QWORD PTR tv266[ebp]
	movsd	QWORD PTR _RAcc$12[ebp], xmm0

; 131  :             GAcc = GAcc * Factor + Bias;

	movsd	xmm0, QWORD PTR _GAcc$11[ebp]
	mulsd	xmm0, QWORD PTR _Factor$[ebp]
	addsd	xmm0, QWORD PTR _Bias$[ebp]
	movsd	QWORD PTR _GAcc$11[ebp], xmm0

; 132  :             GAcc = min(max(GAcc, 0), 255);

	movsd	xmm0, QWORD PTR _GAcc$11[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN52@MasterConv
	movsd	xmm0, QWORD PTR _GAcc$11[ebp]
	movsd	QWORD PTR tv270[ebp], xmm0
	jmp	SHORT $LN53@MasterConv
$LN52@MasterConv:
	xorps	xmm0, xmm0
	movsd	QWORD PTR tv270[ebp], xmm0
$LN53@MasterConv:
	movsd	xmm0, QWORD PTR __real@406fe00000000000
	comisd	xmm0, QWORD PTR tv270[ebp]
	jbe	SHORT $LN56@MasterConv
	movsd	xmm0, QWORD PTR _GAcc$11[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN54@MasterConv
	movsd	xmm0, QWORD PTR _GAcc$11[ebp]
	movsd	QWORD PTR tv273[ebp], xmm0
	jmp	SHORT $LN55@MasterConv
$LN54@MasterConv:
	xorps	xmm0, xmm0
	movsd	QWORD PTR tv273[ebp], xmm0
$LN55@MasterConv:
	movsd	xmm0, QWORD PTR tv273[ebp]
	movsd	QWORD PTR tv274[ebp], xmm0
	jmp	SHORT $LN57@MasterConv
$LN56@MasterConv:
	movsd	xmm0, QWORD PTR __real@406fe00000000000
	movsd	QWORD PTR tv274[ebp], xmm0
$LN57@MasterConv:
	movsd	xmm0, QWORD PTR tv274[ebp]
	movsd	QWORD PTR _GAcc$11[ebp], xmm0

; 133  :             BAcc = BAcc * Factor + Bias;

	movsd	xmm0, QWORD PTR _BAcc$10[ebp]
	mulsd	xmm0, QWORD PTR _Factor$[ebp]
	addsd	xmm0, QWORD PTR _Bias$[ebp]
	movsd	QWORD PTR _BAcc$10[ebp], xmm0

; 134  :             BAcc = min(max(BAcc, 0), 255);

	movsd	xmm0, QWORD PTR _BAcc$10[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN58@MasterConv
	movsd	xmm0, QWORD PTR _BAcc$10[ebp]
	movsd	QWORD PTR tv278[ebp], xmm0
	jmp	SHORT $LN59@MasterConv
$LN58@MasterConv:
	xorps	xmm0, xmm0
	movsd	QWORD PTR tv278[ebp], xmm0
$LN59@MasterConv:
	movsd	xmm0, QWORD PTR __real@406fe00000000000
	comisd	xmm0, QWORD PTR tv278[ebp]
	jbe	SHORT $LN62@MasterConv
	movsd	xmm0, QWORD PTR _BAcc$10[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN60@MasterConv
	movsd	xmm0, QWORD PTR _BAcc$10[ebp]
	movsd	QWORD PTR tv281[ebp], xmm0
	jmp	SHORT $LN61@MasterConv
$LN60@MasterConv:
	xorps	xmm0, xmm0
	movsd	QWORD PTR tv281[ebp], xmm0
$LN61@MasterConv:
	movsd	xmm0, QWORD PTR tv281[ebp]
	movsd	QWORD PTR tv282[ebp], xmm0
	jmp	SHORT $LN63@MasterConv
$LN62@MasterConv:
	movsd	xmm0, QWORD PTR __real@406fe00000000000
	movsd	QWORD PTR tv282[ebp], xmm0
$LN63@MasterConv:
	movsd	xmm0, QWORD PTR tv282[ebp]
	movsd	QWORD PTR _BAcc$10[ebp], xmm0

; 135  :             if (UseAlpha)

	cmp	DWORD PTR _UseAlpha$[ebp], 0
	je	SHORT $LN31@MasterConv

; 136  :                 Dest[Index + 3] = (BYTE)AAcc;

	cvttsd2si eax, QWORD PTR _AAcc$13[ebp]
	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index$18[ebp]
	mov	BYTE PTR [ecx+3], al

; 137  :             else

	jmp	SHORT $LN32@MasterConv
$LN31@MasterConv:

; 138  :                 Dest[Index + 3] = Src[Index + 3];

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _Index$18[ebp]
	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index$18[ebp]
	mov	cl, BYTE PTR [eax+3]
	mov	BYTE PTR [edx+3], cl
$LN32@MasterConv:

; 139  :             if (UseRed)

	cmp	DWORD PTR _UseRed$[ebp], 0
	je	SHORT $LN33@MasterConv

; 140  :                 Dest[Index + 2] = (BYTE)RAcc;

	cvttsd2si edx, QWORD PTR _RAcc$12[ebp]
	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index$18[ebp]
	mov	BYTE PTR [eax+2], dl

; 141  :             else

	jmp	SHORT $LN34@MasterConv
$LN33@MasterConv:

; 142  :                 Dest[Index + 2] = Src[Index + 2];

	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index$18[ebp]
	mov	edx, DWORD PTR _Src$[ebp]
	add	edx, DWORD PTR _Index$18[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR [ecx+2], al
$LN34@MasterConv:

; 143  :             if (UseGreen)

	cmp	DWORD PTR _UseGreen$[ebp], 0
	je	SHORT $LN35@MasterConv

; 144  :                 Dest[Index + 1] = (BYTE)GAcc;

	cvttsd2si ecx, QWORD PTR _GAcc$11[ebp]
	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _Index$18[ebp]
	mov	BYTE PTR [edx+1], cl

; 145  :             else

	jmp	SHORT $LN36@MasterConv
$LN35@MasterConv:

; 146  :                 Dest[Index + 1] = Src[Index + 1];

	mov	eax, DWORD PTR _Dest$[ebp]
	add	eax, DWORD PTR _Index$18[ebp]
	mov	ecx, DWORD PTR _Src$[ebp]
	add	ecx, DWORD PTR _Index$18[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR [eax+1], dl
$LN36@MasterConv:

; 147  :             if (UseBlue)

	cmp	DWORD PTR _UseBlue$[ebp], 0
	je	SHORT $LN37@MasterConv

; 148  :                 Dest[Index + 0] = (BYTE)BAcc;

	cvttsd2si eax, QWORD PTR _BAcc$10[ebp]
	mov	ecx, DWORD PTR _Dest$[ebp]
	add	ecx, DWORD PTR _Index$18[ebp]
	mov	BYTE PTR [ecx], al

; 149  :             else

	jmp	SHORT $LN38@MasterConv
$LN37@MasterConv:

; 150  :                 Dest[Index + 0] = Src[Index + 0];

	mov	edx, DWORD PTR _Dest$[ebp]
	add	edx, DWORD PTR _Index$18[ebp]
	mov	eax, DWORD PTR _Src$[ebp]
	add	eax, DWORD PTR _Index$18[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
$LN38@MasterConv:

; 151  :         }

	jmp	$LN5@MasterConv
$LN6@MasterConv:

; 152  :     }

	jmp	$LN2@MasterConv
$LN3@MasterConv:

; 153  :     return Success;

	xor	eax, eax
$LN1@MasterConv:

; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	88					; 00000058H
_MasterConvolveWithKernel@88 ENDP
_TEXT	ENDS
END
