; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

	TITLE	C:\Users\Stuart\Desktop\Projects4\ColorBlend\ColorBlender\Colors.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_atanf
PUBLIC	_sqrtf
PUBLIC	?ColorLuminance3@@YGNIH@Z			; ColorLuminance3
PUBLIC	?NormalizedColorLuminance@@YGNEEEH@Z		; NormalizedColorLuminance
PUBLIC	_RYBtoRGB@36
PUBLIC	_RGBtoRYB@36
PUBLIC	_RGBtoYCgCo@36
PUBLIC	_YCgCotoRGB@36
PUBLIC	_YDbDrToRGB@36
PUBLIC	_RGBtoYDbDr@36
PUBLIC	_RGBtoTSL@36
PUBLIC	_TSLtoRGB@36
PUBLIC	_YCbCrtoRGB@36
PUBLIC	_RGBtoYCbCr@36
PUBLIC	_RGBtoHSL@36
PUBLIC	_RGBtoHSL2@24
PUBLIC	_HSLtoRGB@36
PUBLIC	_HSLtoRGB2@36
PUBLIC	_RGBtoHSV@36
PUBLIC	_HSVtoRGB@36
PUBLIC	_RGBtoYIQ@36
PUBLIC	_YIQtoRGB@36
PUBLIC	_RGBtoXYZ@36
PUBLIC	_XYZtoRGB@36
PUBLIC	_RGBtoCMY@36
PUBLIC	_CMYtoRGB@36
PUBLIC	_CMYtoCMYK@40
PUBLIC	_CMYKtoCMY@44
PUBLIC	_RGBtoCMYK@40
PUBLIC	_CMYKtoRGB@44
PUBLIC	_XYZtoCIELab@36
PUBLIC	_CIELABtoXYZ@36
PUBLIC	_RGBtoCIELAB@36
PUBLIC	_CIELABtoRGB@36
PUBLIC	_RGBtoYUV@36
PUBLIC	_YUVtoRGB@36
PUBLIC	_ColorLuminance2@16
PUBLIC	_SetPixelLuminance@20
PUBLIC	_GetPixelLuminance@12
PUBLIC	_GetPixelSaturation@12
PUBLIC	_GetPixelHue@12
PUBLIC	_ChangeHue@16
PUBLIC	_AdjustHue@16
PUBLIC	_ClampHue@16
PUBLIC	_ShiftHue@16
PUBLIC	_RGBtoHue@24
PUBLIC	_RGBtoHue2@12
PUBLIC	?CubicInt@@YGNNNN@Z				; CubicInt
PUBLIC	?XYZtoCIULUV@@YGXNNNPAN00@Z			; XYZtoCIULUV
PUBLIC	?RGBTo@@YGHNNNPAN000E@Z				; RGBTo
PUBLIC	?ColorSpaceConversion@@YGHNNNNPAN000EE@Z	; ColorSpaceConversion
PUBLIC	?ConvertBuffer@@YGHPAXHHHHH@Z			; ConvertBuffer
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f14c331564180ea
PUBLIC	__real@3f183265c4c442df
PUBLIC	__real@3f82231832fcac8e
PUBLIC	__real@3f93cc4ac6cdaf4b
PUBLIC	__real@3fa546d3f9e7b80b
PUBLIC	__real@3fac7de5082cf52c
PUBLIC	__real@3fb279aae6c8f755
PUBLIC	__real@3fb27bb2fec56d5d
PUBLIC	__real@3fb8106240000000
PUBLIC	__real@3fbd2f1a9fbe76c9
PUBLIC	__real@3fbe836eb4e98138
PUBLIC	__real@3fc0876d44c95028
PUBLIC	__real@3fc45f57ce20d722
PUBLIC	__real@3fc4dd2f1a9fbe77
PUBLIC	__real@3fc71819d2391d58
PUBLIC	__real@3fc7ae147ae147ae
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3fc99999a0000000
PUBLIC	__real@3fca1e14bdfd2631
PUBLIC	__real@3fcb22d0e5604189
PUBLIC	__real@3fcb367a0f9096bc
PUBLIC	__real@3fcb38cda6e75ff6
PUBLIC	__real@3fcbc6a7ef9db22d
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd1254339516894
PUBLIC	__real@3fd16a161e4f7660
PUBLIC	__real@3fd199999999999a
PUBLIC	__real@3fd322d0e5604189
PUBLIC	__real@3fd3e76c8b439581
PUBLIC	__real@3fd48b4395810625
PUBLIC	__real@3fd5555555555555
PUBLIC	__real@3fd5810624dd2f1b
PUBLIC	__real@3fd6e297396d0918
PUBLIC	__real@3fd7df3b60000000
PUBLIC	__real@3fda65add9c27e95
PUBLIC	__real@3fdbe76c8b439581
PUBLIC	__real@3fde45a1cac08312
PUBLIC	__real@3fdfe7ff583a53b9
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe0bc6a7ef9db23
PUBLIC	__real@3fe0d446b9a7df89
PUBLIC	__real@3fe2c8b439581062
PUBLIC	__real@3fe3126e978d4fdf
PUBLIC	__real@3fe3333340000000
PUBLIC	__real@3fe3ae147ae147ae
PUBLIC	__real@3fe3df3b645a1cac
PUBLIC	__real@3fe4b780346dc5d6
PUBLIC	__real@3fe51eb860000000
PUBLIC	__real@3fe545f6ef991954
PUBLIC	__real@3fe65604189374bc
PUBLIC	__real@3fe6e297396d0918
PUBLIC	__real@3fe6e2eb1c432ca5
PUBLIC	__real@3fe8000000000000
PUBLIC	__real@3feaa7ef9db22d0e
PUBLIC	__real@3fee68427418d691
PUBLIC	__real@3fee9a027525460b
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff0eabef06b3786
PUBLIC	__real@3ff1b645a1cac083
PUBLIC	__real@3ff1db22d0e56042
PUBLIC	__real@3ff23cbe61cffeb0
PUBLIC	__real@3ff553f7ced91687
PUBLIC	__real@3ff5ef9db22d0e56
PUBLIC	__real@3ff8982a9930be0e
PUBLIC	__real@3ffb460aa64c2f83
PUBLIC	__real@3ffbb645a1cac083
PUBLIC	__real@3ffccccccccccccd
PUBLIC	__real@3ffe04102ff8ec10
PUBLIC	__real@4000000000000000
PUBLIC	__real@400041c2e33eff19
PUBLIC	__real@4008000000000000
PUBLIC	__real@4009ec804102ff8f
PUBLIC	__real@4010000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@4018000000000000
PUBLIC	__real@401921cac083126f
PUBLIC	__real@401f25e353f7ced9
PUBLIC	__real@4022000000000000
PUBLIC	__real@402e000000000000
PUBLIC	__real@4030000000000000
PUBLIC	__real@404e000000000000
PUBLIC	__real@4057c3020c49ba5e
PUBLIC	__real@4059000000000000
PUBLIC	__real@405d000000000000
PUBLIC	__real@405e000000000000
PUBLIC	__real@4060000000000000
PUBLIC	__real@4066800000000000
PUBLIC	__real@4069000000000000
PUBLIC	__real@406e000000000000
PUBLIC	__real@406fe00000000000
PUBLIC	__real@4072c00000000000
PUBLIC	__real@4076800000000000
PUBLIC	__real@407f400000000000
PUBLIC	__real@bfb99a415f45e0b5
PUBLIC	__real@bfc2d527e5215769
PUBLIC	__real@bfd27caea747d806
PUBLIC	__real@bfd941f212d77319
PUBLIC	__real@bfdccccccccccccd
PUBLIC	__real@bfe07acc4ef88b97
PUBLIC	__real@bfe294467381d7dc
PUBLIC	__real@bfef042528ae74f3
PUBLIC	__real@bff0000000000000
PUBLIC	__real@bff553f7ced91687
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	_RGB8ToHSL@24:PROC
EXTRN	_HSLtoRGB8@36:PROC
EXTRN	__CIfmod:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	__libm_sse2_atan_precise:PROC
EXTRN	__libm_sse2_pow_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	__libm_sse2_tan_precise:PROC
EXTRN	_floor:PROC
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@bff553f7ced91687
CONST	SEGMENT
__real@bff553f7ced91687 DQ 0bff553f7ced91687r	; -1.333
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfef042528ae74f3
CONST	SEGMENT
__real@bfef042528ae74f3 DQ 0bfef042528ae74f3r	; -0.969256
CONST	ENDS
;	COMDAT __real@bfe294467381d7dc
CONST	SEGMENT
__real@bfe294467381d7dc DQ 0bfe294467381d7dcr	; -0.5806
CONST	ENDS
;	COMDAT __real@bfe07acc4ef88b97
CONST	SEGMENT
__real@bfe07acc4ef88b97 DQ 0bfe07acc4ef88b97r	; -0.51499
CONST	ENDS
;	COMDAT __real@bfdccccccccccccd
CONST	SEGMENT
__real@bfdccccccccccccd DQ 0bfdccccccccccccdr	; -0.45
CONST	ENDS
;	COMDAT __real@bfd941f212d77319
CONST	SEGMENT
__real@bfd941f212d77319 DQ 0bfd941f212d77319r	; -0.39465
CONST	ENDS
;	COMDAT __real@bfd27caea747d806
CONST	SEGMENT
__real@bfd27caea747d806 DQ 0bfd27caea747d806r	; -0.28886
CONST	ENDS
;	COMDAT __real@bfc2d527e5215769
CONST	SEGMENT
__real@bfc2d527e5215769 DQ 0bfc2d527e5215769r	; -0.14713
CONST	ENDS
;	COMDAT __real@bfb99a415f45e0b5
CONST	SEGMENT
__real@bfb99a415f45e0b5 DQ 0bfb99a415f45e0b5r	; -0.10001
CONST	ENDS
;	COMDAT __real@407f400000000000
CONST	SEGMENT
__real@407f400000000000 DQ 0407f400000000000r	; 500
CONST	ENDS
;	COMDAT __real@4076800000000000
CONST	SEGMENT
__real@4076800000000000 DQ 04076800000000000r	; 360
CONST	ENDS
;	COMDAT __real@4072c00000000000
CONST	SEGMENT
__real@4072c00000000000 DQ 04072c00000000000r	; 300
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@406e000000000000
CONST	SEGMENT
__real@406e000000000000 DQ 0406e000000000000r	; 240
CONST	ENDS
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
CONST	ENDS
;	COMDAT __real@4066800000000000
CONST	SEGMENT
__real@4066800000000000 DQ 04066800000000000r	; 180
CONST	ENDS
;	COMDAT __real@4060000000000000
CONST	SEGMENT
__real@4060000000000000 DQ 04060000000000000r	; 128
CONST	ENDS
;	COMDAT __real@405e000000000000
CONST	SEGMENT
__real@405e000000000000 DQ 0405e000000000000r	; 120
CONST	ENDS
;	COMDAT __real@405d000000000000
CONST	SEGMENT
__real@405d000000000000 DQ 0405d000000000000r	; 116
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4057c3020c49ba5e
CONST	SEGMENT
__real@4057c3020c49ba5e DQ 04057c3020c49ba5er	; 95.047
CONST	ENDS
;	COMDAT __real@404e000000000000
CONST	SEGMENT
__real@404e000000000000 DQ 0404e000000000000r	; 60
CONST	ENDS
;	COMDAT __real@4030000000000000
CONST	SEGMENT
__real@4030000000000000 DQ 04030000000000000r	; 16
CONST	ENDS
;	COMDAT __real@402e000000000000
CONST	SEGMENT
__real@402e000000000000 DQ 0402e000000000000r	; 15
CONST	ENDS
;	COMDAT __real@4022000000000000
CONST	SEGMENT
__real@4022000000000000 DQ 04022000000000000r	; 9
CONST	ENDS
;	COMDAT __real@401f25e353f7ced9
CONST	SEGMENT
__real@401f25e353f7ced9 DQ 0401f25e353f7ced9r	; 7.787
CONST	ENDS
;	COMDAT __real@401921cac083126f
CONST	SEGMENT
__real@401921cac083126f DQ 0401921cac083126fr	; 6.283
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4009ec804102ff8f
CONST	SEGMENT
__real@4009ec804102ff8f DQ 04009ec804102ff8fr	; 3.24048
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@400041c2e33eff19
CONST	SEGMENT
__real@400041c2e33eff19 DQ 0400041c2e33eff19r	; 2.03211
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ffe04102ff8ec10
CONST	SEGMENT
__real@3ffe04102ff8ec10 DQ 03ffe04102ff8ec10r	; 1.87599
CONST	ENDS
;	COMDAT __real@3ffccccccccccccd
CONST	SEGMENT
__real@3ffccccccccccccd DQ 03ffccccccccccccdr	; 1.8
CONST	ENDS
;	COMDAT __real@3ffbb645a1cac083
CONST	SEGMENT
__real@3ffbb645a1cac083 DQ 03ffbb645a1cac083r	; 1.732
CONST	ENDS
;	COMDAT __real@3ffb460aa64c2f83
CONST	SEGMENT
__real@3ffb460aa64c2f83 DQ 03ffb460aa64c2f83r	; 1.7046
CONST	ENDS
;	COMDAT __real@3ff8982a9930be0e
CONST	SEGMENT
__real@3ff8982a9930be0e DQ 03ff8982a9930be0er	; 1.53715
CONST	ENDS
;	COMDAT __real@3ff5ef9db22d0e56
CONST	SEGMENT
__real@3ff5ef9db22d0e56 DQ 03ff5ef9db22d0e56r	; 1.371
CONST	ENDS
;	COMDAT __real@3ff553f7ced91687
CONST	SEGMENT
__real@3ff553f7ced91687 DQ 03ff553f7ced91687r	; 1.333
CONST	ENDS
;	COMDAT __real@3ff23cbe61cffeb0
CONST	SEGMENT
__real@3ff23cbe61cffeb0 DQ 03ff23cbe61cffeb0r	; 1.13983
CONST	ENDS
;	COMDAT __real@3ff1db22d0e56042
CONST	SEGMENT
__real@3ff1db22d0e56042 DQ 03ff1db22d0e56042r	; 1.116
CONST	ENDS
;	COMDAT __real@3ff1b645a1cac083
CONST	SEGMENT
__real@3ff1b645a1cac083 DQ 03ff1b645a1cac083r	; 1.107
CONST	ENDS
;	COMDAT __real@3ff0eabef06b3786
CONST	SEGMENT
__real@3ff0eabef06b3786 DQ 03ff0eabef06b3786r	; 1.05731
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fee9a027525460b
CONST	SEGMENT
__real@3fee9a027525460b DQ 03fee9a027525460br	; 0.9563
CONST	ENDS
;	COMDAT __real@3fee68427418d691
CONST	SEGMENT
__real@3fee68427418d691 DQ 03fee68427418d691r	; 0.950227
CONST	ENDS
;	COMDAT __real@3feaa7ef9db22d0e
CONST	SEGMENT
__real@3feaa7ef9db22d0e DQ 03feaa7ef9db22d0er	; 0.833
CONST	ENDS
;	COMDAT __real@3fe8000000000000
CONST	SEGMENT
__real@3fe8000000000000 DQ 03fe8000000000000r	; 0.75
CONST	ENDS
;	COMDAT __real@3fe6e2eb1c432ca5
CONST	SEGMENT
__real@3fe6e2eb1c432ca5 DQ 03fe6e2eb1c432ca5r	; 0.7152
CONST	ENDS
;	COMDAT __real@3fe6e297396d0918
CONST	SEGMENT
__real@3fe6e297396d0918 DQ 03fe6e297396d0918r	; 0.71516
CONST	ENDS
;	COMDAT __real@3fe65604189374bc
CONST	SEGMENT
__real@3fe65604189374bc DQ 03fe65604189374bcr	; 0.698
CONST	ENDS
;	COMDAT __real@3fe545f6ef991954
CONST	SEGMENT
__real@3fe545f6ef991954 DQ 03fe545f6ef991954r	; 0.664791
CONST	ENDS
;	COMDAT __real@3fe51eb860000000
CONST	SEGMENT
__real@3fe51eb860000000 DQ 03fe51eb860000000r	; 0.66
CONST	ENDS
;	COMDAT __real@3fe4b780346dc5d6
CONST	SEGMENT
__real@3fe4b780346dc5d6 DQ 03fe4b780346dc5d6r	; 0.6474
CONST	ENDS
;	COMDAT __real@3fe3df3b645a1cac
CONST	SEGMENT
__real@3fe3df3b645a1cac DQ 03fe3df3b645a1cacr	; 0.621
CONST	ENDS
;	COMDAT __real@3fe3ae147ae147ae
CONST	SEGMENT
__real@3fe3ae147ae147ae DQ 03fe3ae147ae147aer	; 0.615
CONST	ENDS
;	COMDAT __real@3fe3333340000000
CONST	SEGMENT
__real@3fe3333340000000 DQ 03fe3333340000000r	; 0.6
CONST	ENDS
;	COMDAT __real@3fe3126e978d4fdf
CONST	SEGMENT
__real@3fe3126e978d4fdf DQ 03fe3126e978d4fdfr	; 0.596
CONST	ENDS
;	COMDAT __real@3fe2c8b439581062
CONST	SEGMENT
__real@3fe2c8b439581062 DQ 03fe2c8b439581062r	; 0.587
CONST	ENDS
;	COMDAT __real@3fe0d446b9a7df89
CONST	SEGMENT
__real@3fe0d446b9a7df89 DQ 03fe0d446b9a7df89r	; 0.525913
CONST	ENDS
;	COMDAT __real@3fe0bc6a7ef9db23
CONST	SEGMENT
__real@3fe0bc6a7ef9db23 DQ 03fe0bc6a7ef9db23r	; 0.523
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fdfe7ff583a53b9
CONST	SEGMENT
__real@3fdfe7ff583a53b9 DQ 03fdfe7ff583a53b9r	; 0.498535
CONST	ENDS
;	COMDAT __real@3fde45a1cac08312
CONST	SEGMENT
__real@3fde45a1cac08312 DQ 03fde45a1cac08312r	; 0.473
CONST	ENDS
;	COMDAT __real@3fdbe76c8b439581
CONST	SEGMENT
__real@3fdbe76c8b439581 DQ 03fdbe76c8b439581r	; 0.436
CONST	ENDS
;	COMDAT __real@3fda65add9c27e95
CONST	SEGMENT
__real@3fda65add9c27e95 DQ 03fda65add9c27e95r	; 0.412456
CONST	ENDS
;	COMDAT __real@3fd7df3b60000000
CONST	SEGMENT
__real@3fd7df3b60000000 DQ 03fd7df3b60000000r	; 0.373
CONST	ENDS
;	COMDAT __real@3fd6e297396d0918
CONST	SEGMENT
__real@3fd6e297396d0918 DQ 03fd6e297396d0918r	; 0.35758
CONST	ENDS
;	COMDAT __real@3fd5810624dd2f1b
CONST	SEGMENT
__real@3fd5810624dd2f1b DQ 03fd5810624dd2f1br	; 0.336
CONST	ENDS
;	COMDAT __real@3fd5555555555555
CONST	SEGMENT
__real@3fd5555555555555 DQ 03fd5555555555555r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fd48b4395810625
CONST	SEGMENT
__real@3fd48b4395810625 DQ 03fd48b4395810625r	; 0.321
CONST	ENDS
;	COMDAT __real@3fd3e76c8b439581
CONST	SEGMENT
__real@3fd3e76c8b439581 DQ 03fd3e76c8b439581r	; 0.311
CONST	ENDS
;	COMDAT __real@3fd322d0e5604189
CONST	SEGMENT
__real@3fd322d0e5604189 DQ 03fd322d0e5604189r	; 0.299
CONST	ENDS
;	COMDAT __real@3fd199999999999a
CONST	SEGMENT
__real@3fd199999999999a DQ 03fd199999999999ar	; 0.275
CONST	ENDS
;	COMDAT __real@3fd16a161e4f7660
CONST	SEGMENT
__real@3fd16a161e4f7660 DQ 03fd16a161e4f7660r	; 0.2721
CONST	ENDS
;	COMDAT __real@3fd1254339516894
CONST	SEGMENT
__real@3fd1254339516894 DQ 03fd1254339516894r	; 0.267899
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fcbc6a7ef9db22d
CONST	SEGMENT
__real@3fcbc6a7ef9db22d DQ 03fcbc6a7ef9db22dr	; 0.217
CONST	ENDS
;	COMDAT __real@3fcb38cda6e75ff6
CONST	SEGMENT
__real@3fcb38cda6e75ff6 DQ 03fcb38cda6e75ff6r	; 0.212671
CONST	ENDS
;	COMDAT __real@3fcb367a0f9096bc
CONST	SEGMENT
__real@3fcb367a0f9096bc DQ 03fcb367a0f9096bcr	; 0.2126
CONST	ENDS
;	COMDAT __real@3fcb22d0e5604189
CONST	SEGMENT
__real@3fcb22d0e5604189 DQ 03fcb22d0e5604189r	; 0.212
CONST	ENDS
;	COMDAT __real@3fca1e14bdfd2631
CONST	SEGMENT
__real@3fca1e14bdfd2631 DQ 03fca1e14bdfd2631r	; 0.204043
CONST	ENDS
;	COMDAT __real@3fc99999a0000000
CONST	SEGMENT
__real@3fc99999a0000000 DQ 03fc99999a0000000r	; 0.2
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3fc7ae147ae147ae
CONST	SEGMENT
__real@3fc7ae147ae147ae DQ 03fc7ae147ae147aer	; 0.185
CONST	ENDS
;	COMDAT __real@3fc71819d2391d58
CONST	SEGMENT
__real@3fc71819d2391d58 DQ 03fc71819d2391d58r	; 0.180423
CONST	ENDS
;	COMDAT __real@3fc4dd2f1a9fbe77
CONST	SEGMENT
__real@3fc4dd2f1a9fbe77 DQ 03fc4dd2f1a9fbe77r	; 0.163
CONST	ENDS
;	COMDAT __real@3fc45f57ce20d722
CONST	SEGMENT
__real@3fc45f57ce20d722 DQ 03fc45f57ce20d722r	; 0.15916
CONST	ENDS
;	COMDAT __real@3fc0876d44c95028
CONST	SEGMENT
__real@3fc0876d44c95028 DQ 03fc0876d44c95028r	; 0.129133
CONST	ENDS
;	COMDAT __real@3fbe836eb4e98138
CONST	SEGMENT
__real@3fbe836eb4e98138 DQ 03fbe836eb4e98138r	; 0.119193
CONST	ENDS
;	COMDAT __real@3fbd2f1a9fbe76c9
CONST	SEGMENT
__real@3fbd2f1a9fbe76c9 DQ 03fbd2f1a9fbe76c9r	; 0.114
CONST	ENDS
;	COMDAT __real@3fb8106240000000
CONST	SEGMENT
__real@3fb8106240000000 DQ 03fb8106240000000r	; 0.094
CONST	ENDS
;	COMDAT __real@3fb27bb2fec56d5d
CONST	SEGMENT
__real@3fb27bb2fec56d5d DQ 03fb27bb2fec56d5dr	; 0.0722
CONST	ENDS
;	COMDAT __real@3fb279aae6c8f755
CONST	SEGMENT
__real@3fb279aae6c8f755 DQ 03fb279aae6c8f755r	; 0.072169
CONST	ENDS
;	COMDAT __real@3fac7de5082cf52c
CONST	SEGMENT
__real@3fac7de5082cf52c DQ 03fac7de5082cf52cr	; 0.055648
CONST	ENDS
;	COMDAT __real@3fa546d3f9e7b80b
CONST	SEGMENT
__real@3fa546d3f9e7b80b DQ 03fa546d3f9e7b80br	; 0.041556
CONST	ENDS
;	COMDAT __real@3f93cc4ac6cdaf4b
CONST	SEGMENT
__real@3f93cc4ac6cdaf4b DQ 03f93cc4ac6cdaf4br	; 0.019334
CONST	ENDS
;	COMDAT __real@3f82231832fcac8e
CONST	SEGMENT
__real@3f82231832fcac8e DQ 03f82231832fcac8er	; 0.008856
CONST	ENDS
;	COMDAT __real@3f183265c4c442df
CONST	SEGMENT
__real@3f183265c4c442df DQ 03f183265c4c442dfr	; 9.23037e-05
CONST	ENDS
;	COMDAT __real@3f14c331564180ea
CONST	SEGMENT
__real@3f14c331564180ea DQ 03f14c331564180ear	; 7.92025e-05
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_scA$1 = -68						; size = 8
_scR$2 = -60						; size = 8
_scG$3 = -52						; size = 8
_scB$4 = -44						; size = 8
tv85 = -36						; size = 4
_RowOffset$5 = -32					; size = 4
tv86 = -28						; size = 4
_Column$6 = -24						; size = 4
_Row$7 = -20						; size = 4
_Index$8 = -16						; size = 4
_Buffer$ = -12						; size = 4
_Channel4$9 = -5					; size = 1
_PixelSize$ = -4					; size = 1
_Channel1$10 = -3					; size = 1
_Channel2$11 = -2					; size = 1
_Channel3$12 = -1					; size = 1
_Target$ = 8						; size = 4
_TargetWidth$ = 12					; size = 4
_TargetHeight$ = 16					; size = 4
_TargetStride$ = 20					; size = 4
_ConvertFrom$ = 24					; size = 4
_ConvertTo$ = 28					; size = 4
?ConvertBuffer@@YGHPAXHHHHH@Z PROC			; ConvertBuffer

; 883  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H

; 884  :     if (Target == NULL)

	cmp	DWORD PTR _Target$[ebp], 0
	jne	SHORT $LN12@ConvertBuf

; 885  :         return NullPointer;

	mov	eax, 3
	jmp	$LN1@ConvertBuf
$LN12@ConvertBuf:

; 886  : 
; 887  :     BYTE *Buffer = (BYTE *)Target;

	mov	eax, DWORD PTR _Target$[ebp]
	mov	DWORD PTR _Buffer$[ebp], eax

; 888  :     BYTE PixelSize = 4;

	mov	BYTE PTR _PixelSize$[ebp], 4

; 889  : 
; 890  :     for (int Row = 0; Row < TargetHeight; Row++)

	mov	DWORD PTR _Row$7[ebp], 0
	jmp	SHORT $LN4@ConvertBuf
$LN2@ConvertBuf:
	mov	ecx, DWORD PTR _Row$7[ebp]
	add	ecx, 1
	mov	DWORD PTR _Row$7[ebp], ecx
$LN4@ConvertBuf:
	mov	edx, DWORD PTR _Row$7[ebp]
	cmp	edx, DWORD PTR _TargetHeight$[ebp]
	jge	$LN3@ConvertBuf

; 891  :     {
; 892  :         int RowOffset = Row * TargetStride;

	mov	eax, DWORD PTR _Row$7[ebp]
	imul	eax, DWORD PTR _TargetStride$[ebp]
	mov	DWORD PTR _RowOffset$5[ebp], eax

; 893  :         for (int Column = 0; Column < TargetWidth; Column++)

	mov	DWORD PTR _Column$6[ebp], 0
	jmp	SHORT $LN7@ConvertBuf
$LN5@ConvertBuf:
	mov	ecx, DWORD PTR _Column$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _Column$6[ebp], ecx
$LN7@ConvertBuf:
	mov	edx, DWORD PTR _Column$6[ebp]
	cmp	edx, DWORD PTR _TargetWidth$[ebp]
	jge	$LN6@ConvertBuf

; 894  :         {
; 895  :             int Index = RowOffset + (Column * PixelSize);

	movzx	eax, BYTE PTR _PixelSize$[ebp]
	imul	eax, DWORD PTR _Column$6[ebp]
	add	eax, DWORD PTR _RowOffset$5[ebp]
	mov	DWORD PTR _Index$8[ebp], eax

; 896  :             BYTE Channel1 = Buffer[Index + 0];

	mov	ecx, DWORD PTR _Buffer$[ebp]
	add	ecx, DWORD PTR _Index$8[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _Channel1$10[ebp], dl

; 897  :             BYTE Channel2 = Buffer[Index + 1];

	mov	eax, DWORD PTR _Buffer$[ebp]
	add	eax, DWORD PTR _Index$8[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR _Channel2$11[ebp], cl

; 898  :             BYTE Channel3 = Buffer[Index + 2];

	mov	edx, DWORD PTR _Buffer$[ebp]
	add	edx, DWORD PTR _Index$8[ebp]
	mov	al, BYTE PTR [edx+2]
	mov	BYTE PTR _Channel3$12[ebp], al

; 899  :             BYTE Channel4 = Buffer[Index + 3];

	mov	ecx, DWORD PTR _Buffer$[ebp]
	add	ecx, DWORD PTR _Index$8[ebp]
	mov	dl, BYTE PTR [ecx+3]
	mov	BYTE PTR _Channel4$9[ebp], dl

; 900  :             double scR, scG, scB, scA;
; 901  :             scA = 1.0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _scA$1[ebp], xmm0

; 902  :             switch (ConvertTo)

	mov	eax, DWORD PTR _ConvertTo$[ebp]
	mov	DWORD PTR tv85[ebp], eax
	cmp	DWORD PTR tv85[ebp], 2
	je	SHORT $LN13@ConvertBuf
	jmp	$LN8@ConvertBuf
$LN13@ConvertBuf:

; 903  :             {
; 904  :             case ToRGB:
; 905  :                 switch (ConvertFrom)

	mov	ecx, DWORD PTR _ConvertFrom$[ebp]
	mov	DWORD PTR tv86[ebp], ecx
	cmp	DWORD PTR tv86[ebp], 5
	je	SHORT $LN15@ConvertBuf
	cmp	DWORD PTR tv86[ebp], 6
	je	SHORT $LN16@ConvertBuf
	jmp	$LN10@ConvertBuf

; 906  :                 {
; 907  :                 case FromRGB:
; 908  :                     break;

	jmp	$LN10@ConvertBuf
$LN15@ConvertBuf:

; 909  : 
; 910  :                 case FromCMY:
; 911  :                     CMYtoRGB(Channel1, Channel2, Channel3, &scR, &scG, &scB);

	lea	edx, DWORD PTR _scB$4[ebp]
	push	edx
	lea	eax, DWORD PTR _scG$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _scR$2[ebp]
	push	ecx
	movzx	edx, BYTE PTR _Channel3$12[ebp]
	cvtsi2sd xmm0, edx
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movzx	eax, BYTE PTR _Channel2$11[ebp]
	cvtsi2sd xmm0, eax
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movzx	ecx, BYTE PTR _Channel1$10[ebp]
	cvtsi2sd xmm0, ecx
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_CMYtoRGB@36

; 912  :                     break;

	jmp	SHORT $LN10@ConvertBuf
$LN16@ConvertBuf:

; 913  : 
; 914  :                 case FromCMYK:
; 915  :                     CMYKtoRGB((double)Channel1 / 255.0, (double)Channel2 / 255.0, (double)Channel3 / 255.0, (double)Channel4 / 255.0,

	lea	edx, DWORD PTR _scB$4[ebp]
	push	edx
	lea	eax, DWORD PTR _scG$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _scR$2[ebp]
	push	ecx
	movzx	edx, BYTE PTR _Channel4$9[ebp]
	cvtsi2sd xmm0, edx
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movzx	eax, BYTE PTR _Channel3$12[ebp]
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movzx	ecx, BYTE PTR _Channel2$11[ebp]
	cvtsi2sd xmm0, ecx
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movzx	edx, BYTE PTR _Channel1$10[ebp]
	cvtsi2sd xmm0, edx
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_CMYKtoRGB@44
$LN10@ConvertBuf:
$LN8@ConvertBuf:

; 916  :                         &scR, &scG, &scB);
; 917  :                     break;
; 918  : 
; 919  :                 case FromHSL:
; 920  :                     break;
; 921  : 
; 922  :                 case FromHSV:
; 923  :                     break;
; 924  : 
; 925  :                 case FromLAB:
; 926  :                     break;
; 927  : 
; 928  :                 case FromXYZ:
; 929  :                     break;
; 930  :                 }
; 931  :                 break;
; 932  :             }
; 933  :             Buffer[Index + 0] = (BYTE)(scB * 255.0);

	movsd	xmm0, QWORD PTR _scB$4[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si eax, xmm0
	mov	ecx, DWORD PTR _Buffer$[ebp]
	add	ecx, DWORD PTR _Index$8[ebp]
	mov	BYTE PTR [ecx], al

; 934  :             Buffer[Index + 1] = (BYTE)(scG * 255.0);

	movsd	xmm0, QWORD PTR _scG$3[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si edx, xmm0
	mov	eax, DWORD PTR _Buffer$[ebp]
	add	eax, DWORD PTR _Index$8[ebp]
	mov	BYTE PTR [eax+1], dl

; 935  :             Buffer[Index + 2] = (BYTE)(scR * 255.0);

	movsd	xmm0, QWORD PTR _scR$2[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si ecx, xmm0
	mov	edx, DWORD PTR _Buffer$[ebp]
	add	edx, DWORD PTR _Index$8[ebp]
	mov	BYTE PTR [edx+2], cl

; 936  :             Buffer[Index + 3] = (BYTE)(scA * 255.0);

	movsd	xmm0, QWORD PTR _scA$1[ebp]
	mulsd	xmm0, QWORD PTR __real@406fe00000000000
	cvttsd2si eax, xmm0
	mov	ecx, DWORD PTR _Buffer$[ebp]
	add	ecx, DWORD PTR _Index$8[ebp]
	mov	BYTE PTR [ecx+3], al

; 937  :         }

	jmp	$LN5@ConvertBuf
$LN6@ConvertBuf:

; 938  :     }

	jmp	$LN2@ConvertBuf
$LN3@ConvertBuf:

; 939  : 
; 940  :     return Success;

	xor	eax, eax
$LN1@ConvertBuf:

; 941  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?ConvertBuffer@@YGHPAXHHHHH@Z ENDP			; ConvertBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
tv65 = -4						; size = 4
_Channel1In$ = 8					; size = 8
_Channel2In$ = 16					; size = 8
_Channel3In$ = 24					; size = 8
_Channel4In$ = 32					; size = 8
_Channel1Out$ = 40					; size = 4
_Channel2Out$ = 44					; size = 4
_Channel3Out$ = 48					; size = 4
_Channel4Out$ = 52					; size = 4
_From$ = 56						; size = 1
_To$ = 60						; size = 1
?ColorSpaceConversion@@YGHNNNNPAN000EE@Z PROC		; ColorSpaceConversion

; 853  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 854  :     switch (From)

	mov	al, BYTE PTR _From$[ebp]
	mov	BYTE PTR tv65[ebp], al
	cmp	BYTE PTR tv65[ebp], 2
	je	SHORT $LN4@ColorSpace
	jmp	SHORT $LN2@ColorSpace
$LN4@ColorSpace:

; 855  :     {
; 856  :     case FromRGB:
; 857  :         RGBTo(Channel1In, Channel2In, Channel3In, Channel1Out, Channel2Out, Channel3Out, Channel4Out, To);

	movzx	ecx, BYTE PTR _To$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Channel4Out$[ebp]
	push	edx
	mov	eax, DWORD PTR _Channel3Out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Channel2Out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Channel1Out$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Channel3In$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Channel2In$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Channel1In$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?RGBTo@@YGHNNNPAN000E@Z			; RGBTo
$LN2@ColorSpace:

; 858  :         break;
; 859  : 
; 860  :     case FromHSL:
; 861  :         break;
; 862  : 
; 863  :     case FromHSV:
; 864  :         break;
; 865  : 
; 866  :     case FromXYZ:
; 867  :         break;
; 868  : 
; 869  :     case FromLAB:
; 870  :         break;
; 871  : 
; 872  :     case FromCMY:
; 873  :         break;
; 874  : 
; 875  :     case FromCMYK:
; 876  :         break;
; 877  :     }
; 878  :     return Success;

	xor	eax, eax

; 879  : }

	mov	esp, ebp
	pop	ebp
	ret	56					; 00000038H
?ColorSpaceConversion@@YGHNNNNPAN000EE@Z ENDP		; ColorSpaceConversion
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
tv65 = -4						; size = 4
_Rin$ = 8						; size = 8
_Gin$ = 16						; size = 8
_Bin$ = 24						; size = 8
_Channel1Out$ = 32					; size = 4
_Channel2Out$ = 36					; size = 4
_Channel3Out$ = 40					; size = 4
_Channel4Out$ = 44					; size = 4
_ToFormat$ = 48						; size = 1
?RGBTo@@YGHNNNPAN000E@Z PROC				; RGBTo

; 810  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 811  :     switch (ToFormat)

	movzx	eax, BYTE PTR _ToFormat$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 6
	ja	$LN2@RGBTo
	mov	ecx, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN13@RGBTo[ecx*4]
$LN4@RGBTo:

; 812  :     {
; 813  :     case ToRGB:
; 814  :         *Channel1Out = Rin;

	mov	edx, DWORD PTR _Channel1Out$[ebp]
	movsd	xmm0, QWORD PTR _Rin$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 815  :         *Channel2Out = Gin;

	mov	eax, DWORD PTR _Channel2Out$[ebp]
	movsd	xmm0, QWORD PTR _Gin$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 816  :         *Channel3Out = Bin;

	mov	ecx, DWORD PTR _Channel3Out$[ebp]
	movsd	xmm0, QWORD PTR _Bin$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 817  :         return Success;

	xor	eax, eax
	jmp	$LN1@RGBTo
$LN5@RGBTo:

; 818  : 
; 819  :     case ToHSL:
; 820  :         RGBtoHSL(Rin, Gin, Bin, Channel1Out, Channel2Out, Channel3Out);

	mov	edx, DWORD PTR _Channel3Out$[ebp]
	push	edx
	mov	eax, DWORD PTR _Channel2Out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Channel1Out$[ebp]
	push	ecx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Bin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Gin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Rin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoHSL@36

; 821  :         return Success;

	xor	eax, eax
	jmp	$LN1@RGBTo
$LN6@RGBTo:

; 822  : 
; 823  :     case ToHSV:
; 824  :         RGBtoHSV(Rin, Gin, Bin, Channel1Out, Channel2Out, Channel3Out);

	mov	edx, DWORD PTR _Channel3Out$[ebp]
	push	edx
	mov	eax, DWORD PTR _Channel2Out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Channel1Out$[ebp]
	push	ecx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Bin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Gin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Rin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoHSV@36

; 825  :         return Success;

	xor	eax, eax
	jmp	$LN1@RGBTo
$LN7@RGBTo:

; 826  : 
; 827  :     case ToCMY:
; 828  :         RGBtoCMY(Rin, Gin, Bin, Channel1Out, Channel2Out, Channel3Out);

	mov	edx, DWORD PTR _Channel3Out$[ebp]
	push	edx
	mov	eax, DWORD PTR _Channel2Out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Channel1Out$[ebp]
	push	ecx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Bin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Gin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Rin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoCMY@36

; 829  :         return Success;

	xor	eax, eax
	jmp	$LN1@RGBTo
$LN8@RGBTo:

; 830  : 
; 831  :     case ToCMYK:
; 832  :         RGBtoCMYK(Rin, Gin, Bin, Channel1Out, Channel2Out, Channel3Out, Channel4Out);

	mov	edx, DWORD PTR _Channel4Out$[ebp]
	push	edx
	mov	eax, DWORD PTR _Channel3Out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Channel2Out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Channel1Out$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Bin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Gin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Rin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoCMYK@40

; 833  :         return Success;

	xor	eax, eax
	jmp	SHORT $LN1@RGBTo
$LN9@RGBTo:

; 834  : 
; 835  :     case ToXYZ:
; 836  :         RGBtoXYZ(Rin, Gin, Bin, Channel1Out, Channel2Out, Channel3Out);

	mov	eax, DWORD PTR _Channel3Out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Channel2Out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Channel1Out$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Bin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Gin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Rin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoXYZ@36

; 837  :         return Success;

	xor	eax, eax
	jmp	SHORT $LN1@RGBTo
$LN10@RGBTo:

; 838  : 
; 839  :     case ToLAB:
; 840  :         RGBtoCIELAB(Rin, Gin, Bin, Channel1Out, Channel2Out, Channel3Out);

	mov	eax, DWORD PTR _Channel3Out$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Channel2Out$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Channel1Out$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Bin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Gin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Rin$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoCIELAB@36

; 841  :         return Success;

	xor	eax, eax
	jmp	SHORT $LN1@RGBTo
$LN2@RGBTo:

; 842  : 
; 843  :     case ToYCbCr:
; 844  :         //RGBtoYCbCr ();
; 845  :         break;
; 846  :     }
; 847  :     return InvalidOperation;

	mov	eax, 11					; 0000000bH
$LN1@RGBTo:

; 848  : }

	mov	esp, ebp
	pop	ebp
	ret	44					; 0000002cH
	npad	2
$LN13@RGBTo:
	DD	$LN5@RGBTo
	DD	$LN6@RGBTo
	DD	$LN4@RGBTo
	DD	$LN10@RGBTo
	DD	$LN9@RGBTo
	DD	$LN7@RGBTo
	DD	$LN8@RGBTo
?RGBTo@@YGHNNNPAN000E@Z ENDP				; RGBTo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_vprime$ = -16						; size = 8
_uprime$ = -8						; size = 8
_X$ = 8							; size = 8
_Y$ = 16						; size = 8
_Z$ = 24						; size = 8
_L$ = 32						; size = 4
_U$ = 36						; size = 4
_V$ = 40						; size = 4
?XYZtoCIULUV@@YGXNNNPAN00@Z PROC			; XYZtoCIULUV

; 558  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 559  :     double uprime = (4.0 * X) / (X + (15.0 * Y) + (3.0 * Z));

	movsd	xmm0, QWORD PTR __real@4010000000000000
	mulsd	xmm0, QWORD PTR _X$[ebp]
	movsd	xmm1, QWORD PTR __real@402e000000000000
	mulsd	xmm1, QWORD PTR _Y$[ebp]
	addsd	xmm1, QWORD PTR _X$[ebp]
	movsd	xmm2, QWORD PTR __real@4008000000000000
	mulsd	xmm2, QWORD PTR _Z$[ebp]
	addsd	xmm1, xmm2
	divsd	xmm0, xmm1
	movsd	QWORD PTR _uprime$[ebp], xmm0

; 560  :     double vprime = (9.0 * Y) / (X + (15.0 * Y) + (3.0 * Z));

	movsd	xmm0, QWORD PTR __real@4022000000000000
	mulsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	xmm1, QWORD PTR __real@402e000000000000
	mulsd	xmm1, QWORD PTR _Y$[ebp]
	addsd	xmm1, QWORD PTR _X$[ebp]
	movsd	xmm2, QWORD PTR __real@4008000000000000
	mulsd	xmm2, QWORD PTR _Z$[ebp]
	addsd	xmm1, xmm2
	divsd	xmm0, xmm1
	movsd	QWORD PTR _vprime$[ebp], xmm0

; 561  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?XYZtoCIULUV@@YGXNNNPAN00@Z ENDP			; XYZtoCIULUV
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
tv77 = -16						; size = 8
_Weight$ = -8						; size = 8
_T$ = 8							; size = 8
_A$ = 16						; size = 8
_B$ = 24						; size = 8
?CubicInt@@YGNNNN@Z PROC				; CubicInt

; 462  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 463  :     double Weight = T * T * (3 - (2 * T));

	movsd	xmm0, QWORD PTR _T$[ebp]
	mulsd	xmm0, QWORD PTR _T$[ebp]
	movsd	xmm1, QWORD PTR __real@4000000000000000
	mulsd	xmm1, QWORD PTR _T$[ebp]
	movsd	xmm2, QWORD PTR __real@4008000000000000
	subsd	xmm2, xmm1
	mulsd	xmm0, xmm2
	movsd	QWORD PTR _Weight$[ebp], xmm0

; 464  :     return A * Weight * (B - A);

	movsd	xmm0, QWORD PTR _A$[ebp]
	mulsd	xmm0, QWORD PTR _Weight$[ebp]
	movsd	xmm1, QWORD PTR _B$[ebp]
	subsd	xmm1, QWORD PTR _A$[ebp]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR tv77[ebp], xmm0
	fld	QWORD PTR tv77[ebp]

; 465  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?CubicInt@@YGNNNN@Z ENDP				; CubicInt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_R$ = 8							; size = 1
_G$ = 12						; size = 1
_B$ = 16						; size = 1
_RGBtoHue2@12 PROC

; 133  : {

	push	ebp
	mov	ebp, esp

; 134  :     return RGBtoHue((double)R / 255.0, (double)G / 255.0, (double)B / 255.0);

	movzx	eax, BYTE PTR _B$[ebp]
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movzx	ecx, BYTE PTR _G$[ebp]
	cvtsi2sd xmm0, ecx
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movzx	edx, BYTE PTR _R$[ebp]
	cvtsi2sd xmm0, edx
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoHue@24

; 135  : }

	pop	ebp
	ret	12					; 0000000cH
_RGBtoHue2@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_S$ = -24						; size = 8
_L$ = -16						; size = 8
_H$ = -8						; size = 8
_R$ = 8							; size = 8
_G$ = 16						; size = 8
_B$ = 24						; size = 8
_RGBtoHue@24 PROC

; 126  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 127  :     double H, S, L;
; 128  :     RGBtoHSL(R, G, B, &H, &S, &L);

	lea	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR _S$[ebp]
	push	ecx
	lea	edx, DWORD PTR _H$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _G$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _R$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoHSL@36

; 129  :     return H;

	fld	QWORD PTR _H$[ebp]

; 130  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_RGBtoHue@24 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_S$ = -40						; size = 8
_L$ = -32						; size = 8
tv79 = -24						; size = 8
tv76 = -16						; size = 8
_H$ = -8						; size = 8
_R$ = 8							; size = 4
_G$ = 12						; size = 4
_B$ = 16						; size = 4
_AngleOffset$ = 20					; size = 4
_ShiftHue@16 PROC

; 340  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 341  : #if 0
; 342  : 	if (AngleOffset < 0)
; 343  : 		AngleOffset = 0;
; 344  : 	if (AngleOffset > 360)
; 345  : 		AngleOffset = 360;
; 346  : #endif
; 347  : 	double H, S, L;
; 348  : 	RGB8ToHSL(*R, *G, *B, &H, &S, &L);

	lea	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR _S$[ebp]
	push	ecx
	lea	edx, DWORD PTR _H$[ebp]
	push	edx
	mov	eax, DWORD PTR _B$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _G$[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _R$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	call	_RGB8ToHSL@24

; 349  : 	H = ClampHue(H, AngleOffset);

	cvtsi2sd xmm0, DWORD PTR _AngleOffset$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _H$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_ClampHue@16
	fstp	QWORD PTR _H$[ebp]

; 350  : //	H += AngleOffset;
; 351  : 	H = H > 360.0 ? H - 360.0 : H;

	movsd	xmm0, QWORD PTR _H$[ebp]
	comisd	xmm0, QWORD PTR __real@4076800000000000
	jbe	SHORT $LN3@ShiftHue
	movsd	xmm0, QWORD PTR _H$[ebp]
	subsd	xmm0, QWORD PTR __real@4076800000000000
	movsd	QWORD PTR tv76[ebp], xmm0
	jmp	SHORT $LN4@ShiftHue
$LN3@ShiftHue:
	movsd	xmm0, QWORD PTR _H$[ebp]
	movsd	QWORD PTR tv76[ebp], xmm0
$LN4@ShiftHue:
	movsd	xmm0, QWORD PTR tv76[ebp]
	movsd	QWORD PTR _H$[ebp], xmm0

; 352  : 	H = H < 0.0 ? H + 360.0 : H;

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _H$[ebp]
	jbe	SHORT $LN5@ShiftHue
	movsd	xmm0, QWORD PTR _H$[ebp]
	addsd	xmm0, QWORD PTR __real@4076800000000000
	movsd	QWORD PTR tv79[ebp], xmm0
	jmp	SHORT $LN6@ShiftHue
$LN5@ShiftHue:
	movsd	xmm0, QWORD PTR _H$[ebp]
	movsd	QWORD PTR tv79[ebp], xmm0
$LN6@ShiftHue:
	movsd	xmm0, QWORD PTR tv79[ebp]
	movsd	QWORD PTR _H$[ebp], xmm0

; 353  : 	HSLtoRGB8(H, S, L, R, G, B);

	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	mov	ecx, DWORD PTR _G$[ebp]
	push	ecx
	mov	edx, DWORD PTR _R$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _L$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _S$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _H$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_HSLtoRGB8@36

; 354  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_ShiftHue@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_Rotated$ = -8						; size = 8
_Hue$ = 8						; size = 8
_Rotation$ = 16						; size = 8
_ClampHue@16 PROC

; 323  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 324  : 	double Rotated = Hue + Rotation;

	movsd	xmm0, QWORD PTR _Hue$[ebp]
	addsd	xmm0, QWORD PTR _Rotation$[ebp]
	movsd	QWORD PTR _Rotated$[ebp], xmm0

; 325  : 	if (Rotated < 0.0)

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _Rotated$[ebp]
	jbe	SHORT $LN2@ClampHue

; 326  : 		Rotated = Rotated + 360.0;

	movsd	xmm0, QWORD PTR _Rotated$[ebp]
	addsd	xmm0, QWORD PTR __real@4076800000000000
	movsd	QWORD PTR _Rotated$[ebp], xmm0
$LN2@ClampHue:

; 327  : 	if (Rotated > 360.0)

	movsd	xmm0, QWORD PTR _Rotated$[ebp]
	comisd	xmm0, QWORD PTR __real@4076800000000000
	jbe	SHORT $LN3@ClampHue

; 328  : 		Rotated = Rotated - 360.0;

	movsd	xmm0, QWORD PTR _Rotated$[ebp]
	subsd	xmm0, QWORD PTR __real@4076800000000000
	movsd	QWORD PTR _Rotated$[ebp], xmm0
$LN3@ClampHue:

; 329  : 	return Rotated;

	fld	QWORD PTR _Rotated$[ebp]

; 330  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_ClampHue@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_S$ = -24						; size = 8
_L$ = -16						; size = 8
_H$ = -8						; size = 8
_R$ = 8							; size = 4
_G$ = 12						; size = 4
_B$ = 16						; size = 4
_Angle$ = 20						; size = 4
_AdjustHue@16 PROC

; 282  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 283  :     double H, S, L;
; 284  :     RGBtoHSL2(*R, *G, *B, &H, &S, &L);

	lea	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR _S$[ebp]
	push	ecx
	lea	edx, DWORD PTR _H$[ebp]
	push	edx
	mov	eax, DWORD PTR _B$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _G$[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _R$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	call	_RGBtoHSL2@24

; 285  :     H += Angle;

	cvtsi2sd xmm0, DWORD PTR _Angle$[ebp]
	addsd	xmm0, QWORD PTR _H$[ebp]
	movsd	QWORD PTR _H$[ebp], xmm0

; 286  :     if (H > 360)

	movsd	xmm0, QWORD PTR _H$[ebp]
	comisd	xmm0, QWORD PTR __real@4076800000000000
	jbe	SHORT $LN2@AdjustHue

; 287  :     {
; 288  :         H -= 360;

	movsd	xmm0, QWORD PTR _H$[ebp]
	subsd	xmm0, QWORD PTR __real@4076800000000000
	movsd	QWORD PTR _H$[ebp], xmm0

; 289  :     }
; 290  :     else

	jmp	SHORT $LN4@AdjustHue
$LN2@AdjustHue:

; 291  :     {
; 292  :         if (H < 0)

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _H$[ebp]
	jbe	SHORT $LN4@AdjustHue

; 293  :             H += 360;

	movsd	xmm0, QWORD PTR _H$[ebp]
	addsd	xmm0, QWORD PTR __real@4076800000000000
	movsd	QWORD PTR _H$[ebp], xmm0
$LN4@AdjustHue:

; 294  :     }
; 295  :     HSLtoRGB2(H, S, L, R, G, B);

	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	mov	ecx, DWORD PTR _G$[ebp]
	push	ecx
	mov	edx, DWORD PTR _R$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _L$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _S$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _H$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_HSLtoRGB2@36

; 296  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_AdjustHue@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_S$ = -24						; size = 8
_L$ = -16						; size = 8
_H$ = -8						; size = 8
_R$ = 8							; size = 4
_G$ = 12						; size = 4
_B$ = 16						; size = 4
_Angle$ = 20						; size = 4
_ChangeHue@16 PROC

; 306  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 307  :     double H, S, L;
; 308  :     RGBtoHSL2(*R, *G, *B, &H, &S, &L);

	lea	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR _S$[ebp]
	push	ecx
	lea	edx, DWORD PTR _H$[ebp]
	push	edx
	mov	eax, DWORD PTR _B$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _G$[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _R$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	call	_RGBtoHSL2@24

; 309  :     H = Angle;

	cvtsi2sd xmm0, DWORD PTR _Angle$[ebp]
	movsd	QWORD PTR _H$[ebp], xmm0

; 310  :     if (H > 360)

	movsd	xmm0, QWORD PTR _H$[ebp]
	comisd	xmm0, QWORD PTR __real@4076800000000000
	jbe	SHORT $LN2@ChangeHue

; 311  :     {
; 312  :         H -= 360;

	movsd	xmm0, QWORD PTR _H$[ebp]
	subsd	xmm0, QWORD PTR __real@4076800000000000
	movsd	QWORD PTR _H$[ebp], xmm0

; 313  :     }
; 314  :     else

	jmp	SHORT $LN4@ChangeHue
$LN2@ChangeHue:

; 315  :     {
; 316  :         if (H < 0)

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _H$[ebp]
	jbe	SHORT $LN4@ChangeHue

; 317  :             H += 360;

	movsd	xmm0, QWORD PTR _H$[ebp]
	addsd	xmm0, QWORD PTR __real@4076800000000000
	movsd	QWORD PTR _H$[ebp], xmm0
$LN4@ChangeHue:

; 318  :     }
; 319  :     HSLtoRGB2(H, S, L, R, G, B);

	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	mov	ecx, DWORD PTR _G$[ebp]
	push	ecx
	mov	edx, DWORD PTR _R$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _L$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _S$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _H$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_HSLtoRGB2@36

; 320  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_ChangeHue@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_S$ = -24						; size = 8
_L$ = -16						; size = 8
_H$ = -8						; size = 8
_R$ = 8							; size = 1
_G$ = 12						; size = 1
_B$ = 16						; size = 1
_GetPixelHue@12 PROC

; 268  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 269  :     double H, S, L;
; 270  :     RGBtoHSL2(R, G, B, &H, &S, &L);

	lea	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR _S$[ebp]
	push	ecx
	lea	edx, DWORD PTR _H$[ebp]
	push	edx
	movzx	eax, BYTE PTR _B$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _G$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _R$[ebp]
	push	edx
	call	_RGBtoHSL2@24

; 271  :     return H;

	fld	QWORD PTR _H$[ebp]

; 272  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_GetPixelHue@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_H$ = -24						; size = 8
_L$ = -16						; size = 8
_S$ = -8						; size = 8
_R$ = 8							; size = 1
_G$ = 12						; size = 1
_B$ = 16						; size = 1
_GetPixelSaturation@12 PROC

; 251  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 252  :     double H, S, L;
; 253  :     RGBtoHSL2(R, G, B, &H, &S, &L);

	lea	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR _S$[ebp]
	push	ecx
	lea	edx, DWORD PTR _H$[ebp]
	push	edx
	movzx	eax, BYTE PTR _B$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _G$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _R$[ebp]
	push	edx
	call	_RGBtoHSL2@24

; 254  :     return S;

	fld	QWORD PTR _S$[ebp]

; 255  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_GetPixelSaturation@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_H$ = -24						; size = 8
_S$ = -16						; size = 8
_L$ = -8						; size = 8
_R$ = 8							; size = 1
_G$ = 12						; size = 1
_B$ = 16						; size = 1
_GetPixelLuminance@12 PROC

; 234  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 235  :     double H, S, L;
; 236  :     RGBtoHSL2(R, G, B, &H, &S, &L);

	lea	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR _S$[ebp]
	push	ecx
	lea	edx, DWORD PTR _H$[ebp]
	push	edx
	movzx	eax, BYTE PTR _B$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _G$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _R$[ebp]
	push	edx
	call	_RGBtoHSL2@24

; 237  :     return L;

	fld	QWORD PTR _L$[ebp]

; 238  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_GetPixelLuminance@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_L$ = -24						; size = 8
_H$ = -16						; size = 8
_S$ = -8						; size = 8
_R$ = 8							; size = 4
_G$ = 12						; size = 4
_B$ = 16						; size = 4
_NewLuminance$ = 20					; size = 8
_SetPixelLuminance@20 PROC

; 215  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 216  :     double H;
; 217  :     double S;
; 218  :     double L;
; 219  :     RGBtoHSL2(*R, *G, *B, &H, &S, &L);

	lea	eax, DWORD PTR _L$[ebp]
	push	eax
	lea	ecx, DWORD PTR _S$[ebp]
	push	ecx
	lea	edx, DWORD PTR _H$[ebp]
	push	edx
	mov	eax, DWORD PTR _B$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _G$[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _R$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	call	_RGBtoHSL2@24

; 220  :     HSLtoRGB2(H, S, NewLuminance, R, G, B);

	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	mov	ecx, DWORD PTR _G$[ebp]
	push	ecx
	mov	edx, DWORD PTR _R$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _NewLuminance$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _S$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _H$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_HSLtoRGB2@36

; 221  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_SetPixelLuminance@20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
tv92 = -16						; size = 8
tv89 = -8						; size = 8
_R$ = 8							; size = 1
_G$ = 12						; size = 1
_B$ = 16						; size = 1
_Perceived$ = 20					; size = 4
_ColorLuminance2@16 PROC

; 952  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 953  :     if (Perceived)

	cmp	DWORD PTR _Perceived$[ebp], 0
	je	SHORT $LN2@ColorLumin

; 954  :     {
; 955  :         return ((double)R * 0.299) + ((double)G * 0.587) + ((double)B * 0.114);

	movzx	eax, BYTE PTR _R$[ebp]
	cvtsi2sd xmm0, eax
	mulsd	xmm0, QWORD PTR __real@3fd322d0e5604189
	movzx	ecx, BYTE PTR _G$[ebp]
	cvtsi2sd xmm1, ecx
	mulsd	xmm1, QWORD PTR __real@3fe2c8b439581062
	addsd	xmm0, xmm1
	movzx	edx, BYTE PTR _B$[ebp]
	cvtsi2sd xmm1, edx
	mulsd	xmm1, QWORD PTR __real@3fbd2f1a9fbe76c9
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv89[ebp], xmm0
	fld	QWORD PTR tv89[ebp]
	jmp	SHORT $LN3@ColorLumin

; 956  :     }
; 957  :     else

	jmp	SHORT $LN3@ColorLumin
$LN2@ColorLumin:

; 958  :     {
; 959  :         return ((double)R * 0.2126) + ((double)G * 0.7152) + ((double)B * 0.0722);

	movzx	eax, BYTE PTR _R$[ebp]
	cvtsi2sd xmm0, eax
	mulsd	xmm0, QWORD PTR __real@3fcb367a0f9096bc
	movzx	ecx, BYTE PTR _G$[ebp]
	cvtsi2sd xmm1, ecx
	mulsd	xmm1, QWORD PTR __real@3fe6e2eb1c432ca5
	addsd	xmm0, xmm1
	movzx	edx, BYTE PTR _B$[ebp]
	cvtsi2sd xmm1, edx
	mulsd	xmm1, QWORD PTR __real@3fb27bb2fec56d5d
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv92[ebp], xmm0
	fld	QWORD PTR tv92[ebp]
$LN3@ColorLumin:

; 960  :     }
; 961  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_ColorLuminance2@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_Y$ = 8							; size = 8
_U$ = 16						; size = 8
_V$ = 24						; size = 8
_R$ = 32						; size = 4
_G$ = 36						; size = 4
_B$ = 40						; size = 4
_YUVtoRGB@36 PROC

; 630  : {

	push	ebp
	mov	ebp, esp

; 631  :     *R = (1.0 * Y) + (0.0 * U) + (1.13983 * V);

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	mulsd	xmm0, QWORD PTR _Y$[ebp]
	xorps	xmm1, xmm1
	mulsd	xmm1, QWORD PTR _U$[ebp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3ff23cbe61cffeb0
	mulsd	xmm1, QWORD PTR _V$[ebp]
	addsd	xmm0, xmm1
	mov	eax, DWORD PTR _R$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 632  :     *G = (1.0 * Y) + (-0.39465 * U) + (-0.58060 * V);

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	mulsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	xmm1, QWORD PTR __real@bfd941f212d77319
	mulsd	xmm1, QWORD PTR _U$[ebp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@bfe294467381d7dc
	mulsd	xmm1, QWORD PTR _V$[ebp]
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _G$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 633  :     *B = (1.0 * Y) + (2.03211 * U) + (0.0 * V);

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	mulsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	xmm1, QWORD PTR __real@400041c2e33eff19
	mulsd	xmm1, QWORD PTR _U$[ebp]
	addsd	xmm0, xmm1
	xorps	xmm1, xmm1
	mulsd	xmm1, QWORD PTR _V$[ebp]
	addsd	xmm0, xmm1
	mov	edx, DWORD PTR _B$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 634  : }

	pop	ebp
	ret	36					; 00000024H
_YUVtoRGB@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_R$ = 8							; size = 8
_G$ = 16						; size = 8
_B$ = 24						; size = 8
_Y$ = 32						; size = 4
_U$ = 36						; size = 4
_V$ = 40						; size = 4
_RGBtoYUV@36 PROC

; 623  : {

	push	ebp
	mov	ebp, esp

; 624  :     *Y = (R * 0.299) + (G * 0.587) + (B * 0.114);

	movsd	xmm0, QWORD PTR _R$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fd322d0e5604189
	movsd	xmm1, QWORD PTR _G$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fe2c8b439581062
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _B$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fbd2f1a9fbe76c9
	addsd	xmm0, xmm1
	mov	eax, DWORD PTR _Y$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 625  :     *U = (R * -0.14713) + (G * -0.28886) + (B * 0.436);

	movsd	xmm0, QWORD PTR _R$[ebp]
	mulsd	xmm0, QWORD PTR __real@bfc2d527e5215769
	movsd	xmm1, QWORD PTR _G$[ebp]
	mulsd	xmm1, QWORD PTR __real@bfd27caea747d806
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _B$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fdbe76c8b439581
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _U$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 626  :     *V = (R * 0.615) + (G * -0.51499) + (B * -0.10001);

	movsd	xmm0, QWORD PTR _R$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fe3ae147ae147ae
	movsd	xmm1, QWORD PTR _G$[ebp]
	mulsd	xmm1, QWORD PTR __real@bfe07acc4ef88b97
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _B$[ebp]
	mulsd	xmm1, QWORD PTR __real@bfb99a415f45e0b5
	addsd	xmm0, xmm1
	mov	edx, DWORD PTR _V$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 627  : }

	pop	ebp
	ret	36					; 00000024H
_RGBtoYUV@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_X$ = -24						; size = 8
_Y$ = -16						; size = 8
_Z$ = -8						; size = 8
_L$ = 8							; size = 8
_A$ = 16						; size = 8
_B$ = 24						; size = 8
_Rp$ = 32						; size = 4
_Gp$ = 36						; size = 4
_Bp$ = 40						; size = 4
_CIELABtoRGB@36 PROC

; 802  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 803  :     double X, Y, Z;
; 804  :     CIELABtoXYZ(L, A, B, &X, &Y, &Z);

	lea	eax, DWORD PTR _Z$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _X$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _A$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _L$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_CIELABtoXYZ@36

; 805  :     XYZtoRGB(X, Y, Z, Rp, Gp, Bp);

	mov	eax, DWORD PTR _Bp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Gp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Rp$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Z$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _X$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_XYZtoRGB@36

; 806  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_CIELABtoRGB@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_X$ = -24						; size = 8
_Y$ = -16						; size = 8
_Z$ = -8						; size = 8
_R$ = 8							; size = 8
_G$ = 16						; size = 8
_B$ = 24						; size = 8
_Lp$ = 32						; size = 4
_Ap$ = 36						; size = 4
_Bp$ = 40						; size = 4
_RGBtoCIELAB@36 PROC

; 795  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 796  :     double X, Y, Z;
; 797  :     RGBtoXYZ(R, G, B, &X, &Y, &Z);

	lea	eax, DWORD PTR _Z$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Y$[ebp]
	push	ecx
	lea	edx, DWORD PTR _X$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _G$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _R$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoXYZ@36

; 798  :     XYZtoCIELab(X, Y, Z, Lp, Ap, Bp);

	mov	eax, DWORD PTR _Bp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _Ap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Lp$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Z$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _X$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_XYZtoCIELab@36

; 799  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_RGBtoCIELAB@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_Zp$ = -24						; size = 8
_Xp$ = -16						; size = 8
_Yp$ = -8						; size = 8
_L$ = 8							; size = 8
_A$ = 16						; size = 8
_B$ = 24						; size = 8
_X$ = 32						; size = 4
_Y$ = 36						; size = 4
_Z$ = 40						; size = 4
_CIELABtoXYZ@36 PROC

; 771  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 772  :     double Yp = (L + 16) / 116;

	movsd	xmm0, QWORD PTR _L$[ebp]
	addsd	xmm0, QWORD PTR __real@4030000000000000
	divsd	xmm0, QWORD PTR __real@405d000000000000
	movsd	QWORD PTR _Yp$[ebp], xmm0

; 773  :     double Xp = (A / 500) + Yp;

	movsd	xmm0, QWORD PTR _A$[ebp]
	divsd	xmm0, QWORD PTR __real@407f400000000000
	addsd	xmm0, QWORD PTR _Yp$[ebp]
	movsd	QWORD PTR _Xp$[ebp], xmm0

; 774  :     double Zp = Yp - (B / 200);

	movsd	xmm0, QWORD PTR _B$[ebp]
	divsd	xmm0, QWORD PTR __real@4069000000000000
	movsd	xmm1, QWORD PTR _Yp$[ebp]
	subsd	xmm1, xmm0
	movsd	QWORD PTR _Zp$[ebp], xmm1

; 775  : 
; 776  :     if (pow(Xp, 3)>0.008856)

	movsd	xmm0, QWORD PTR _Xp$[ebp]
	movsd	xmm1, QWORD PTR __real@4008000000000000
	call	__libm_sse2_pow_precise
	comisd	xmm0, QWORD PTR __real@3f82231832fcac8e
	jbe	SHORT $LN2@CIELABtoXY

; 777  :         Xp = pow(Xp, 3);

	movsd	xmm0, QWORD PTR _Xp$[ebp]
	movsd	xmm1, QWORD PTR __real@4008000000000000
	call	__libm_sse2_pow_precise
	movsd	QWORD PTR _Xp$[ebp], xmm0

; 778  :     else

	jmp	SHORT $LN3@CIELABtoXY
$LN2@CIELABtoXY:

; 779  :         Xp = (Xp - (16 / 116) / 7.787);

	movsd	xmm0, QWORD PTR _Xp$[ebp]
	subsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _Xp$[ebp], xmm0
$LN3@CIELABtoXY:

; 780  :     if (pow(Yp, 3) > 0.008856)

	movsd	xmm0, QWORD PTR _Yp$[ebp]
	movsd	xmm1, QWORD PTR __real@4008000000000000
	call	__libm_sse2_pow_precise
	comisd	xmm0, QWORD PTR __real@3f82231832fcac8e
	jbe	SHORT $LN4@CIELABtoXY

; 781  :         Yp = pow(Yp, 3);

	movsd	xmm0, QWORD PTR _Yp$[ebp]
	movsd	xmm1, QWORD PTR __real@4008000000000000
	call	__libm_sse2_pow_precise
	movsd	QWORD PTR _Yp$[ebp], xmm0

; 782  :     else

	jmp	SHORT $LN5@CIELABtoXY
$LN4@CIELABtoXY:

; 783  :         Yp = (Yp - (16 / 116) / 7.787);

	movsd	xmm0, QWORD PTR _Yp$[ebp]
	subsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _Yp$[ebp], xmm0
$LN5@CIELABtoXY:

; 784  :     if (pow(Zp, 3) > 0.008856)

	movsd	xmm0, QWORD PTR _Zp$[ebp]
	movsd	xmm1, QWORD PTR __real@4008000000000000
	call	__libm_sse2_pow_precise
	comisd	xmm0, QWORD PTR __real@3f82231832fcac8e
	jbe	SHORT $LN6@CIELABtoXY

; 785  :         Zp = pow(Zp, 3);

	movsd	xmm0, QWORD PTR _Zp$[ebp]
	movsd	xmm1, QWORD PTR __real@4008000000000000
	call	__libm_sse2_pow_precise
	movsd	QWORD PTR _Zp$[ebp], xmm0

; 786  :     else

	jmp	SHORT $LN7@CIELABtoXY
$LN6@CIELABtoXY:

; 787  :         Zp = (Zp - (16 / 116) / 7.787);

	movsd	xmm0, QWORD PTR _Zp$[ebp]
	subsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _Zp$[ebp], xmm0
$LN7@CIELABtoXY:

; 788  : 
; 789  :     *X = RefX * Xp;

	movsd	xmm0, QWORD PTR __real@4057c3020c49ba5e
	mulsd	xmm0, QWORD PTR _Xp$[ebp]
	mov	eax, DWORD PTR _X$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 790  :     *Y = RefY * Yp;

	movsd	xmm0, QWORD PTR __real@4059000000000000
	mulsd	xmm0, QWORD PTR _Yp$[ebp]
	mov	ecx, DWORD PTR _Y$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 791  :     *Z = RefZ * Zp;

	movsd	xmm0, QWORD PTR __real@4059000000000000
	mulsd	xmm0, QWORD PTR _Zp$[ebp]
	mov	edx, DWORD PTR _Z$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 792  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_CIELABtoXYZ@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_Zp$ = -24						; size = 8
_Xp$ = -16						; size = 8
_Yp$ = -8						; size = 8
_X$ = 8							; size = 8
_Y$ = 16						; size = 8
_Z$ = 24						; size = 8
_L$ = 32						; size = 4
_A$ = 36						; size = 4
_B$ = 40						; size = 4
_XYZtoCIELab@36 PROC

; 748  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 749  :     double Xp = X / RefX;

	movsd	xmm0, QWORD PTR _X$[ebp]
	divsd	xmm0, QWORD PTR __real@4057c3020c49ba5e
	movsd	QWORD PTR _Xp$[ebp], xmm0

; 750  :     double Yp = Y / RefY;

	movsd	xmm0, QWORD PTR _Y$[ebp]
	divsd	xmm0, QWORD PTR __real@4059000000000000
	movsd	QWORD PTR _Yp$[ebp], xmm0

; 751  :     double Zp = Z / RefZ;

	movsd	xmm0, QWORD PTR _Z$[ebp]
	divsd	xmm0, QWORD PTR __real@4059000000000000
	movsd	QWORD PTR _Zp$[ebp], xmm0

; 752  : 
; 753  :     if (Xp < 0.008856)

	movsd	xmm0, QWORD PTR __real@3f82231832fcac8e
	comisd	xmm0, QWORD PTR _Xp$[ebp]
	jbe	SHORT $LN2@XYZtoCIELa

; 754  :         Xp = pow(Xp, (double)(1 / 3));

	movsd	xmm0, QWORD PTR _Xp$[ebp]
	xorps	xmm1, xmm1
	call	__libm_sse2_pow_precise
	movsd	QWORD PTR _Xp$[ebp], xmm0

; 755  :     else

	jmp	SHORT $LN3@XYZtoCIELa
$LN2@XYZtoCIELa:

; 756  :         Xp = (7.787 * Xp) + (16 / 116);

	movsd	xmm0, QWORD PTR __real@401f25e353f7ced9
	mulsd	xmm0, QWORD PTR _Xp$[ebp]
	addsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _Xp$[ebp], xmm0
$LN3@XYZtoCIELa:

; 757  :     if (Yp < 0.008856)

	movsd	xmm0, QWORD PTR __real@3f82231832fcac8e
	comisd	xmm0, QWORD PTR _Yp$[ebp]
	jbe	SHORT $LN4@XYZtoCIELa

; 758  :         Yp = pow(Yp, (double)(1 / 3));

	movsd	xmm0, QWORD PTR _Yp$[ebp]
	xorps	xmm1, xmm1
	call	__libm_sse2_pow_precise
	movsd	QWORD PTR _Yp$[ebp], xmm0

; 759  :     else

	jmp	SHORT $LN5@XYZtoCIELa
$LN4@XYZtoCIELa:

; 760  :         Yp = (7.787 * Yp) + (16 / 116);

	movsd	xmm0, QWORD PTR __real@401f25e353f7ced9
	mulsd	xmm0, QWORD PTR _Yp$[ebp]
	addsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _Yp$[ebp], xmm0
$LN5@XYZtoCIELa:

; 761  :     if (Zp < 0.008856)

	movsd	xmm0, QWORD PTR __real@3f82231832fcac8e
	comisd	xmm0, QWORD PTR _Zp$[ebp]
	jbe	SHORT $LN6@XYZtoCIELa

; 762  :         Zp = pow(Zp, (double)(1 / 3));

	movsd	xmm0, QWORD PTR _Zp$[ebp]
	xorps	xmm1, xmm1
	call	__libm_sse2_pow_precise
	movsd	QWORD PTR _Zp$[ebp], xmm0

; 763  :     else

	jmp	SHORT $LN7@XYZtoCIELa
$LN6@XYZtoCIELa:

; 764  :         Zp = (7.787 * Zp) + (16 / 116);

	movsd	xmm0, QWORD PTR __real@401f25e353f7ced9
	mulsd	xmm0, QWORD PTR _Zp$[ebp]
	addsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _Zp$[ebp], xmm0
$LN7@XYZtoCIELa:

; 765  :     *L = (116 * Yp) - 16;

	movsd	xmm0, QWORD PTR __real@405d000000000000
	mulsd	xmm0, QWORD PTR _Yp$[ebp]
	subsd	xmm0, QWORD PTR __real@4030000000000000
	mov	eax, DWORD PTR _L$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 766  :     *A = 500 * (Xp - Yp);

	movsd	xmm0, QWORD PTR _Xp$[ebp]
	subsd	xmm0, QWORD PTR _Yp$[ebp]
	mulsd	xmm0, QWORD PTR __real@407f400000000000
	mov	ecx, DWORD PTR _A$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 767  :     *B = 500 * (Yp - Zp);

	movsd	xmm0, QWORD PTR _Yp$[ebp]
	subsd	xmm0, QWORD PTR _Zp$[ebp]
	mulsd	xmm0, QWORD PTR __real@407f400000000000
	mov	edx, DWORD PTR _B$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 768  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_XYZtoCIELab@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_Cp$ = -24						; size = 8
_Mp$ = -16						; size = 8
_Yp$ = -8						; size = 8
_C$ = 8							; size = 8
_M$ = 16						; size = 8
_Y$ = 24						; size = 8
_K$ = 32						; size = 8
_R$ = 40						; size = 4
_G$ = 44						; size = 4
_B$ = 48						; size = 4
_CMYKtoRGB@44 PROC

; 737  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 738  :     double Cp, Mp, Yp;
; 739  :     CMYKtoCMY(C, M, Y, K, &Cp, &Mp, &Yp);

	lea	eax, DWORD PTR _Yp$[ebp]
	push	eax
	lea	ecx, DWORD PTR _Mp$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Cp$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _K$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _M$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _C$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_CMYKtoCMY@44

; 740  :     CMYtoRGB(Cp, Mp, Yp, R, G, B);

	mov	eax, DWORD PTR _B$[ebp]
	push	eax
	mov	ecx, DWORD PTR _G$[ebp]
	push	ecx
	mov	edx, DWORD PTR _R$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Yp$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Mp$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Cp$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_CMYtoRGB@36

; 741  : }

	mov	esp, ebp
	pop	ebp
	ret	44					; 0000002cH
_CMYKtoRGB@44 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_Kc$ = -88						; size = 8
_bn$ = -80						; size = 8
_gn$ = -72						; size = 8
_rn$ = -64						; size = 8
tv78 = -56						; size = 8
tv77 = -48						; size = 8
tv74 = -40						; size = 8
_Cc$ = -32						; size = 8
_Yc$ = -24						; size = 8
_Mc$ = -16						; size = 8
_Min$ = -8						; size = 8
_R$ = 8							; size = 8
_G$ = 16						; size = 8
_B$ = 24						; size = 8
_C$ = 32						; size = 4
_M$ = 36						; size = 4
_Y$ = 40						; size = 4
_K$ = 44						; size = 4
_RGBtoCMYK@40 PROC

; 709  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H

; 710  : 	/*
; 711  :     double Cp, Mp, Yp;
; 712  :     RGBtoCMY(R, G, B, &Cp, &Mp, &Yp);
; 713  :     CMYtoCMYK(Cp, Mp, Yp, C, M, Y, K);
; 714  : 	*/
; 715  : 	if (R == 0 && G == 0 && B == 0)

	movsd	xmm0, QWORD PTR _R$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@RGBtoCMYK
	movsd	xmm0, QWORD PTR _G$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@RGBtoCMYK
	movsd	xmm0, QWORD PTR _B$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@RGBtoCMYK

; 716  : 	{
; 717  : 		*C = 0.0;

	mov	eax, DWORD PTR _C$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [eax], xmm0

; 718  : 		*M = 0.0;

	mov	ecx, DWORD PTR _M$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0

; 719  : 		*Y = 0.0;

	mov	edx, DWORD PTR _Y$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx], xmm0

; 720  : 		*K = 1.0;

	mov	eax, DWORD PTR _K$[ebp]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [eax], xmm0

; 721  : 		return;

	jmp	$LN1@RGBtoCMYK
$LN2@RGBtoCMYK:

; 722  : 	}
; 723  : 	double rn = R / 255.0;

	movsd	xmm0, QWORD PTR _R$[ebp]
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	movsd	QWORD PTR _rn$[ebp], xmm0

; 724  : 	double gn = G / 255.0;

	movsd	xmm0, QWORD PTR _G$[ebp]
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	movsd	QWORD PTR _gn$[ebp], xmm0

; 725  : 	double bn = B / 255.0;

	movsd	xmm0, QWORD PTR _B$[ebp]
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	movsd	QWORD PTR _bn$[ebp], xmm0

; 726  : 	double Cc = 1.0 - rn;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR _rn$[ebp]
	movsd	QWORD PTR _Cc$[ebp], xmm0

; 727  : 	double Mc = 1.0 - gn;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR _gn$[ebp]
	movsd	QWORD PTR _Mc$[ebp], xmm0

; 728  : 	double Yc = 1.0 - bn;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR _bn$[ebp]
	movsd	QWORD PTR _Yc$[ebp], xmm0

; 729  : 	double Min = min(Cc, min(Mc, Yc));

	movsd	xmm0, QWORD PTR _Yc$[ebp]
	comisd	xmm0, QWORD PTR _Mc$[ebp]
	jbe	SHORT $LN4@RGBtoCMYK
	movsd	xmm0, QWORD PTR _Mc$[ebp]
	movsd	QWORD PTR tv74[ebp], xmm0
	jmp	SHORT $LN5@RGBtoCMYK
$LN4@RGBtoCMYK:
	movsd	xmm0, QWORD PTR _Yc$[ebp]
	movsd	QWORD PTR tv74[ebp], xmm0
$LN5@RGBtoCMYK:
	movsd	xmm0, QWORD PTR tv74[ebp]
	comisd	xmm0, QWORD PTR _Cc$[ebp]
	jbe	SHORT $LN8@RGBtoCMYK
	movsd	xmm0, QWORD PTR _Cc$[ebp]
	movsd	QWORD PTR tv78[ebp], xmm0
	jmp	SHORT $LN9@RGBtoCMYK
$LN8@RGBtoCMYK:
	movsd	xmm0, QWORD PTR _Yc$[ebp]
	comisd	xmm0, QWORD PTR _Mc$[ebp]
	jbe	SHORT $LN6@RGBtoCMYK
	movsd	xmm0, QWORD PTR _Mc$[ebp]
	movsd	QWORD PTR tv77[ebp], xmm0
	jmp	SHORT $LN7@RGBtoCMYK
$LN6@RGBtoCMYK:
	movsd	xmm0, QWORD PTR _Yc$[ebp]
	movsd	QWORD PTR tv77[ebp], xmm0
$LN7@RGBtoCMYK:
	movsd	xmm0, QWORD PTR tv77[ebp]
	movsd	QWORD PTR tv78[ebp], xmm0
$LN9@RGBtoCMYK:
	movsd	xmm0, QWORD PTR tv78[ebp]
	movsd	QWORD PTR _Min$[ebp], xmm0

; 730  : 	Cc = (Cc - Min) / (1 - Min);

	movsd	xmm0, QWORD PTR _Cc$[ebp]
	subsd	xmm0, QWORD PTR _Min$[ebp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, QWORD PTR _Min$[ebp]
	divsd	xmm0, xmm1
	movsd	QWORD PTR _Cc$[ebp], xmm0

; 731  : 	Mc = (Mc - Min) / (1 - Min);

	movsd	xmm0, QWORD PTR _Mc$[ebp]
	subsd	xmm0, QWORD PTR _Min$[ebp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, QWORD PTR _Min$[ebp]
	divsd	xmm0, xmm1
	movsd	QWORD PTR _Mc$[ebp], xmm0

; 732  : 	Yc = (Yc - Min) / (1 - Min);

	movsd	xmm0, QWORD PTR _Yc$[ebp]
	subsd	xmm0, QWORD PTR _Min$[ebp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, QWORD PTR _Min$[ebp]
	divsd	xmm0, xmm1
	movsd	QWORD PTR _Yc$[ebp], xmm0

; 733  : 	double Kc = Min;

	movsd	xmm0, QWORD PTR _Min$[ebp]
	movsd	QWORD PTR _Kc$[ebp], xmm0
$LN1@RGBtoCMYK:

; 734  : }

	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
_RGBtoCMYK@40 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_C$ = 8							; size = 8
_M$ = 16						; size = 8
_Y$ = 24						; size = 8
_K$ = 32						; size = 8
_Cp$ = 40						; size = 4
_Mp$ = 44						; size = 4
_Yp$ = 48						; size = 4
_CMYKtoCMY@44 PROC

; 702  : {

	push	ebp
	mov	ebp, esp

; 703  :     *Cp = (C * (1.0 - K)) + K;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR _K$[ebp]
	mulsd	xmm0, QWORD PTR _C$[ebp]
	addsd	xmm0, QWORD PTR _K$[ebp]
	mov	eax, DWORD PTR _Cp$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 704  :     *Mp = (M * (1.0 - K)) + K;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR _K$[ebp]
	mulsd	xmm0, QWORD PTR _M$[ebp]
	addsd	xmm0, QWORD PTR _K$[ebp]
	mov	ecx, DWORD PTR _Mp$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 705  :     *Yp = (Y * (1.0 - K)) + K;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR _K$[ebp]
	mulsd	xmm0, QWORD PTR _Y$[ebp]
	addsd	xmm0, QWORD PTR _K$[ebp]
	mov	edx, DWORD PTR _Yp$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 706  : }

	pop	ebp
	ret	44					; 0000002cH
_CMYKtoCMY@44 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_tK$ = -8						; size = 8
_C$ = 8							; size = 8
_M$ = 16						; size = 8
_Y$ = 24						; size = 8
_Cp$ = 32						; size = 4
_Mp$ = 36						; size = 4
_Yp$ = 40						; size = 4
_Kp$ = 44						; size = 4
_CMYtoCMYK@40 PROC

; 679  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 680  :     double tK = 1.0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _tK$[ebp], xmm0

; 681  :     if (C < tK)

	movsd	xmm0, QWORD PTR _tK$[ebp]
	comisd	xmm0, QWORD PTR _C$[ebp]
	jbe	SHORT $LN2@CMYtoCMYK

; 682  :         tK = C;

	movsd	xmm0, QWORD PTR _C$[ebp]
	movsd	QWORD PTR _tK$[ebp], xmm0
$LN2@CMYtoCMYK:

; 683  :     if (M < tK)

	movsd	xmm0, QWORD PTR _tK$[ebp]
	comisd	xmm0, QWORD PTR _M$[ebp]
	jbe	SHORT $LN3@CMYtoCMYK

; 684  :         tK = M;

	movsd	xmm0, QWORD PTR _M$[ebp]
	movsd	QWORD PTR _tK$[ebp], xmm0
$LN3@CMYtoCMYK:

; 685  :     if (Y < tK)

	movsd	xmm0, QWORD PTR _tK$[ebp]
	comisd	xmm0, QWORD PTR _Y$[ebp]
	jbe	SHORT $LN4@CMYtoCMYK

; 686  :         tK = Y;

	movsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	QWORD PTR _tK$[ebp], xmm0
$LN4@CMYtoCMYK:

; 687  :     if (tK == 0.0)

	movsd	xmm0, QWORD PTR _tK$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@CMYtoCMYK

; 688  :     {
; 689  :         *Cp = 0.0;

	mov	eax, DWORD PTR _Cp$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [eax], xmm0

; 690  :         *Mp = 0.0;

	mov	ecx, DWORD PTR _Mp$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0

; 691  :         *Yp = 0.0;

	mov	edx, DWORD PTR _Yp$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx], xmm0

; 692  :         *Kp = 0.0;

	mov	eax, DWORD PTR _Kp$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [eax], xmm0

; 693  :         return;

	jmp	SHORT $LN1@CMYtoCMYK
$LN5@CMYtoCMYK:

; 694  :     }
; 695  :     *Cp = (C - tK) / (1.0 - tK);

	movsd	xmm0, QWORD PTR _C$[ebp]
	subsd	xmm0, QWORD PTR _tK$[ebp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, QWORD PTR _tK$[ebp]
	divsd	xmm0, xmm1
	mov	ecx, DWORD PTR _Cp$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 696  :     *Mp = (M - tK) / (1.0 - tK);

	movsd	xmm0, QWORD PTR _M$[ebp]
	subsd	xmm0, QWORD PTR _tK$[ebp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, QWORD PTR _tK$[ebp]
	divsd	xmm0, xmm1
	mov	edx, DWORD PTR _Mp$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 697  :     *Yp = (Y - tK) / (1.0 - tK);

	movsd	xmm0, QWORD PTR _Y$[ebp]
	subsd	xmm0, QWORD PTR _tK$[ebp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, QWORD PTR _tK$[ebp]
	divsd	xmm0, xmm1
	mov	eax, DWORD PTR _Yp$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 698  :     *Kp = tK;

	mov	ecx, DWORD PTR _Kp$[ebp]
	movsd	xmm0, QWORD PTR _tK$[ebp]
	movsd	QWORD PTR [ecx], xmm0
$LN1@CMYtoCMYK:

; 699  : }

	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
_CMYtoCMYK@40 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_C$ = 8							; size = 8
_M$ = 16						; size = 8
_Y$ = 24						; size = 8
_R$ = 32						; size = 4
_G$ = 36						; size = 4
_B$ = 40						; size = 4
_CMYtoRGB@36 PROC

; 672  : {

	push	ebp
	mov	ebp, esp

; 673  :     *R = 1.0 - C;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR _C$[ebp]
	mov	eax, DWORD PTR _R$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 674  :     *G = 1.0 - M;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR _M$[ebp]
	mov	ecx, DWORD PTR _G$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 675  :     *B = 1.0 - Y;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR _Y$[ebp]
	mov	edx, DWORD PTR _B$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 676  : }

	pop	ebp
	ret	36					; 00000024H
_CMYtoRGB@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_R$ = 8							; size = 8
_G$ = 16						; size = 8
_B$ = 24						; size = 8
_C$ = 32						; size = 4
_M$ = 36						; size = 4
_Y$ = 40						; size = 4
_RGBtoCMY@36 PROC

; 665  : {

	push	ebp
	mov	ebp, esp

; 666  :     *C = 1.0 - R;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR _R$[ebp]
	mov	eax, DWORD PTR _C$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 667  :     *M = 1.0 - G;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR _G$[ebp]
	mov	ecx, DWORD PTR _M$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 668  :     *Y = 1.0 - B;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR _B$[ebp]
	mov	edx, DWORD PTR _Y$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 669  : }

	pop	ebp
	ret	36					; 00000024H
_RGBtoCMY@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_X$ = 8							; size = 8
_Y$ = 16						; size = 8
_Z$ = 24						; size = 8
_R$ = 32						; size = 4
_G$ = 36						; size = 4
_B$ = 40						; size = 4
_XYZtoRGB@36 PROC

; 658  : {

	push	ebp
	mov	ebp, esp

; 659  :     *R = (X * 3.240479) - (1.537150 * Y) - (0.498535 * Z);

	movsd	xmm0, QWORD PTR _X$[ebp]
	mulsd	xmm0, QWORD PTR __real@4009ec804102ff8f
	movsd	xmm1, QWORD PTR __real@3ff8982a9930be0e
	mulsd	xmm1, QWORD PTR _Y$[ebp]
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fdfe7ff583a53b9
	mulsd	xmm1, QWORD PTR _Z$[ebp]
	subsd	xmm0, xmm1
	mov	eax, DWORD PTR _R$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 660  :     *G = (X * -0.969256) + (1.875992 * Y) + (0.041556 * Z);

	movsd	xmm0, QWORD PTR _X$[ebp]
	mulsd	xmm0, QWORD PTR __real@bfef042528ae74f3
	movsd	xmm1, QWORD PTR __real@3ffe04102ff8ec10
	mulsd	xmm1, QWORD PTR _Y$[ebp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fa546d3f9e7b80b
	mulsd	xmm1, QWORD PTR _Z$[ebp]
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _G$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 661  :     *B = (X * 0.055648) - (0.204043 * Y) + (1.057311 * Z);

	movsd	xmm0, QWORD PTR _X$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fac7de5082cf52c
	movsd	xmm1, QWORD PTR __real@3fca1e14bdfd2631
	mulsd	xmm1, QWORD PTR _Y$[ebp]
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3ff0eabef06b3786
	mulsd	xmm1, QWORD PTR _Z$[ebp]
	addsd	xmm0, xmm1
	mov	edx, DWORD PTR _B$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 662  : }

	pop	ebp
	ret	36					; 00000024H
_XYZtoRGB@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_R$ = 8							; size = 8
_G$ = 16						; size = 8
_B$ = 24						; size = 8
_X$ = 32						; size = 4
_Y$ = 36						; size = 4
_Z$ = 40						; size = 4
_RGBtoXYZ@36 PROC

; 651  : {

	push	ebp
	mov	ebp, esp

; 652  :     *X = (R * 0.412456) + (G * 0.357580) + (B * 0.180423);

	movsd	xmm0, QWORD PTR _R$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fda65add9c27e95
	movsd	xmm1, QWORD PTR _G$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fd6e297396d0918
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _B$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fc71819d2391d58
	addsd	xmm0, xmm1
	mov	eax, DWORD PTR _X$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 653  :     *Y = (R * 0.212671) + (G * 0.715160) + (B * 0.072169);

	movsd	xmm0, QWORD PTR _R$[ebp]
	mulsd	xmm0, QWORD PTR __real@3fcb38cda6e75ff6
	movsd	xmm1, QWORD PTR _G$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fe6e297396d0918
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _B$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fb279aae6c8f755
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _Y$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 654  :     *Z = (R * 0.019334) + (G * 0.119193) + (B * 0.950227);

	movsd	xmm0, QWORD PTR _R$[ebp]
	mulsd	xmm0, QWORD PTR __real@3f93cc4ac6cdaf4b
	movsd	xmm1, QWORD PTR _G$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fbe836eb4e98138
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _B$[ebp]
	mulsd	xmm1, QWORD PTR __real@3fee68427418d691
	addsd	xmm0, xmm1
	mov	edx, DWORD PTR _Z$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 655  : }

	pop	ebp
	ret	36					; 00000024H
_RGBtoXYZ@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_Y$ = 8							; size = 8
_I$ = 16						; size = 8
_Q$ = 24						; size = 8
_R$ = 32						; size = 4
_G$ = 36						; size = 4
_B$ = 40						; size = 4
_YIQtoRGB@36 PROC

; 644  : {

	push	ebp
	mov	ebp, esp

; 645  :     *R = (1.0 * Y) + (0.9563 * I) + (0.6210 * Q);

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	mulsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	xmm1, QWORD PTR __real@3fee9a027525460b
	mulsd	xmm1, QWORD PTR _I$[ebp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fe3df3b645a1cac
	mulsd	xmm1, QWORD PTR _Q$[ebp]
	addsd	xmm0, xmm1
	mov	eax, DWORD PTR _R$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 646  :     *G = (1.0 * Y) - (0.2721 * I) - (0.6474 * Q);

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	mulsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	xmm1, QWORD PTR __real@3fd16a161e4f7660
	mulsd	xmm1, QWORD PTR _I$[ebp]
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fe4b780346dc5d6
	mulsd	xmm1, QWORD PTR _Q$[ebp]
	subsd	xmm0, xmm1
	mov	ecx, DWORD PTR _G$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 647  :     *B = (1.0 * Y) - (1.1070 * I) + (1.7046 * Q);

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	mulsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	xmm1, QWORD PTR __real@3ff1b645a1cac083
	mulsd	xmm1, QWORD PTR _I$[ebp]
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3ffb460aa64c2f83
	mulsd	xmm1, QWORD PTR _Q$[ebp]
	addsd	xmm0, xmm1
	mov	edx, DWORD PTR _B$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 648  : }

	pop	ebp
	ret	36					; 00000024H
_YIQtoRGB@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_R$ = 8							; size = 8
_G$ = 16						; size = 8
_B$ = 24						; size = 8
_Y$ = 32						; size = 4
_I$ = 36						; size = 4
_Q$ = 40						; size = 4
_RGBtoYIQ@36 PROC

; 637  : {

	push	ebp
	mov	ebp, esp

; 638  :     *Y = (0.299 * R) + (0.587 * G) + (0.114 * B);

	movsd	xmm0, QWORD PTR __real@3fd322d0e5604189
	mulsd	xmm0, QWORD PTR _R$[ebp]
	movsd	xmm1, QWORD PTR __real@3fe2c8b439581062
	mulsd	xmm1, QWORD PTR _G$[ebp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fbd2f1a9fbe76c9
	mulsd	xmm1, QWORD PTR _B$[ebp]
	addsd	xmm0, xmm1
	mov	eax, DWORD PTR _Y$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 639  :     *I = (0.596 * R) - (0.275 * G) - (0.321 * B);

	movsd	xmm0, QWORD PTR __real@3fe3126e978d4fdf
	mulsd	xmm0, QWORD PTR _R$[ebp]
	movsd	xmm1, QWORD PTR __real@3fd199999999999a
	mulsd	xmm1, QWORD PTR _G$[ebp]
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fd48b4395810625
	mulsd	xmm1, QWORD PTR _B$[ebp]
	subsd	xmm0, xmm1
	mov	ecx, DWORD PTR _I$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 640  :     *Q = (0.212 * R) - (0.523 * G) + (0.311 * B);

	movsd	xmm0, QWORD PTR __real@3fcb22d0e5604189
	mulsd	xmm0, QWORD PTR _R$[ebp]
	movsd	xmm1, QWORD PTR __real@3fe0bc6a7ef9db23
	mulsd	xmm1, QWORD PTR _G$[ebp]
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fd3e76c8b439581
	mulsd	xmm1, QWORD PTR _B$[ebp]
	addsd	xmm0, xmm1
	mov	edx, DWORD PTR _Q$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 641  : }

	pop	ebp
	ret	36					; 00000024H
_RGBtoYIQ@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_Fact$ = -40						; size = 8
_z$ = -32						; size = 8
_y$ = -24						; size = 8
_x$ = -16						; size = 8
tv80 = -8						; size = 4
_Sector$ = -4						; size = 4
_H$ = 8							; size = 8
_S$ = 16						; size = 8
_V$ = 24						; size = 8
_R$ = 32						; size = 4
_G$ = 36						; size = 4
_B$ = 40						; size = 4
_HSVtoRGB@36 PROC

; 405  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 406  :     if (S == 0.0)

	movsd	xmm0, QWORD PTR _S$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@HSVtoRGB

; 407  :     {
; 408  :         //Monochromatic
; 409  :         *R = *G = *B = V;

	mov	eax, DWORD PTR _B$[ebp]
	movsd	xmm0, QWORD PTR _V$[ebp]
	movsd	QWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _G$[ebp]
	movsd	xmm0, QWORD PTR _V$[ebp]
	movsd	QWORD PTR [ecx], xmm0
	mov	edx, DWORD PTR _R$[ebp]
	movsd	xmm0, QWORD PTR _V$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 410  :         return;

	jmp	$LN1@HSVtoRGB
$LN4@HSVtoRGB:

; 411  :     }
; 412  : 
; 413  :     H /= 60;

	movsd	xmm0, QWORD PTR _H$[ebp]
	divsd	xmm0, QWORD PTR __real@404e000000000000
	movsd	QWORD PTR _H$[ebp], xmm0

; 414  :     int Sector = floor(H);

	sub	esp, 8
	fld	QWORD PTR _H$[ebp]
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	call	__ftol2_sse
	mov	DWORD PTR _Sector$[ebp], eax

; 415  :     double Fact = H - Sector;

	cvtsi2sd xmm0, DWORD PTR _Sector$[ebp]
	movsd	xmm1, QWORD PTR _H$[ebp]
	subsd	xmm1, xmm0
	movsd	QWORD PTR _Fact$[ebp], xmm1

; 416  :     double x = V * (1 - S);

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR _S$[ebp]
	mulsd	xmm0, QWORD PTR _V$[ebp]
	movsd	QWORD PTR _x$[ebp], xmm0

; 417  :     double y = V * (1 - (S * Fact));

	movsd	xmm0, QWORD PTR _S$[ebp]
	mulsd	xmm0, QWORD PTR _Fact$[ebp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	mulsd	xmm1, QWORD PTR _V$[ebp]
	movsd	QWORD PTR _y$[ebp], xmm1

; 418  :     double z = V * (1 - (S * (1 - Fact)));

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR _Fact$[ebp]
	mulsd	xmm0, QWORD PTR _S$[ebp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	mulsd	xmm1, QWORD PTR _V$[ebp]
	movsd	QWORD PTR _z$[ebp], xmm1

; 419  : 
; 420  :     switch (Sector)

	mov	eax, DWORD PTR _Sector$[ebp]
	mov	DWORD PTR tv80[ebp], eax
	cmp	DWORD PTR tv80[ebp], 4
	ja	$LN10@HSVtoRGB
	mov	ecx, DWORD PTR tv80[ebp]
	jmp	DWORD PTR $LN12@HSVtoRGB[ecx*4]
$LN5@HSVtoRGB:

; 421  :     {
; 422  :     case 0:
; 423  :         *R = V;

	mov	edx, DWORD PTR _R$[ebp]
	movsd	xmm0, QWORD PTR _V$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 424  :         *G = z;

	mov	eax, DWORD PTR _G$[ebp]
	movsd	xmm0, QWORD PTR _z$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 425  :         *B = x;

	mov	ecx, DWORD PTR _B$[ebp]
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 426  :         break;

	jmp	$LN2@HSVtoRGB
$LN6@HSVtoRGB:

; 427  : 
; 428  :     case 1:
; 429  :         *R = y;

	mov	edx, DWORD PTR _R$[ebp]
	movsd	xmm0, QWORD PTR _y$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 430  :         *G = V;

	mov	eax, DWORD PTR _G$[ebp]
	movsd	xmm0, QWORD PTR _V$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 431  :         *B = x;

	mov	ecx, DWORD PTR _B$[ebp]
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 432  :         break;

	jmp	$LN2@HSVtoRGB
$LN7@HSVtoRGB:

; 433  : 
; 434  :     case 2:
; 435  :         *R = x;

	mov	edx, DWORD PTR _R$[ebp]
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 436  :         *G = V;

	mov	eax, DWORD PTR _G$[ebp]
	movsd	xmm0, QWORD PTR _V$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 437  :         *B = z;

	mov	ecx, DWORD PTR _B$[ebp]
	movsd	xmm0, QWORD PTR _z$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 438  :         break;

	jmp	SHORT $LN2@HSVtoRGB
$LN8@HSVtoRGB:

; 439  : 
; 440  :     case 3:
; 441  :         *R = x;

	mov	edx, DWORD PTR _R$[ebp]
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 442  :         *G = y;

	mov	eax, DWORD PTR _G$[ebp]
	movsd	xmm0, QWORD PTR _y$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 443  :         *B = V;

	mov	ecx, DWORD PTR _B$[ebp]
	movsd	xmm0, QWORD PTR _V$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 444  :         break;

	jmp	SHORT $LN2@HSVtoRGB
$LN9@HSVtoRGB:

; 445  : 
; 446  :     case 4:
; 447  :         *R = z;

	mov	edx, DWORD PTR _R$[ebp]
	movsd	xmm0, QWORD PTR _z$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 448  :         *G = y;

	mov	eax, DWORD PTR _G$[ebp]
	movsd	xmm0, QWORD PTR _y$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 449  :         *B = V;

	mov	ecx, DWORD PTR _B$[ebp]
	movsd	xmm0, QWORD PTR _V$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 450  :         break;

	jmp	SHORT $LN2@HSVtoRGB
$LN10@HSVtoRGB:

; 451  : 
; 452  :     default:
; 453  :         *R = V;

	mov	edx, DWORD PTR _R$[ebp]
	movsd	xmm0, QWORD PTR _V$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 454  :         *G = x;

	mov	eax, DWORD PTR _G$[ebp]
	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 455  :         *B = y;

	mov	ecx, DWORD PTR _B$[ebp]
	movsd	xmm0, QWORD PTR _y$[ebp]
	movsd	QWORD PTR [ecx], xmm0
$LN2@HSVtoRGB:
$LN1@HSVtoRGB:

; 456  :         break;
; 457  :     }
; 458  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
	npad	1
$LN12@HSVtoRGB:
	DD	$LN5@HSVtoRGB
	DD	$LN6@HSVtoRGB
	DD	$LN7@HSVtoRGB
	DD	$LN8@HSVtoRGB
	DD	$LN9@HSVtoRGB
_HSVtoRGB@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_Min$ = -72						; size = 8
tv75 = -64						; size = 8
tv74 = -56						; size = 8
tv71 = -48						; size = 8
tv69 = -40						; size = 8
tv68 = -32						; size = 8
tv65 = -24						; size = 8
_Delta$ = -16						; size = 8
_Max$ = -8						; size = 8
_R$ = 8							; size = 8
_G$ = 16						; size = 8
_B$ = 24						; size = 8
_H$ = 32						; size = 4
_S$ = 36						; size = 4
_V$ = 40						; size = 4
_RGBtoHSV@36 PROC

; 366  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H

; 367  :     double Min = min(R, min(G, B));

	movsd	xmm0, QWORD PTR _B$[ebp]
	comisd	xmm0, QWORD PTR _G$[ebp]
	jbe	SHORT $LN10@RGBtoHSV
	movsd	xmm0, QWORD PTR _G$[ebp]
	movsd	QWORD PTR tv65[ebp], xmm0
	jmp	SHORT $LN11@RGBtoHSV
$LN10@RGBtoHSV:
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR tv65[ebp], xmm0
$LN11@RGBtoHSV:
	movsd	xmm0, QWORD PTR tv65[ebp]
	comisd	xmm0, QWORD PTR _R$[ebp]
	jbe	SHORT $LN14@RGBtoHSV
	movsd	xmm0, QWORD PTR _R$[ebp]
	movsd	QWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN15@RGBtoHSV
$LN14@RGBtoHSV:
	movsd	xmm0, QWORD PTR _B$[ebp]
	comisd	xmm0, QWORD PTR _G$[ebp]
	jbe	SHORT $LN12@RGBtoHSV
	movsd	xmm0, QWORD PTR _G$[ebp]
	movsd	QWORD PTR tv68[ebp], xmm0
	jmp	SHORT $LN13@RGBtoHSV
$LN12@RGBtoHSV:
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR tv68[ebp], xmm0
$LN13@RGBtoHSV:
	movsd	xmm0, QWORD PTR tv68[ebp]
	movsd	QWORD PTR tv69[ebp], xmm0
$LN15@RGBtoHSV:
	movsd	xmm0, QWORD PTR tv69[ebp]
	movsd	QWORD PTR _Min$[ebp], xmm0

; 368  :     double Max = max(R, max(G, B));

	movsd	xmm0, QWORD PTR _G$[ebp]
	comisd	xmm0, QWORD PTR _B$[ebp]
	jbe	SHORT $LN16@RGBtoHSV
	movsd	xmm0, QWORD PTR _G$[ebp]
	movsd	QWORD PTR tv71[ebp], xmm0
	jmp	SHORT $LN17@RGBtoHSV
$LN16@RGBtoHSV:
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR tv71[ebp], xmm0
$LN17@RGBtoHSV:
	movsd	xmm0, QWORD PTR _R$[ebp]
	comisd	xmm0, QWORD PTR tv71[ebp]
	jbe	SHORT $LN20@RGBtoHSV
	movsd	xmm0, QWORD PTR _R$[ebp]
	movsd	QWORD PTR tv75[ebp], xmm0
	jmp	SHORT $LN21@RGBtoHSV
$LN20@RGBtoHSV:
	movsd	xmm0, QWORD PTR _G$[ebp]
	comisd	xmm0, QWORD PTR _B$[ebp]
	jbe	SHORT $LN18@RGBtoHSV
	movsd	xmm0, QWORD PTR _G$[ebp]
	movsd	QWORD PTR tv74[ebp], xmm0
	jmp	SHORT $LN19@RGBtoHSV
$LN18@RGBtoHSV:
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR tv74[ebp], xmm0
$LN19@RGBtoHSV:
	movsd	xmm0, QWORD PTR tv74[ebp]
	movsd	QWORD PTR tv75[ebp], xmm0
$LN21@RGBtoHSV:
	movsd	xmm0, QWORD PTR tv75[ebp]
	movsd	QWORD PTR _Max$[ebp], xmm0

; 369  :     *V = Max;

	mov	eax, DWORD PTR _V$[ebp]
	movsd	xmm0, QWORD PTR _Max$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 370  :     double Delta = Max - Min;

	movsd	xmm0, QWORD PTR _Max$[ebp]
	subsd	xmm0, QWORD PTR _Min$[ebp]
	movsd	QWORD PTR _Delta$[ebp], xmm0

; 371  :     if (Max != 0.0)

	movsd	xmm0, QWORD PTR _Max$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@RGBtoHSV

; 372  :         *S = Delta / Max;

	movsd	xmm0, QWORD PTR _Delta$[ebp]
	divsd	xmm0, QWORD PTR _Max$[ebp]
	mov	ecx, DWORD PTR _S$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 373  :     else

	jmp	SHORT $LN3@RGBtoHSV
$LN2@RGBtoHSV:

; 374  :     {
; 375  :         //Black
; 376  :         *S = 0.0;

	mov	edx, DWORD PTR _S$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx], xmm0

; 377  :         *H = -1;

	mov	eax, DWORD PTR _H$[ebp]
	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	QWORD PTR [eax], xmm0

; 378  :         return;

	jmp	$LN1@RGBtoHSV
$LN3@RGBtoHSV:

; 379  :     }
; 380  :     if (R == Max)

	movsd	xmm0, QWORD PTR _R$[ebp]
	ucomisd	xmm0, QWORD PTR _Max$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@RGBtoHSV

; 381  :         *H = (G - B) / Delta;

	movsd	xmm0, QWORD PTR _G$[ebp]
	subsd	xmm0, QWORD PTR _B$[ebp]
	divsd	xmm0, QWORD PTR _Delta$[ebp]
	mov	ecx, DWORD PTR _H$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 382  :     else

	jmp	SHORT $LN7@RGBtoHSV
$LN4@RGBtoHSV:

; 383  :         if (G == Max)

	movsd	xmm0, QWORD PTR _G$[ebp]
	ucomisd	xmm0, QWORD PTR _Max$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@RGBtoHSV

; 384  :             *H = 2 + ((B - R) / Delta);

	movsd	xmm0, QWORD PTR _B$[ebp]
	subsd	xmm0, QWORD PTR _R$[ebp]
	divsd	xmm0, QWORD PTR _Delta$[ebp]
	addsd	xmm0, QWORD PTR __real@4000000000000000
	mov	edx, DWORD PTR _H$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 385  :         else

	jmp	SHORT $LN7@RGBtoHSV
$LN6@RGBtoHSV:

; 386  :             *H = 4 + ((R - G) / Delta);

	movsd	xmm0, QWORD PTR _R$[ebp]
	subsd	xmm0, QWORD PTR _G$[ebp]
	divsd	xmm0, QWORD PTR _Delta$[ebp]
	addsd	xmm0, QWORD PTR __real@4010000000000000
	mov	eax, DWORD PTR _H$[ebp]
	movsd	QWORD PTR [eax], xmm0
$LN7@RGBtoHSV:

; 387  :     *H *= 60.0;

	mov	ecx, DWORD PTR _H$[ebp]
	movsd	xmm0, QWORD PTR [ecx]
	mulsd	xmm0, QWORD PTR __real@404e000000000000
	mov	edx, DWORD PTR _H$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 388  :     if (*H < 0.0)

	mov	eax, DWORD PTR _H$[ebp]
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR [eax]
	jbe	SHORT $LN8@RGBtoHSV

; 389  :         *H += 360.0;

	mov	ecx, DWORD PTR _H$[ebp]
	movsd	xmm0, QWORD PTR [ecx]
	addsd	xmm0, QWORD PTR __real@4076800000000000
	mov	edx, DWORD PTR _H$[ebp]
	movsd	QWORD PTR [edx], xmm0
$LN8@RGBtoHSV:
$LN1@RGBtoHSV:

; 390  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_RGBtoHSV@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_LB$ = -24						; size = 8
_LG$ = -16						; size = 8
_LR$ = -8						; size = 8
_H$ = 8							; size = 8
_S$ = 16						; size = 8
_L$ = 24						; size = 8
_R$ = 32						; size = 4
_G$ = 36						; size = 4
_B$ = 40						; size = 4
_HSLtoRGB2@36 PROC

; 204  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 205  :     double LR = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _LR$[ebp], xmm0

; 206  :     double LG = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _LG$[ebp], xmm0

; 207  :     double LB = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _LB$[ebp], xmm0

; 208  :     HSLtoRGB(H, S, L, &LR, &LG, &LB);

	lea	eax, DWORD PTR _LB$[ebp]
	push	eax
	lea	ecx, DWORD PTR _LG$[ebp]
	push	ecx
	lea	edx, DWORD PTR _LR$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _L$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _S$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _H$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_HSLtoRGB@36

; 209  :     *R = (BYTE)(255 * LR);

	movsd	xmm0, QWORD PTR __real@406fe00000000000
	mulsd	xmm0, QWORD PTR _LR$[ebp]
	cvttsd2si eax, xmm0
	mov	ecx, DWORD PTR _R$[ebp]
	mov	BYTE PTR [ecx], al

; 210  :     *G = (BYTE)(255 * LG);

	movsd	xmm0, QWORD PTR __real@406fe00000000000
	mulsd	xmm0, QWORD PTR _LG$[ebp]
	cvttsd2si edx, xmm0
	mov	eax, DWORD PTR _G$[ebp]
	mov	BYTE PTR [eax], dl

; 211  :     *B = (BYTE)(255 * LB);

	movsd	xmm0, QWORD PTR __real@406fe00000000000
	mulsd	xmm0, QWORD PTR _LB$[ebp]
	cvttsd2si ecx, xmm0
	mov	edx, DWORD PTR _B$[ebp]
	mov	BYTE PTR [edx], cl

; 212  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_HSLtoRGB2@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_X$ = -24						; size = 8
_C$ = -16						; size = 8
_m$ = -8						; size = 8
_H$ = 8							; size = 8
_S$ = 16						; size = 8
_L$ = 24						; size = 8
_R$ = 32						; size = 4
_G$ = 36						; size = 4
_B$ = 40						; size = 4
_HSLtoRGB@36 PROC

; 147  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 148  :     double C = (1 - fabs((2 * (L - 1)))) * S;

	movsd	xmm0, QWORD PTR _L$[ebp]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	andps	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	mulsd	xmm1, QWORD PTR _S$[ebp]
	movsd	QWORD PTR _C$[ebp], xmm1

; 149  :     double X = C * (1 - fabs((double)((int)(H / 60.0) % 2 - 1)));

	movsd	xmm0, QWORD PTR _H$[ebp]
	divsd	xmm0, QWORD PTR __real@404e000000000000
	cvttsd2si eax, xmm0
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN9@HSLtoRGB
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN9@HSLtoRGB:
	sub	eax, 1
	cvtsi2sd xmm0, eax
	andps	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	mulsd	xmm1, QWORD PTR _C$[ebp]
	movsd	QWORD PTR _X$[ebp], xmm1

; 150  :     double m = L - (C / 2.0);

	movsd	xmm0, QWORD PTR _C$[ebp]
	divsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	xmm1, QWORD PTR _L$[ebp]
	subsd	xmm1, xmm0
	movsd	QWORD PTR _m$[ebp], xmm1

; 151  :     if ((H <= 0.0) && (H < 60.0))

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _H$[ebp]
	jb	SHORT $LN2@HSLtoRGB
	movsd	xmm0, QWORD PTR __real@404e000000000000
	comisd	xmm0, QWORD PTR _H$[ebp]
	jbe	SHORT $LN2@HSLtoRGB

; 152  :     {
; 153  :         *R = C + m;

	movsd	xmm0, QWORD PTR _C$[ebp]
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 154  :         *G = X + m;

	movsd	xmm0, QWORD PTR _X$[ebp]
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _G$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 155  :         *B = m;

	mov	eax, DWORD PTR _B$[ebp]
	movsd	xmm0, QWORD PTR _m$[ebp]
	movsd	QWORD PTR [eax], xmm0
$LN2@HSLtoRGB:

; 156  :     }
; 157  :    // if ((H <= 60.0) && (H < 120.0))
; 158  :         if ((H >= 60.0) && (H < 120.0))

	movsd	xmm0, QWORD PTR _H$[ebp]
	comisd	xmm0, QWORD PTR __real@404e000000000000
	jb	SHORT $LN3@HSLtoRGB
	movsd	xmm0, QWORD PTR __real@405e000000000000
	comisd	xmm0, QWORD PTR _H$[ebp]
	jbe	SHORT $LN3@HSLtoRGB

; 159  :     {
; 160  :         *R = X + m;

	movsd	xmm0, QWORD PTR _X$[ebp]
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 161  :         *G = C + m;

	movsd	xmm0, QWORD PTR _C$[ebp]
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _G$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 162  :         *B = 0 + m;

	xorps	xmm0, xmm0
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _B$[ebp]
	movsd	QWORD PTR [eax], xmm0
$LN3@HSLtoRGB:

; 163  :     }
; 164  : //    if ((H <= 120.0) && (H < 180.0))
; 165  :         if ((H >= 120.0) && (H < 180.0))

	movsd	xmm0, QWORD PTR _H$[ebp]
	comisd	xmm0, QWORD PTR __real@405e000000000000
	jb	SHORT $LN4@HSLtoRGB
	movsd	xmm0, QWORD PTR __real@4066800000000000
	comisd	xmm0, QWORD PTR _H$[ebp]
	jbe	SHORT $LN4@HSLtoRGB

; 166  :     {
; 167  :         *R = 0 + m;

	xorps	xmm0, xmm0
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 168  :         *G = C + m;

	movsd	xmm0, QWORD PTR _C$[ebp]
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _G$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 169  :         *B = X + m;

	movsd	xmm0, QWORD PTR _X$[ebp]
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _B$[ebp]
	movsd	QWORD PTR [eax], xmm0
$LN4@HSLtoRGB:

; 170  :     }
; 171  : //    if ((H <= 180.0) && (H < 240.0))
; 172  :         if ((H >= 180.0) && (H < 240.0))

	movsd	xmm0, QWORD PTR _H$[ebp]
	comisd	xmm0, QWORD PTR __real@4066800000000000
	jb	SHORT $LN5@HSLtoRGB
	movsd	xmm0, QWORD PTR __real@406e000000000000
	comisd	xmm0, QWORD PTR _H$[ebp]
	jbe	SHORT $LN5@HSLtoRGB

; 173  :     {
; 174  :         *R = 0 + m;

	xorps	xmm0, xmm0
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 175  :         *G = X + m;

	movsd	xmm0, QWORD PTR _X$[ebp]
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _G$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 176  :         *B = C + m;

	movsd	xmm0, QWORD PTR _C$[ebp]
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _B$[ebp]
	movsd	QWORD PTR [eax], xmm0
$LN5@HSLtoRGB:

; 177  :     }
; 178  :   //  if ((H <= 240.0) && (H < 300.0))
; 179  :         if ((H >= 240.0) && (H < 300.0))

	movsd	xmm0, QWORD PTR _H$[ebp]
	comisd	xmm0, QWORD PTR __real@406e000000000000
	jb	SHORT $LN6@HSLtoRGB
	movsd	xmm0, QWORD PTR __real@4072c00000000000
	comisd	xmm0, QWORD PTR _H$[ebp]
	jbe	SHORT $LN6@HSLtoRGB

; 180  :     {
; 181  :         *R = X + m;

	movsd	xmm0, QWORD PTR _X$[ebp]
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 182  :         *G = 0 + m;

	xorps	xmm0, xmm0
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _G$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 183  :         *B = C + m;

	movsd	xmm0, QWORD PTR _C$[ebp]
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _B$[ebp]
	movsd	QWORD PTR [eax], xmm0
$LN6@HSLtoRGB:

; 184  :     }
; 185  : //    if ((H <= 300.0) && (H < 360.0))
; 186  :         if ((H >= 300.0) && (H < 360.0))

	movsd	xmm0, QWORD PTR _H$[ebp]
	comisd	xmm0, QWORD PTR __real@4072c00000000000
	jb	SHORT $LN7@HSLtoRGB
	movsd	xmm0, QWORD PTR __real@4076800000000000
	comisd	xmm0, QWORD PTR _H$[ebp]
	jbe	SHORT $LN7@HSLtoRGB

; 187  :     {
; 188  :         *R = C + m;

	movsd	xmm0, QWORD PTR _C$[ebp]
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _R$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 189  :         *G = 0 + m;

	xorps	xmm0, xmm0
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _G$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 190  :         *B = X + m;

	movsd	xmm0, QWORD PTR _X$[ebp]
	addsd	xmm0, QWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _B$[ebp]
	movsd	QWORD PTR [eax], xmm0
$LN7@HSLtoRGB:

; 191  :     }
; 192  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_HSLtoRGB@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_R$ = 8							; size = 1
_G$ = 12						; size = 1
_B$ = 16						; size = 1
_H$ = 20						; size = 4
_S$ = 24						; size = 4
_L$ = 28						; size = 4
_RGBtoHSL2@24 PROC

; 121  : {

	push	ebp
	mov	ebp, esp

; 122  :     RGBtoHSL((double)R / 255.0, (double)G / 255.0, (double)B / 255.0, H, S, L);

	mov	eax, DWORD PTR _L$[ebp]
	push	eax
	mov	ecx, DWORD PTR _S$[ebp]
	push	ecx
	mov	edx, DWORD PTR _H$[ebp]
	push	edx
	movzx	eax, BYTE PTR _B$[ebp]
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movzx	ecx, BYTE PTR _G$[ebp]
	cvtsi2sd xmm0, ecx
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	movzx	edx, BYTE PTR _R$[ebp]
	cvtsi2sd xmm0, edx
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_RGBtoHSL@36

; 123  : }

	pop	ebp
	ret	24					; 00000018H
_RGBtoHSL2@24 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
tv196 = -88						; size = 8
tv190 = -80						; size = 8
_Min$ = -72						; size = 8
tv75 = -64						; size = 8
tv74 = -56						; size = 8
tv71 = -48						; size = 8
tv69 = -40						; size = 8
tv68 = -32						; size = 8
tv65 = -24						; size = 8
_Delta$ = -16						; size = 8
_Max$ = -8						; size = 8
_R$ = 8							; size = 8
_G$ = 16						; size = 8
_B$ = 24						; size = 8
_H$ = 32						; size = 4
_S$ = 36						; size = 4
_L$ = 40						; size = 4
_RGBtoHSL@36 PROC

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H

; 78   : 	double Max = max(R, max(G, B));

	movsd	xmm0, QWORD PTR _G$[ebp]
	comisd	xmm0, QWORD PTR _B$[ebp]
	jbe	SHORT $LN10@RGBtoHSL
	movsd	xmm0, QWORD PTR _G$[ebp]
	movsd	QWORD PTR tv65[ebp], xmm0
	jmp	SHORT $LN11@RGBtoHSL
$LN10@RGBtoHSL:
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR tv65[ebp], xmm0
$LN11@RGBtoHSL:
	movsd	xmm0, QWORD PTR _R$[ebp]
	comisd	xmm0, QWORD PTR tv65[ebp]
	jbe	SHORT $LN14@RGBtoHSL
	movsd	xmm0, QWORD PTR _R$[ebp]
	movsd	QWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN15@RGBtoHSL
$LN14@RGBtoHSL:
	movsd	xmm0, QWORD PTR _G$[ebp]
	comisd	xmm0, QWORD PTR _B$[ebp]
	jbe	SHORT $LN12@RGBtoHSL
	movsd	xmm0, QWORD PTR _G$[ebp]
	movsd	QWORD PTR tv68[ebp], xmm0
	jmp	SHORT $LN13@RGBtoHSL
$LN12@RGBtoHSL:
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR tv68[ebp], xmm0
$LN13@RGBtoHSL:
	movsd	xmm0, QWORD PTR tv68[ebp]
	movsd	QWORD PTR tv69[ebp], xmm0
$LN15@RGBtoHSL:
	movsd	xmm0, QWORD PTR tv69[ebp]
	movsd	QWORD PTR _Max$[ebp], xmm0

; 79   : 	double Min = min(R, min(G, B));

	movsd	xmm0, QWORD PTR _B$[ebp]
	comisd	xmm0, QWORD PTR _G$[ebp]
	jbe	SHORT $LN16@RGBtoHSL
	movsd	xmm0, QWORD PTR _G$[ebp]
	movsd	QWORD PTR tv71[ebp], xmm0
	jmp	SHORT $LN17@RGBtoHSL
$LN16@RGBtoHSL:
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR tv71[ebp], xmm0
$LN17@RGBtoHSL:
	movsd	xmm0, QWORD PTR tv71[ebp]
	comisd	xmm0, QWORD PTR _R$[ebp]
	jbe	SHORT $LN20@RGBtoHSL
	movsd	xmm0, QWORD PTR _R$[ebp]
	movsd	QWORD PTR tv75[ebp], xmm0
	jmp	SHORT $LN21@RGBtoHSL
$LN20@RGBtoHSL:
	movsd	xmm0, QWORD PTR _B$[ebp]
	comisd	xmm0, QWORD PTR _G$[ebp]
	jbe	SHORT $LN18@RGBtoHSL
	movsd	xmm0, QWORD PTR _G$[ebp]
	movsd	QWORD PTR tv74[ebp], xmm0
	jmp	SHORT $LN19@RGBtoHSL
$LN18@RGBtoHSL:
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR tv74[ebp], xmm0
$LN19@RGBtoHSL:
	movsd	xmm0, QWORD PTR tv74[ebp]
	movsd	QWORD PTR tv75[ebp], xmm0
$LN21@RGBtoHSL:
	movsd	xmm0, QWORD PTR tv75[ebp]
	movsd	QWORD PTR _Min$[ebp], xmm0

; 80   : 	*L = (Max + Min) / 2.0;

	movsd	xmm0, QWORD PTR _Max$[ebp]
	addsd	xmm0, QWORD PTR _Min$[ebp]
	divsd	xmm0, QWORD PTR __real@4000000000000000
	mov	eax, DWORD PTR _L$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 81   : 	double Delta = Max - Min;

	movsd	xmm0, QWORD PTR _Max$[ebp]
	subsd	xmm0, QWORD PTR _Min$[ebp]
	movsd	QWORD PTR _Delta$[ebp], xmm0

; 82   : 	*S = 0.0;

	mov	ecx, DWORD PTR _S$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0

; 83   : 	*H = 0.0;

	mov	edx, DWORD PTR _H$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx], xmm0

; 84   : 	if (Delta == 0)

	movsd	xmm0, QWORD PTR _Delta$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@RGBtoHSL

; 85   : 	{
; 86   : 		*H = 0.0;

	mov	eax, DWORD PTR _H$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [eax], xmm0

; 87   : 		*S = 0.0;

	mov	ecx, DWORD PTR _S$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0

; 88   : 	}
; 89   : 	else

	jmp	$LN6@RGBtoHSL
$LN2@RGBtoHSL:

; 90   : 	{
; 91   : 		*S = Delta / (1.0 - fabs((2.0 * *L) - 1.0));

	mov	edx, DWORD PTR _L$[ebp]
	movsd	xmm0, QWORD PTR __real@4000000000000000
	mulsd	xmm0, QWORD PTR [edx]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	andps	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	movsd	xmm0, QWORD PTR _Delta$[ebp]
	divsd	xmm0, xmm1
	mov	eax, DWORD PTR _S$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 92   : 		if (Max == R)

	movsd	xmm0, QWORD PTR _Max$[ebp]
	ucomisd	xmm0, QWORD PTR _R$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@RGBtoHSL

; 93   : 		{
; 94   : 			*H = 60.0 * fmod(((G - B) / Delta), 6.0);

	movsd	xmm0, QWORD PTR _G$[ebp]
	subsd	xmm0, QWORD PTR _B$[ebp]
	divsd	xmm0, QWORD PTR _Delta$[ebp]
	movsd	QWORD PTR tv190[ebp], xmm0
	fld	QWORD PTR tv190[ebp]
	fld	QWORD PTR __real@4018000000000000
	call	__CIfmod
	fstp	QWORD PTR tv196[ebp]
	movsd	xmm0, QWORD PTR tv196[ebp]
	mulsd	xmm0, QWORD PTR __real@404e000000000000
	mov	ecx, DWORD PTR _H$[ebp]
	movsd	QWORD PTR [ecx], xmm0
$LN4@RGBtoHSL:

; 95   : 		}
; 96   : 		if (Max == G)

	movsd	xmm0, QWORD PTR _Max$[ebp]
	ucomisd	xmm0, QWORD PTR _G$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@RGBtoHSL

; 97   : 		{
; 98   : 			*H = 60.0 * (((B - R) / Delta) + 2.0);

	movsd	xmm0, QWORD PTR _B$[ebp]
	subsd	xmm0, QWORD PTR _R$[ebp]
	divsd	xmm0, QWORD PTR _Delta$[ebp]
	addsd	xmm0, QWORD PTR __real@4000000000000000
	mulsd	xmm0, QWORD PTR __real@404e000000000000
	mov	edx, DWORD PTR _H$[ebp]
	movsd	QWORD PTR [edx], xmm0
$LN5@RGBtoHSL:

; 99   : 		}
; 100  : 		if (Max == B)

	movsd	xmm0, QWORD PTR _Max$[ebp]
	ucomisd	xmm0, QWORD PTR _B$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@RGBtoHSL

; 101  : 		{
; 102  : 			*H = 60.0 * (((R - G) / Delta) + 4.0);

	movsd	xmm0, QWORD PTR _R$[ebp]
	subsd	xmm0, QWORD PTR _G$[ebp]
	divsd	xmm0, QWORD PTR _Delta$[ebp]
	addsd	xmm0, QWORD PTR __real@4010000000000000
	mulsd	xmm0, QWORD PTR __real@404e000000000000
	mov	eax, DWORD PTR _H$[ebp]
	movsd	QWORD PTR [eax], xmm0
$LN6@RGBtoHSL:

; 103  : 		}
; 104  : 	}
; 105  : 	if (*H < 0.0)

	mov	ecx, DWORD PTR _H$[ebp]
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR [ecx]
	jbe	SHORT $LN7@RGBtoHSL

; 106  : 		*H = 0.0;

	mov	edx, DWORD PTR _H$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx], xmm0
$LN7@RGBtoHSL:

; 107  : 	if (*H > 360.0)

	mov	eax, DWORD PTR _H$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	comisd	xmm0, QWORD PTR __real@4076800000000000
	jbe	SHORT $LN8@RGBtoHSL

; 108  : 		*H = 360.0;

	mov	ecx, DWORD PTR _H$[ebp]
	movsd	xmm0, QWORD PTR __real@4076800000000000
	movsd	QWORD PTR [ecx], xmm0
$LN8@RGBtoHSL:

; 109  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_RGBtoHSL@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_R$ = 8							; size = 8
_G$ = 16						; size = 8
_B$ = 24						; size = 8
_Y$ = 32						; size = 4
_Cb$ = 36						; size = 4
_Cr$ = 40						; size = 4
_RGBtoYCbCr@36 PROC

; 61   : {

	push	ebp
	mov	ebp, esp

; 62   :     *Y = (double)(R * (77 / 255)) + (G * (150 / 255)) + (B * (29 / 255));

	movsd	xmm0, QWORD PTR _R$[ebp]
	mulsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	xmm1, QWORD PTR _G$[ebp]
	mulsd	xmm1, QWORD PTR __real@0000000000000000
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _B$[ebp]
	mulsd	xmm1, QWORD PTR __real@0000000000000000
	addsd	xmm0, xmm1
	mov	eax, DWORD PTR _Y$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 63   :     *Cb = (double)(R * (44 / 255)) - (G * (87 / 255)) + (B * (131 / 255)) + 128;

	movsd	xmm0, QWORD PTR _R$[ebp]
	mulsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	xmm1, QWORD PTR _G$[ebp]
	mulsd	xmm1, QWORD PTR __real@0000000000000000
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _B$[ebp]
	mulsd	xmm1, QWORD PTR __real@0000000000000000
	addsd	xmm0, xmm1
	addsd	xmm0, QWORD PTR __real@4060000000000000
	mov	ecx, DWORD PTR _Cb$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 64   :     *Cr = (double)(R * (131 / 255)) - (G * (110 / 255)) - (B * (21 / 255)) + 128;

	movsd	xmm0, QWORD PTR _R$[ebp]
	mulsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	xmm1, QWORD PTR _G$[ebp]
	mulsd	xmm1, QWORD PTR __real@0000000000000000
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR _B$[ebp]
	mulsd	xmm1, QWORD PTR __real@0000000000000000
	subsd	xmm0, xmm1
	addsd	xmm0, QWORD PTR __real@4060000000000000
	mov	edx, DWORD PTR _Cr$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 65   : }

	pop	ebp
	ret	36					; 00000024H
_RGBtoYCbCr@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_Y$ = 8							; size = 8
_Cb$ = 16						; size = 8
_Cr$ = 24						; size = 8
_R$ = 32						; size = 4
_G$ = 36						; size = 4
_B$ = 40						; size = 4
_YCbCrtoRGB@36 PROC

; 45   : {

	push	ebp
	mov	ebp, esp

; 46   :     *R = Y + (1.371 * (Cr - 128));

	movsd	xmm0, QWORD PTR _Cr$[ebp]
	subsd	xmm0, QWORD PTR __real@4060000000000000
	mulsd	xmm0, QWORD PTR __real@3ff5ef9db22d0e56
	addsd	xmm0, QWORD PTR _Y$[ebp]
	mov	eax, DWORD PTR _R$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 47   :     *G = Y - (0.698 * (Cr - 128)) - (0.336 * (Cb - 128));

	movsd	xmm0, QWORD PTR _Cr$[ebp]
	subsd	xmm0, QWORD PTR __real@4060000000000000
	mulsd	xmm0, QWORD PTR __real@3fe65604189374bc
	movsd	xmm1, QWORD PTR _Y$[ebp]
	subsd	xmm1, xmm0
	movsd	xmm0, QWORD PTR _Cb$[ebp]
	subsd	xmm0, QWORD PTR __real@4060000000000000
	mulsd	xmm0, QWORD PTR __real@3fd5810624dd2f1b
	subsd	xmm1, xmm0
	mov	ecx, DWORD PTR _G$[ebp]
	movsd	QWORD PTR [ecx], xmm1

; 48   :     *B = Y + (1.732 * (Cr - 128));

	movsd	xmm0, QWORD PTR _Cr$[ebp]
	subsd	xmm0, QWORD PTR __real@4060000000000000
	mulsd	xmm0, QWORD PTR __real@3ffbb645a1cac083
	addsd	xmm0, QWORD PTR _Y$[ebp]
	mov	edx, DWORD PTR _B$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 49   : }

	pop	ebp
	ret	36					; 00000024H
_YCbCrtoRGB@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_g$ = -32						; size = 8
_x$ = -24						; size = 8
_r$ = -16						; size = 8
_k$ = -8						; size = 8
_T$ = 8							; size = 8
_S$ = 16						; size = 8
_L$ = 24						; size = 8
_R$ = 32						; size = 4
_G$ = 36						; size = 4
_B$ = 40						; size = 4
_TSLtoRGB@36 PROC

; 586  : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 32					; 00000020H

; 587  :     double x = -(1.0 / tan(2.0 * 3.1415 * T));

	movsd	xmm0, QWORD PTR __real@401921cac083126f
	mulsd	xmm0, QWORD PTR _T$[ebp]
	call	__libm_sse2_tan_precise
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR _x$[esp+32], xmm1

; 588  :     double g = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _g$[esp+32], xmm0

; 589  :     if (T == 0.0)

	movsd	xmm0, QWORD PTR _T$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@TSLtoRGB

; 590  :     {
; 591  :         g = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _g$[esp+32], xmm0

; 592  :     }
; 593  :     else

	jmp	$LN6@TSLtoRGB
$LN2@TSLtoRGB:

; 594  :     {
; 595  :         if (T > 0.5)

	movsd	xmm0, QWORD PTR _T$[ebp]
	comisd	xmm0, QWORD PTR __real@3fe0000000000000
	jbe	SHORT $LN4@TSLtoRGB

; 596  :         {
; 597  :             g = -(sqrt(5.0 / (9.0 * ((x * x) + 1)))) * S;

	movsd	xmm0, QWORD PTR _x$[esp+32]
	mulsd	xmm0, QWORD PTR _x$[esp+32]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	mulsd	xmm0, QWORD PTR __real@4022000000000000
	movsd	xmm1, QWORD PTR __real@4014000000000000
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	call	__libm_sse2_sqrt_precise
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mulsd	xmm0, QWORD PTR _S$[ebp]
	movsd	QWORD PTR _g$[esp+32], xmm0

; 598  :         }
; 599  :         else

	jmp	SHORT $LN6@TSLtoRGB
$LN4@TSLtoRGB:

; 600  :         {
; 601  :             if (T < 0.5)

	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	comisd	xmm0, QWORD PTR _T$[ebp]
	jbe	SHORT $LN6@TSLtoRGB

; 602  :             {
; 603  :                 g = (sqrt(5.0 / (9.0 * ((x * x) + 1)))) * S;

	movsd	xmm0, QWORD PTR _x$[esp+32]
	mulsd	xmm0, QWORD PTR _x$[esp+32]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	mulsd	xmm0, QWORD PTR __real@4022000000000000
	movsd	xmm1, QWORD PTR __real@4014000000000000
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	call	__libm_sse2_sqrt_precise
	mulsd	xmm0, QWORD PTR _S$[ebp]
	movsd	QWORD PTR _g$[esp+32], xmm0
$LN6@TSLtoRGB:

; 604  :             }
; 605  :         }
; 606  :     }
; 607  :     double r = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _r$[esp+32], xmm0

; 608  :     if (T == 0.0)

	movsd	xmm0, QWORD PTR _T$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN7@TSLtoRGB

; 609  :     {
; 610  :         r = (sqrt(5.0) / 3.0)* S;

	movsd	xmm0, QWORD PTR __real@4014000000000000
	call	__libm_sse2_sqrt_precise
	divsd	xmm0, QWORD PTR __real@4008000000000000
	mulsd	xmm0, QWORD PTR _S$[ebp]
	movsd	QWORD PTR _r$[esp+32], xmm0

; 611  :     }
; 612  :     else

	jmp	SHORT $LN8@TSLtoRGB
$LN7@TSLtoRGB:

; 613  :     {
; 614  :         r = (x * g) + (1.0 / 3.0);

	movsd	xmm0, QWORD PTR _x$[esp+32]
	mulsd	xmm0, QWORD PTR _g$[esp+32]
	addsd	xmm0, QWORD PTR __real@3fd5555555555555
	movsd	QWORD PTR _r$[esp+32], xmm0
$LN8@TSLtoRGB:

; 615  :     }
; 616  :     double k = L / ((0.185 * r) + (0.473 * g) + (0.114));

	movsd	xmm0, QWORD PTR __real@3fc7ae147ae147ae
	mulsd	xmm0, QWORD PTR _r$[esp+32]
	movsd	xmm1, QWORD PTR __real@3fde45a1cac08312
	mulsd	xmm1, QWORD PTR _g$[esp+32]
	addsd	xmm0, xmm1
	addsd	xmm0, QWORD PTR __real@3fbd2f1a9fbe76c9
	movsd	xmm1, QWORD PTR _L$[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _k$[esp+32], xmm1

; 617  :     *R = k * r;

	movsd	xmm0, QWORD PTR _k$[esp+32]
	mulsd	xmm0, QWORD PTR _r$[esp+32]
	mov	eax, DWORD PTR _R$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 618  :     *G = k * g;

	movsd	xmm0, QWORD PTR _k$[esp+32]
	mulsd	xmm0, QWORD PTR _g$[esp+32]
	mov	ecx, DWORD PTR _G$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 619  :     *B = k * (1.0 - r - g);

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR _r$[esp+32]
	subsd	xmm0, QWORD PTR _g$[esp+32]
	mulsd	xmm0, QWORD PTR _k$[esp+32]
	mov	edx, DWORD PTR _B$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 620  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_TSLtoRGB@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
tv150 = -16						; size = 8
tv141 = -8						; size = 8
_R$ = 8							; size = 8
_G$ = 16						; size = 8
_B$ = 24						; size = 8
_T$ = 32						; size = 4
_S$ = 36						; size = 4
_L$ = 40						; size = 4
_RGBtoTSL@36 PROC

; 564  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 565  :     *T = 0.0;

	mov	eax, DWORD PTR _T$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [eax], xmm0

; 566  :     if (G == 0.0)

	movsd	xmm0, QWORD PTR _G$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@RGBtoTSL

; 567  :     {
; 568  :         *T = 0.0;

	mov	ecx, DWORD PTR _T$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [ecx], xmm0

; 569  :     }
; 570  :     else

	jmp	$LN5@RGBtoTSL
$LN2@RGBtoTSL:

; 571  :     {
; 572  :         if (G > 0.0)

	movsd	xmm0, QWORD PTR _G$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN4@RGBtoTSL

; 573  :         {
; 574  :             *T = (1.0 / (2.0 * 3.1415)) * (atanf((R / G) + (1.0 / 4.0)));

	movsd	xmm0, QWORD PTR _R$[ebp]
	divsd	xmm0, QWORD PTR _G$[ebp]
	addsd	xmm0, QWORD PTR __real@3fd0000000000000
	cvtsd2ss xmm0, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	fstp	QWORD PTR tv141[ebp]
	movsd	xmm0, QWORD PTR tv141[ebp]
	mulsd	xmm0, QWORD PTR __real@3fc45f57ce20d722
	mov	edx, DWORD PTR _T$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 575  :         }
; 576  :         else

	jmp	SHORT $LN5@RGBtoTSL
$LN4@RGBtoTSL:

; 577  :         {
; 578  :             *T = (1.0 / (2.0 * 3.1415))*(atanf((R / G + (3.0 / 4.0))));

	movsd	xmm0, QWORD PTR _R$[ebp]
	divsd	xmm0, QWORD PTR _G$[ebp]
	addsd	xmm0, QWORD PTR __real@3fe8000000000000
	cvtsd2ss xmm0, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_atanf
	add	esp, 4
	fstp	QWORD PTR tv150[ebp]
	movsd	xmm0, QWORD PTR tv150[ebp]
	mulsd	xmm0, QWORD PTR __real@3fc45f57ce20d722
	mov	eax, DWORD PTR _T$[ebp]
	movsd	QWORD PTR [eax], xmm0
$LN5@RGBtoTSL:

; 579  :         }
; 580  :     }
; 581  :     *S = sqrtf((9.0 / 5.0) * ((R * R) + (G * G)));

	movsd	xmm0, QWORD PTR _R$[ebp]
	mulsd	xmm0, QWORD PTR _R$[ebp]
	movsd	xmm1, QWORD PTR _G$[ebp]
	mulsd	xmm1, QWORD PTR _G$[ebp]
	addsd	xmm0, xmm1
	mulsd	xmm0, QWORD PTR __real@3ffccccccccccccd
	cvtsd2ss xmm0, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	mov	ecx, DWORD PTR _S$[ebp]
	fstp	QWORD PTR [ecx]

; 582  :     *L = (0.299 * R) + (0.587 * G) + (0.114 * B);

	movsd	xmm0, QWORD PTR __real@3fd322d0e5604189
	mulsd	xmm0, QWORD PTR _R$[ebp]
	movsd	xmm1, QWORD PTR __real@3fe2c8b439581062
	mulsd	xmm1, QWORD PTR _G$[ebp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fbd2f1a9fbe76c9
	mulsd	xmm1, QWORD PTR _B$[ebp]
	addsd	xmm0, xmm1
	mov	edx, DWORD PTR _L$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 583  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_RGBtoTSL@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_R$ = 8							; size = 8
_G$ = 16						; size = 8
_B$ = 24						; size = 8
_Y$ = 32						; size = 4
_Db$ = 36						; size = 4
_Dr$ = 40						; size = 4
_RGBtoYDbDr@36 PROC

; 527  : {

	push	ebp
	mov	ebp, esp

; 528  :     *Y = (0.299 * R) + (0.587 * G) + (0.114 * B);

	movsd	xmm0, QWORD PTR __real@3fd322d0e5604189
	mulsd	xmm0, QWORD PTR _R$[ebp]
	movsd	xmm1, QWORD PTR __real@3fe2c8b439581062
	mulsd	xmm1, QWORD PTR _G$[ebp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fbd2f1a9fbe76c9
	mulsd	xmm1, QWORD PTR _B$[ebp]
	addsd	xmm0, xmm1
	mov	eax, DWORD PTR _Y$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 529  :     *Db = (-0.450 * R) - (0.833 * G) + (1.333 * B);

	movsd	xmm0, QWORD PTR __real@bfdccccccccccccd
	mulsd	xmm0, QWORD PTR _R$[ebp]
	movsd	xmm1, QWORD PTR __real@3feaa7ef9db22d0e
	mulsd	xmm1, QWORD PTR _G$[ebp]
	subsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3ff553f7ced91687
	mulsd	xmm1, QWORD PTR _B$[ebp]
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _Db$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 530  :     *Dr = (-1.333 * R) + (1.116 * G) + (0.217 * B);

	movsd	xmm0, QWORD PTR __real@bff553f7ced91687
	mulsd	xmm0, QWORD PTR _R$[ebp]
	movsd	xmm1, QWORD PTR __real@3ff1db22d0e56042
	mulsd	xmm1, QWORD PTR _G$[ebp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fcbc6a7ef9db22d
	mulsd	xmm1, QWORD PTR _B$[ebp]
	addsd	xmm0, xmm1
	mov	edx, DWORD PTR _Dr$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 531  : }

	pop	ebp
	ret	36					; 00000024H
_RGBtoYDbDr@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_Y$ = 8							; size = 8
_Db$ = 16						; size = 8
_Dr$ = 24						; size = 8
_R$ = 32						; size = 4
_G$ = 36						; size = 4
_B$ = 40						; size = 4
_YDbDrToRGB@36 PROC

; 534  : {

	push	ebp
	mov	ebp, esp

; 535  :     *R = Y + (0.000092303716148 * Db) - (0.525912630661865 * Dr);

	movsd	xmm0, QWORD PTR __real@3f183265c4c442df
	mulsd	xmm0, QWORD PTR _Db$[ebp]
	addsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	xmm1, QWORD PTR __real@3fe0d446b9a7df89
	mulsd	xmm1, QWORD PTR _Dr$[ebp]
	subsd	xmm0, xmm1
	mov	eax, DWORD PTR _R$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 536  :     *G = Y - (0.129132898890590 * Db) + (0.267899328207599 * Dr);

	movsd	xmm0, QWORD PTR __real@3fc0876d44c95028
	mulsd	xmm0, QWORD PTR _Db$[ebp]
	movsd	xmm1, QWORD PTR _Y$[ebp]
	subsd	xmm1, xmm0
	movsd	xmm0, QWORD PTR __real@3fd1254339516894
	mulsd	xmm0, QWORD PTR _Dr$[ebp]
	addsd	xmm1, xmm0
	mov	ecx, DWORD PTR _G$[ebp]
	movsd	QWORD PTR [ecx], xmm1

; 537  :     *B = Y + (0.66479059978955 * Db) - (0.000079202543533 * Dr);

	movsd	xmm0, QWORD PTR __real@3fe545f6ef991954
	mulsd	xmm0, QWORD PTR _Db$[ebp]
	addsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	xmm1, QWORD PTR __real@3f14c331564180ea
	mulsd	xmm1, QWORD PTR _Dr$[ebp]
	subsd	xmm0, xmm1
	mov	edx, DWORD PTR _B$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 538  : }

	pop	ebp
	ret	36					; 00000024H
_YDbDrToRGB@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_scratch$ = -8						; size = 8
_Y$ = 8							; size = 8
_Cg$ = 16						; size = 8
_Co$ = 24						; size = 8
_R$ = 32						; size = 4
_G$ = 36						; size = 4
_B$ = 40						; size = 4
_YCgCotoRGB@36 PROC

; 550  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 551  :     double scratch = Y - Cg;

	movsd	xmm0, QWORD PTR _Y$[ebp]
	subsd	xmm0, QWORD PTR _Cg$[ebp]
	movsd	QWORD PTR _scratch$[ebp], xmm0

; 552  :     *R = scratch + Co;

	movsd	xmm0, QWORD PTR _scratch$[ebp]
	addsd	xmm0, QWORD PTR _Co$[ebp]
	mov	eax, DWORD PTR _R$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 553  :     *G = Y + Cg;

	movsd	xmm0, QWORD PTR _Y$[ebp]
	addsd	xmm0, QWORD PTR _Cg$[ebp]
	mov	ecx, DWORD PTR _G$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 554  :     *B = scratch - Co;

	movsd	xmm0, QWORD PTR _scratch$[ebp]
	subsd	xmm0, QWORD PTR _Co$[ebp]
	mov	edx, DWORD PTR _B$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 555  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_YCgCotoRGB@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_R$ = 8							; size = 8
_G$ = 16						; size = 8
_B$ = 24						; size = 8
_Y$ = 32						; size = 4
_Cg$ = 36						; size = 4
_Co$ = 40						; size = 4
_RGBtoYCgCo@36 PROC

; 543  : {

	push	ebp
	mov	ebp, esp

; 544  :     *Y = (0.25 * R) + (0.5 * G) + (0.5 * B);

	movsd	xmm0, QWORD PTR __real@3fd0000000000000
	mulsd	xmm0, QWORD PTR _R$[ebp]
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm1, QWORD PTR _G$[ebp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm1, QWORD PTR _B$[ebp]
	addsd	xmm0, xmm1
	mov	eax, DWORD PTR _Y$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 545  :     *Cg = -(0.25 * R) + (0.5 * G) - (0.5 * B);

	movsd	xmm0, QWORD PTR __real@3fd0000000000000
	mulsd	xmm0, QWORD PTR _R$[ebp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm1, QWORD PTR _G$[ebp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm1, QWORD PTR _B$[ebp]
	subsd	xmm0, xmm1
	mov	ecx, DWORD PTR _Cg$[ebp]
	movsd	QWORD PTR [ecx], xmm0

; 546  :     *Co = (0.5 * R) - (0.5 * B);

	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	mulsd	xmm0, QWORD PTR _R$[ebp]
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	mulsd	xmm1, QWORD PTR _B$[ebp]
	subsd	xmm0, xmm1
	mov	edx, DWORD PTR _Co$[ebp]
	movsd	QWORD PTR [edx], xmm0

; 547  : }

	pop	ebp
	ret	36					; 00000024H
_RGBtoYCgCo@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
tv221 = -168						; size = 8
tv213 = -160						; size = 8
tv205 = -152						; size = 8
_MaxGreen$ = -144					; size = 8
_MaxYellow$ = -136					; size = 8
tv94 = -128						; size = 8
tv93 = -120						; size = 8
tv90 = -112						; size = 8
tv80 = -104						; size = 8
tv78 = -96						; size = 8
tv77 = -88						; size = 8
tv74 = -80						; size = 8
tv69 = -72						; size = 8
tv68 = -64						; size = 8
tv65 = -56						; size = 8
_lN$1 = -48						; size = 8
_White$ = -40						; size = 8
_lY$ = -32						; size = 8
_lR$ = -24						; size = 8
_lG$ = -16						; size = 8
_lB$ = -8						; size = 8
_R$ = 8							; size = 8
_G$ = 16						; size = 8
_B$ = 24						; size = 8
_Rp$ = 32						; size = 4
_Yp$ = 36						; size = 4
_Bp$ = 40						; size = 4
_RGBtoRYB@36 PROC

; 469  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 168				; 000000a8H

; 470  :     double White = min(R, min(R, B));

	movsd	xmm0, QWORD PTR _B$[ebp]
	comisd	xmm0, QWORD PTR _R$[ebp]
	jbe	SHORT $LN5@RGBtoRYB
	movsd	xmm0, QWORD PTR _R$[ebp]
	movsd	QWORD PTR tv65[ebp], xmm0
	jmp	SHORT $LN6@RGBtoRYB
$LN5@RGBtoRYB:
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR tv65[ebp], xmm0
$LN6@RGBtoRYB:
	movsd	xmm0, QWORD PTR tv65[ebp]
	comisd	xmm0, QWORD PTR _R$[ebp]
	jbe	SHORT $LN9@RGBtoRYB
	movsd	xmm0, QWORD PTR _R$[ebp]
	movsd	QWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN10@RGBtoRYB
$LN9@RGBtoRYB:
	movsd	xmm0, QWORD PTR _B$[ebp]
	comisd	xmm0, QWORD PTR _R$[ebp]
	jbe	SHORT $LN7@RGBtoRYB
	movsd	xmm0, QWORD PTR _R$[ebp]
	movsd	QWORD PTR tv68[ebp], xmm0
	jmp	SHORT $LN8@RGBtoRYB
$LN7@RGBtoRYB:
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR tv68[ebp], xmm0
$LN8@RGBtoRYB:
	movsd	xmm0, QWORD PTR tv68[ebp]
	movsd	QWORD PTR tv69[ebp], xmm0
$LN10@RGBtoRYB:
	movsd	xmm0, QWORD PTR tv69[ebp]
	movsd	QWORD PTR _White$[ebp], xmm0

; 471  :     double lR = R - White;

	movsd	xmm0, QWORD PTR _R$[ebp]
	subsd	xmm0, QWORD PTR _White$[ebp]
	movsd	QWORD PTR _lR$[ebp], xmm0

; 472  :     double lG = G - White;

	movsd	xmm0, QWORD PTR _G$[ebp]
	subsd	xmm0, QWORD PTR _White$[ebp]
	movsd	QWORD PTR _lG$[ebp], xmm0

; 473  :     double lB = B - White;

	movsd	xmm0, QWORD PTR _B$[ebp]
	subsd	xmm0, QWORD PTR _White$[ebp]
	movsd	QWORD PTR _lB$[ebp], xmm0

; 474  :     double MaxGreen = max(lR, max(lG, lB));

	movsd	xmm0, QWORD PTR _lG$[ebp]
	comisd	xmm0, QWORD PTR _lB$[ebp]
	jbe	SHORT $LN11@RGBtoRYB
	movsd	xmm0, QWORD PTR _lG$[ebp]
	movsd	QWORD PTR tv74[ebp], xmm0
	jmp	SHORT $LN12@RGBtoRYB
$LN11@RGBtoRYB:
	movsd	xmm0, QWORD PTR _lB$[ebp]
	movsd	QWORD PTR tv74[ebp], xmm0
$LN12@RGBtoRYB:
	movsd	xmm0, QWORD PTR _lR$[ebp]
	comisd	xmm0, QWORD PTR tv74[ebp]
	jbe	SHORT $LN15@RGBtoRYB
	movsd	xmm0, QWORD PTR _lR$[ebp]
	movsd	QWORD PTR tv78[ebp], xmm0
	jmp	SHORT $LN16@RGBtoRYB
$LN15@RGBtoRYB:
	movsd	xmm0, QWORD PTR _lG$[ebp]
	comisd	xmm0, QWORD PTR _lB$[ebp]
	jbe	SHORT $LN13@RGBtoRYB
	movsd	xmm0, QWORD PTR _lG$[ebp]
	movsd	QWORD PTR tv77[ebp], xmm0
	jmp	SHORT $LN14@RGBtoRYB
$LN13@RGBtoRYB:
	movsd	xmm0, QWORD PTR _lB$[ebp]
	movsd	QWORD PTR tv77[ebp], xmm0
$LN14@RGBtoRYB:
	movsd	xmm0, QWORD PTR tv77[ebp]
	movsd	QWORD PTR tv78[ebp], xmm0
$LN16@RGBtoRYB:
	movsd	xmm0, QWORD PTR tv78[ebp]
	movsd	QWORD PTR _MaxGreen$[ebp], xmm0

; 475  :     double lY = min(lR, lG);

	movsd	xmm0, QWORD PTR _lG$[ebp]
	comisd	xmm0, QWORD PTR _lR$[ebp]
	jbe	SHORT $LN17@RGBtoRYB
	movsd	xmm0, QWORD PTR _lR$[ebp]
	movsd	QWORD PTR tv80[ebp], xmm0
	jmp	SHORT $LN18@RGBtoRYB
$LN17@RGBtoRYB:
	movsd	xmm0, QWORD PTR _lG$[ebp]
	movsd	QWORD PTR tv80[ebp], xmm0
$LN18@RGBtoRYB:
	movsd	xmm0, QWORD PTR tv80[ebp]
	movsd	QWORD PTR _lY$[ebp], xmm0

; 476  :     lR -= lY;

	movsd	xmm0, QWORD PTR _lR$[ebp]
	subsd	xmm0, QWORD PTR _lY$[ebp]
	movsd	QWORD PTR _lR$[ebp], xmm0

; 477  :     lG -= lY;

	movsd	xmm0, QWORD PTR _lG$[ebp]
	subsd	xmm0, QWORD PTR _lY$[ebp]
	movsd	QWORD PTR _lG$[ebp], xmm0

; 478  :     if (lB > 0.0 && lG > 0.0)

	movsd	xmm0, QWORD PTR _lB$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN2@RGBtoRYB
	movsd	xmm0, QWORD PTR _lG$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN2@RGBtoRYB

; 479  :     {
; 480  :         lG /= 2.0;

	movsd	xmm0, QWORD PTR _lG$[ebp]
	divsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR _lG$[ebp], xmm0

; 481  :         lB /= 2.0;

	movsd	xmm0, QWORD PTR _lB$[ebp]
	divsd	xmm0, QWORD PTR __real@4000000000000000
	movsd	QWORD PTR _lB$[ebp], xmm0
$LN2@RGBtoRYB:

; 482  :     }
; 483  :     lY += lG;

	movsd	xmm0, QWORD PTR _lY$[ebp]
	addsd	xmm0, QWORD PTR _lG$[ebp]
	movsd	QWORD PTR _lY$[ebp], xmm0

; 484  :     lB += lG;

	movsd	xmm0, QWORD PTR _lB$[ebp]
	addsd	xmm0, QWORD PTR _lG$[ebp]
	movsd	QWORD PTR _lB$[ebp], xmm0

; 485  :     double MaxYellow = max(lR, max(lY, lB));

	movsd	xmm0, QWORD PTR _lY$[ebp]
	comisd	xmm0, QWORD PTR _lB$[ebp]
	jbe	SHORT $LN19@RGBtoRYB
	movsd	xmm0, QWORD PTR _lY$[ebp]
	movsd	QWORD PTR tv90[ebp], xmm0
	jmp	SHORT $LN20@RGBtoRYB
$LN19@RGBtoRYB:
	movsd	xmm0, QWORD PTR _lB$[ebp]
	movsd	QWORD PTR tv90[ebp], xmm0
$LN20@RGBtoRYB:
	movsd	xmm0, QWORD PTR _lR$[ebp]
	comisd	xmm0, QWORD PTR tv90[ebp]
	jbe	SHORT $LN23@RGBtoRYB
	movsd	xmm0, QWORD PTR _lR$[ebp]
	movsd	QWORD PTR tv94[ebp], xmm0
	jmp	SHORT $LN24@RGBtoRYB
$LN23@RGBtoRYB:
	movsd	xmm0, QWORD PTR _lY$[ebp]
	comisd	xmm0, QWORD PTR _lB$[ebp]
	jbe	SHORT $LN21@RGBtoRYB
	movsd	xmm0, QWORD PTR _lY$[ebp]
	movsd	QWORD PTR tv93[ebp], xmm0
	jmp	SHORT $LN22@RGBtoRYB
$LN21@RGBtoRYB:
	movsd	xmm0, QWORD PTR _lB$[ebp]
	movsd	QWORD PTR tv93[ebp], xmm0
$LN22@RGBtoRYB:
	movsd	xmm0, QWORD PTR tv93[ebp]
	movsd	QWORD PTR tv94[ebp], xmm0
$LN24@RGBtoRYB:
	movsd	xmm0, QWORD PTR tv94[ebp]
	movsd	QWORD PTR _MaxYellow$[ebp], xmm0

; 486  :     if (MaxYellow > 0.0)

	movsd	xmm0, QWORD PTR _MaxYellow$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN3@RGBtoRYB

; 487  :     {
; 488  :         double lN = MaxGreen / MaxYellow;

	movsd	xmm0, QWORD PTR _MaxGreen$[ebp]
	divsd	xmm0, QWORD PTR _MaxYellow$[ebp]
	movsd	QWORD PTR _lN$1[ebp], xmm0

; 489  :         lR *= lN;

	movsd	xmm0, QWORD PTR _lR$[ebp]
	mulsd	xmm0, QWORD PTR _lN$1[ebp]
	movsd	QWORD PTR _lR$[ebp], xmm0

; 490  :         lY *= lN;

	movsd	xmm0, QWORD PTR _lY$[ebp]
	mulsd	xmm0, QWORD PTR _lN$1[ebp]
	movsd	QWORD PTR _lY$[ebp], xmm0

; 491  :         lB *= lN;

	movsd	xmm0, QWORD PTR _lB$[ebp]
	mulsd	xmm0, QWORD PTR _lN$1[ebp]
	movsd	QWORD PTR _lB$[ebp], xmm0
$LN3@RGBtoRYB:

; 492  :     }
; 493  :     *Rp = floor(lR + White);

	movsd	xmm0, QWORD PTR _lR$[ebp]
	addsd	xmm0, QWORD PTR _White$[ebp]
	movsd	QWORD PTR tv205[ebp], xmm0
	fld	QWORD PTR tv205[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	mov	eax, DWORD PTR _Rp$[ebp]
	fstp	QWORD PTR [eax]

; 494  :     *Yp = floor(lY + White);

	movsd	xmm0, QWORD PTR _lY$[ebp]
	addsd	xmm0, QWORD PTR _White$[ebp]
	movsd	QWORD PTR tv213[ebp], xmm0
	fld	QWORD PTR tv213[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	mov	ecx, DWORD PTR _Yp$[ebp]
	fstp	QWORD PTR [ecx]

; 495  :     *Bp = floor(lB + White);

	movsd	xmm0, QWORD PTR _lB$[ebp]
	addsd	xmm0, QWORD PTR _White$[ebp]
	movsd	QWORD PTR tv221[ebp], xmm0
	fld	QWORD PTR tv221[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_floor
	add	esp, 8
	mov	edx, DWORD PTR _Bp$[ebp]
	fstp	QWORD PTR [edx]

; 496  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_RGBtoRYB@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_y0$ = -48						; size = 8
_y1$ = -40						; size = 8
_x2$ = -32						; size = 8
_x3$ = -24						; size = 8
_x0$ = -16						; size = 8
_x1$ = -8						; size = 8
_R$ = 8							; size = 8
_Y$ = 16						; size = 8
_B$ = 24						; size = 8
_Rp$ = 32						; size = 4
_Gp$ = 36						; size = 4
_Bp$ = 40						; size = 4
_RYBtoRGB@36 PROC

; 499  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H

; 500  :     double x0, x1, x2, x3, y0, y1;
; 501  :     x0 = CubicInt(B, 1.0, 0.163);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3fc4dd2f1a9fbe77
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _x0$[ebp]

; 502  :     x1 = CubicInt(B, 1.0, 0.0);

	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _x1$[ebp]

; 503  :     x2 = CubicInt(B, 1.0, 0.5);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _x2$[ebp]

; 504  :     x3 = CubicInt(B, 1.0, 0.2);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3fc999999999999a
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _x3$[ebp]

; 505  :     y0 = CubicInt(Y, x0, x1);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _x1$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x0$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _y0$[ebp]

; 506  :     y1 = CubicInt(Y, x2, x3);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _x3$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x2$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _y1$[ebp]

; 507  :     *Rp = CubicInt(R, y0, y1);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _y1$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _y0$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _R$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	mov	eax, DWORD PTR _Rp$[ebp]
	fstp	QWORD PTR [eax]

; 508  : 
; 509  :     x0 = CubicInt(B, 1.0f, 0.373f);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3fd7df3b60000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _x0$[ebp]

; 510  :     x1 = CubicInt(B, 1.0f, 0.66f);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3fe51eb860000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _x1$[ebp]

; 511  :     x2 = CubicInt(B, 0.0f, 0.0f);

	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _x2$[ebp]

; 512  :     x3 = CubicInt(B, 0.5f, 0.094f);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3fb8106240000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _x3$[ebp]

; 513  :     y0 = CubicInt(Y, x0, x1);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _x1$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x0$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _y0$[ebp]

; 514  :     y1 = CubicInt(Y, x2, x3);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _x3$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x2$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _y1$[ebp]

; 515  :     *Gp = CubicInt(R, y0, y1);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _y1$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _y0$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _R$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	mov	ecx, DWORD PTR _Gp$[ebp]
	fstp	QWORD PTR [ecx]

; 516  : 
; 517  :     x0 = CubicInt(B, 1.0f, 0.6f);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3fe3333340000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _x0$[ebp]

; 518  :     x1 = CubicInt(B, 0.0f, 0.2f);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3fc99999a0000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _x1$[ebp]

; 519  :     x2 = CubicInt(B, 0.0f, 0.5f);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _x2$[ebp]

; 520  :     x3 = CubicInt(B, 0.0f, 0.0f);

	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _B$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _x3$[ebp]

; 521  :     y0 = CubicInt(Y, x0, x1);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _x1$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x0$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _y0$[ebp]

; 522  :     y1 = CubicInt(Y, x2, x3);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _x3$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _x2$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _Y$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	fstp	QWORD PTR _y1$[ebp]

; 523  :     *Bp = CubicInt(R, y0, y1);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _y1$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _y0$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _R$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?CubicInt@@YGNNNN@Z			; CubicInt
	mov	edx, DWORD PTR _Bp$[ebp]
	fstp	QWORD PTR [edx]

; 524  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
_RYBtoRGB@36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
_Lum$ = -8						; size = 8
_R$ = 8							; size = 1
_G$ = 12						; size = 1
_B$ = 16						; size = 1
_Perceived$ = 20					; size = 4
?NormalizedColorLuminance@@YGNEEEH@Z PROC		; NormalizedColorLuminance

; 965  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 966  :     double Lum = ColorLuminance2(R, G, B, Perceived);

	mov	eax, DWORD PTR _Perceived$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _B$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _G$[ebp]
	push	edx
	movzx	eax, BYTE PTR _R$[ebp]
	push	eax
	call	_ColorLuminance2@16
	fstp	QWORD PTR _Lum$[ebp]

; 967  :     Lum = Lum / 255.0;

	movsd	xmm0, QWORD PTR _Lum$[ebp]
	divsd	xmm0, QWORD PTR __real@406fe00000000000
	movsd	QWORD PTR _Lum$[ebp], xmm0

; 968  :     return Lum;

	fld	QWORD PTR _Lum$[ebp]

; 969  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?NormalizedColorLuminance@@YGNEEEH@Z ENDP		; NormalizedColorLuminance
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\stuart\desktop\projects4\colorblend\colorblender\colors.cpp
_TEXT	SEGMENT
tv158 = -40						; size = 8
tv140 = -32						; size = 8
tv154 = -24						; size = 4
tv149 = -20						; size = 4
tv144 = -16						; size = 4
tv136 = -12						; size = 4
tv131 = -8						; size = 4
tv94 = -4						; size = 4
_PackedColor$ = 8					; size = 4
_Perceived$ = 12					; size = 4
?ColorLuminance3@@YGNIH@Z PROC				; ColorLuminance3

; 972  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 973  :     if (Perceived)

	cmp	DWORD PTR _Perceived$[ebp], 0
	je	$LN2@ColorLumin

; 974  :     {
; 975  :         return ((double)((PackedColor & 0x00ff0000) >> 16) * 0.299) + ((double)((PackedColor & 0x0000ff00) >> 8) * 0.587) + ((double)((PackedColor & 0x000000ff) >> 0) * 0.114);

	mov	eax, DWORD PTR _PackedColor$[ebp]
	and	eax, 16711680				; 00ff0000H
	shr	eax, 16					; 00000010H
	mov	DWORD PTR tv94[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv94[ebp]
	mov	ecx, DWORD PTR tv94[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	mulsd	xmm0, QWORD PTR __real@3fd322d0e5604189
	mov	edx, DWORD PTR _PackedColor$[ebp]
	and	edx, 65280				; 0000ff00H
	shr	edx, 8
	mov	DWORD PTR tv131[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv131[ebp]
	mov	eax, DWORD PTR tv131[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	mulsd	xmm1, QWORD PTR __real@3fe2c8b439581062
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _PackedColor$[ebp]
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR tv136[ebp], ecx
	cvtsi2sd xmm1, DWORD PTR tv136[ebp]
	mov	edx, DWORD PTR tv136[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	mulsd	xmm1, QWORD PTR __real@3fbd2f1a9fbe76c9
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv140[ebp], xmm0
	fld	QWORD PTR tv140[ebp]
	jmp	$LN3@ColorLumin

; 976  :     }
; 977  :     else

	jmp	$LN3@ColorLumin
$LN2@ColorLumin:

; 978  :     {
; 979  :         return ((double)((PackedColor & 0x00ff0000) >> 16) * 0.2126) + ((double)((PackedColor & 0x0000ff00) >> 8) * 0.7152) + ((double)((PackedColor & 0x000000ff) >> 0) * 0.0722);

	mov	eax, DWORD PTR _PackedColor$[ebp]
	and	eax, 16711680				; 00ff0000H
	shr	eax, 16					; 00000010H
	mov	DWORD PTR tv144[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv144[ebp]
	mov	ecx, DWORD PTR tv144[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	mulsd	xmm0, QWORD PTR __real@3fcb367a0f9096bc
	mov	edx, DWORD PTR _PackedColor$[ebp]
	and	edx, 65280				; 0000ff00H
	shr	edx, 8
	mov	DWORD PTR tv149[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv149[ebp]
	mov	eax, DWORD PTR tv149[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	mulsd	xmm1, QWORD PTR __real@3fe6e2eb1c432ca5
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _PackedColor$[ebp]
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR tv154[ebp], ecx
	cvtsi2sd xmm1, DWORD PTR tv154[ebp]
	mov	edx, DWORD PTR tv154[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	mulsd	xmm1, QWORD PTR __real@3fb27bb2fec56d5d
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv158[ebp], xmm0
	fld	QWORD PTR tv158[ebp]
$LN3@ColorLumin:

; 980  :     }
; 981  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ColorLuminance3@@YGNIH@Z ENDP				; ColorLuminance3
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 758  :         {

	push	ebp
	mov	ebp, esp
	push	ecx

; 759  :             return (float)sqrt(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_sqrt_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv70[ebp], xmm0
	fld	DWORD PTR tv70[ebp]

; 760  :         }

	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_math.h
;	COMDAT _atanf
_TEXT	SEGMENT
tv70 = -4						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 637  :         {

	push	ebp
	mov	ebp, esp
	push	ecx

; 638  :             return (float)atan(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	call	__libm_sse2_atan_precise
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv70[ebp], xmm0
	fld	DWORD PTR tv70[ebp]

; 639  :         }

	mov	esp, ebp
	pop	ebp
	ret	0
_atanf	ENDP
_TEXT	ENDS
END
