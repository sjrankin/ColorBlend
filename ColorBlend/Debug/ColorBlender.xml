<?xml version="1.0"?>
<doc>
    <assembly>
        "ColorBlender"
    </assembly>
    <members>
        <member name="M:ShuffleRows(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*,System.Int32)">
            <summary>
Copy rows from <paramref name="Source" /> to <paramref name="Destination" /> as described by <paramref name="RowDescriptions" />.
</summary>
            <remarks>
Intended to be used to shuffle rows randomly.
</remarks>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the image.</param>
            <param name="Height">Height of the image.</param>
            <param name="Stride">Stride of the image.</param>
            <param name="Destination">Destination image. This buffer must have the same size as the source buffer.</param>
            <param name="RowDescriptions">Pointer to an array of descriptions that controls how rows are shuffle.</param>
            <param name="RowDescriptionCount">Contains the number of entries in <paramref name="RowDescriptions" />.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="F:RowDescription.RowHeight">
            <summary>
Height of the row to move.
</summary>
        </member>
        <member name="F:RowDescription.DestinationRowStart">
            <summary>
Row index of the destination row.
</summary>
        </member>
        <member name="F:RowDescription.SourceRowStart">
            <summary>
Row index of the source row.
</summary>
        </member>
        <member name="T:RowDescription">
            <summary>
Describes a row to be moved.
</summary>
        </member>
        <member name="M:MassImageArithmetic(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Void*)">
            <summary>
Perform an arithmetic type operation on the pixels in the image.
</summary>
            <remarks>
All images must have the same dimensions and stride.
</remarks>
            <param name="Destination">Will contain the result of the arithmetic processing.</param>
            <param name="Width">Width of the image buffer.</param>
            <param name="Height">Height of the image buffer.</param>
            <param name="Stride">Stride of the image buffer.</param>
            <param name="ImageSet">Pointer to an array of images to process.</param>
            <param name="ImageCount">Number of images in <paramref name="ImageSet" />.</param>
            <param name="Operation">The operation to perform.</param>
            <param name="ExtraData">Context-sensitive data - not all operations require this data.</param>
            <returns>Value indication operational success.</returns>
        </member>
        <member name="M:PixelLogicalOperation(System.UInt32*,System.Int32,System.Int32)">
            <summary>
Perform an arithmetical logical operation on all channels of the passed pixels.
</summary>
            <param name="PackedPixels">Array of pixels to process.</param>
            <param name="PixelCount">Number of pixels in <paramref name="PackedPixels" />.</param>
            <param name="Operation">The arithmetic logical operation to perform on all of the pixels.</param>
            <returns>Pixel based on the arithmetic logical operation.</returns>
        </member>
        <member name="M:FarthestAlphaPixel(System.UInt32*,System.Int32,System.Byte)">
            <summary>
Return the pixel whose alpha value is the farther away from the specific value.
</summary>
            <param name="PackedPixels">Array of pixels to process.</param>
            <param name="PixelCount">Number of pixels in <paramref name="PackedPixels" />.</param>
            <param name="FarthestFrom">
Determines which pixel is returned. The pixel whose alpha value is the farthest away from this returned.
</param>
            <returns>The pixel that is farthest away from <paramref name="FarthestFrom" />.</returns>
        </member>
        <member name="M:ClosestAlphaPixel(System.UInt32*,System.Int32,System.Byte)">
            <summary>
Return the pixel whose alpha value is the closest to a specific value.
</summary>
            <param name="PackedPixels">Array of pixels to process.</param>
            <param name="PixelCount">Number of pixels in <paramref name="PackedPixels" />.</param>
            <param name="FarthestFrom">
Determines which pixel is returned. The pixel whose alpha value is the closest to this returned.
</param>
            <returns>The pixel that is closest to <paramref name="FarthestFrom" />.</returns>
        </member>
        <member name="M:GreatestAlphaPixel(System.UInt32*,System.Int32)">
            <summary>
Return the pixel whose alpha value is greatest of the passed set of pixels.
</summary>
            <param name="PackedPixels">Array of pixels to process.</param>
            <param name="PixelCount">Number of pixels in <paramref name="PackedPixels" />.</param>
            <returns>The pixel that has the greatest alpha value.</returns>
        </member>
        <member name="M:SmallestAlphaPixel(System.UInt32*,System.Int32)">
            <summary>
Return the pixel whose alpha value is smallest of the passed set of pixels.
</summary>
            <param name="PackedPixels">Array of pixels to process.</param>
            <param name="PixelCount">Number of pixels in <paramref name="PackedPixels" />.</param>
            <returns>The pixel that has the smallest alpha value.</returns>
        </member>
        <member name="M:LeastClosestPixelLuminance(System.UInt32*,System.Int32,System.Double)">
            <summary>
Return the pixel whose luminance is the farthest away from <paramref name="LuminanceTarget" />.
</summary>
            <param name="PackedPixels">Array of pixels to process.</param>
            <param name="PixelCount">Number of pixels in <paramref name="PackedPixels" />.</param>
            <param name="LuminanceTarget">Determines which pixel is returned.</param>
            <returns>The pixel that is the farthest away from <paramref name="LuminanceTarget" />.</returns>
        </member>
        <member name="M:ClosestPixelLuminance(System.UInt32*,System.Int32,System.Double)">
            <summary>
Return the pixel whose luminance is the closest to <paramref name="LuminanceTarget" />.
</summary>
            <param name="PackedPixels">Array of pixels to process.</param>
            <param name="PixelCount">Number of pixels in <paramref name="PackedPixels" />.</param>
            <param name="LuminanceTarget">Determines which pixel is returned.</param>
            <returns>The pixel that has a luminance closest to <paramref name="LuminanceTarget" />.</returns>
        </member>
        <member name="M:PixelSumDouble(System.Double*,System.Int32,System.Double*,System.Double*,System.Double*,System.Double*)">
            <summary>
Return the sum of each channel in a buffer consisting of four doubles per pixel.
</summary>
            <param name="DoublePixels">Points to the buffer with four doubles per pixel.</param>
            <param name="PixelCount">Number of pixels in <paramref name="DoublePixels" />.</param>
            <param name="AlphaSum">On return, the sum of all alpha channel values.</param>
            <param name="RedSum">On return, the sum of all red channel values.</param>
            <param name="GreenSum">On return, the sum of all green channel values.</param>
            <param name="BlueSum">On return, the sum of all blue channel values.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:PixelSum(System.UInt32*,System.Int32)">
            <summary>
Return the the sum of all of the passed pixels. Each channel clamped to 0xff.
</summary>
            <param name="PackedPixels">Array of pixels to process.</param>
            <param name="PixelCount">Number of pixels in <paramref name="PackedPixels" />.</param>
            <returns>The sum of the passed pixels.</returns>
        </member>
        <member name="M:DarkestPixel(System.UInt32*,System.Int32)">
            <summary>
Return the the pixel with the darkest luminance.
</summary>
            <param name="PackedPixels">Array of pixels to process.</param>
            <param name="PixelCount">Number of pixels in <paramref name="PackedPixels" />.</param>
            <returns>The darkest pixel.</returns>
        </member>
        <member name="M:BrightestPixel(System.UInt32*,System.Int32)">
            <summary>
Return the the pixel with the brightest luminance.
</summary>
            <param name="PackedPixels">Array of pixels to process.</param>
            <param name="PixelCount">Number of pixels in <paramref name="PackedPixels" />.</param>
            <returns>The brightest pixel.</returns>
        </member>
        <member name="M:MedianPixel(System.UInt32*,System.Int32)">
            <summary>
Return the the median pixel based on luminance.
</summary>
            <param name="PackedPixels">Array of pixels to process.</param>
            <param name="PixelCount">Number of pixels in <paramref name="PackedPixels" />.</param>
            <returns>The median pixel.</returns>
        </member>
        <member name="M:MeanPixel(System.UInt32*,System.Int32)">
            <summary>
Return the the mean pixel based on luminance.
</summary>
            <param name="PackedPixels">Array of pixels to process.</param>
            <param name="PixelCount">Number of pixels in <paramref name="PackedPixels" />.</param>
            <returns>The mean pixel.</returns>
        </member>
        <member name="M:ByteBlocksOperation(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*,System.Int32,System.Int32)">
            <summary>
Apply two buffers to each other and store the result in a third buffer. All buffers must be the same size and dimensions.
</summary>
            <param name="Destination">The destination of the operation.</param>
            <param name="DestinationWidth">The width of the destination block.</param>
            <param name="DestinationHeight">The height of the destination block.</param>
            <param name="DestinationStride">The stride of the destination block.</param>
            <param name="BufferA">First operand buffer.</param>
            <param name="BufferB">Second operand buffer.</param>
            <param name="Operator">Determines the operation that will be used with <paramref name="Operand" />.</param>
            <param name="IncludeAlpha">Determines if alpha is operated upon.</param>
            <returns>Value indicating result of operation.</returns>
        </member>
        <member name="M:ByteBlockOperation(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Byte,System.Boolean)">
            <summary>
Apply an operand to each byte in <paramref name="Source" />.
</summary>
            <param name="Source">The source byte block to convert.</param>
            <param name="SourceWidth">The width of the source block.</param>
            <param name="SourceHeight">The height of the source block.</param>
            <param name="SourceStride">The stride of the source block.</param>
            <param name="Operator">Determines the operation that will be used with <paramref name="Operand" />.</param>
            <param name="Operand">The value applied via the <paramref name="Operator" />.</param>
            <param name="IncludeAlpha">Determines if alpha is operated upon.</param>
            <returns>Value indicating result of operation.</returns>
        </member>
        <member name="M:ByteBlockOperationByChannel(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Apply an operand to each selected channel byte in <paramref name="Source" />.
</summary>
            <param name="Source">The source byte block to convert.</param>
            <param name="SourceWidth">The width of the source block.</param>
            <param name="SourceHeight">The height of the source block.</param>
            <param name="SourceStride">The stride of the source block.</param>
            <param name="Operator">Determines the operation that will be used with <paramref name="Operand" />.</param>
            <param name="OperandValue">The value applied via the <paramref name="Operator" />.</param>
            <param name="DoAlpha">Determines if alpha is operated upon.</param>
            <param name="DoRed">Determines if red is operated upon.</param>
            <param name="DoGreen">Determines if green is operated upon.</param>
            <param name="DoBlue">Determines if blue is operated upon.</param>
            <returns>Value indicating result of operation.</returns>
        </member>
        <member name="M:DoubleBlockOperation(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
Apply an operand to each double in <paramref name="Source" />.
</summary>
            <param name="Source">The source byte block to convert.</param>
            <param name="SourceWidth">The width of the source block.</param>
            <param name="SourceHeight">The height of the source block.</param>
            <param name="SourceStride">The stride of the source block.</param>
            <param name="Operator">Determines the operation that will be used with <paramref name="Operand" />.</param>
            <param name="Operand">The value applied via the <paramref name="Operator" />.</param>
            <param name="IncludeAlpha">Determines if alpha is operated upon.</param>
            <returns>Value indicating result of operation.</returns>
        </member>
        <member name="M:AccumulateDoubleBlock(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
Accumulate blocks of doubles.
</summary>
            <param name="Source">The source byte block to convert.</param>
            <param name="SourceWidth">The width of the source block.</param>
            <param name="SourceHeight">The height of the source block.</param>
            <param name="SourceStride">The stride of the source block.</param>
            <param name="Accumulator">Stores accumulated values - must be same size and dimensions as <paramref name="Source" />.</param>
            <returns>Value indicating result of operation.</returns>
        </member>
        <member name="M:ConvertBlockToDouble(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
Convert a block from bytes to doubles, one double per pixel channel.
</summary>
            <param name="Source">The source byte block to convert.</param>
            <param name="SourceWidth">The width of the source block.</param>
            <param name="SourceHeight">The height of the source block.</param>
            <param name="SourceStride">The stride of the source block.</param>
            <param name="Destination">Pointer to the double buffer - must be same size and dimensions as <paramref name="Source" />.</param>
            <returns>Value indicating result of operation.</returns>
        </member>
        <member name="M:ConvertColorSpace(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Byte)">
            <summary>
Convert the image pointed to by <paramref name="Source" /> from an implied RGB color space to the color space
specified by <paramref name="ToColorSpace" />.
</summary>
            <param name="Source">Source for the final converted destination.</param>
            <param name="Width">Width of the Source and Destination.</param>
            <param name="Height">Height of the Source and Destination.</param>
            <param name="Stride">Stride of the Source and Destination.</param>
            <param name="Destination">Where the converted image will be placed.</param>
            <param name="ToColorSpace">Determines the color space to convert to.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:ActionByFrequency(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,FrequencyActionBlock)">
            <summary>
Applies an action to a row or column depending on the specified frequencies.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source image.</param>
            <param name="Height">Height of the source image.</param>
            <param name="Stride">Stride of the source image.</param>
            <param name="Destination">Destination image.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:ApplyAlphaFromImage(System.Void*,System.Void*,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
Unconditionally applies alpha channels from <paramref name="AlphaSource" /> to <paramref name="Base" />.
</summary>
            <param nanme="Base">Pointer to the source data buffer.</param>
            <param name="AlphaSoource">Image that will be used for alpha sources. Must be same dimensions as <paramref name="Base" />.</param>
            <param name="Width">Width of the source and destination.</param>
            <param name="Height">Height of the source and destination.</param>
            <param name="Stride">Stride of the source and destination.</param>
            <param name="Destination">Where the new image will be written.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:MaskImageFromImageLuminance(System.Void*,System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Double,System.UInt32)">
            <summary>
Conditionally applies alpha levels from <paramref name="LuminanceLayer" /> to <paramref name="Base" /> and sets pixels that are
not selected to <paramref name="MaskedPixel" />.
</summary>
            <param name="Base">Pointer to the source data buffer.</param>
            <param name="LuminanceLayer">Image used for luminance information.</param>
            <param name="Width">Width of the source and destination.</param>
            <param name="Height">Height of the source and destination.</param>
            <param name="Stride">Stride of the source and destination.</param>
            <param name="Destination">Where the new image will be written.</param>
            <param name="LuminanceThreshold">
Determines which pixels will have their alpha channel set to the alpha channel in <paramref name="Base" />.
</param>
            <param name="MaskedPixel">The color to use for regions that are masked out.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:ConditionalAlphaFromLuminance(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Double,System.Int32,System.UInt32)">
            <summary>
Set the pixel in the destination buffer to either the source pixel or the masked pixel value depending on the luminance
of the pixel in the source.
</summary>
            <param nanme="Source">Pointer to the source data buffer.</param>
            <param name="Width">Width of the source and destination.</param>
            <param name="Height">Height of the source and destination.</param>
            <param name="Stride">Stride of the source and destination.</param>
            <param name="Destination">Where the new image will be written.</param>
            <param name="LuminanceThreshold">Determines which pixel will be written to the destination.</param>
            <param name="Invert">Determines how pixel selection is done.</param>
            <param name="MaskPixel">The value of the masked pixel.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:SetAlphaChannelInPlace(System.Void*,System.Int32,System.Int32,System.Int32,System.Byte)">
            <summary>
Unconditionally sets all alpha channels to <paramref name="NewAlpha" /> in an in-place buffer - e.g., no destination buffer is used.
</summary>
            <param nanme="Buffer">Pointer to the in-place buffer.</param>
            <param name="Width">Width of the source and destination.</param>
            <param name="Height">Height of the source and destination.</param>
            <param name="Stride">Stride of the source and destination.</param>
            <param name="NewAlpha">The new alpha value for all pixels.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:SetAlphaChannel(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Byte)">
            <summary>
Unconditionally sets all alpha channels to <paramref name="NewAlpha" />.
</summary>
            <param nanme="Source">Pointer to the source data buffer.</param>
            <param name="Width">Width of the source and destination.</param>
            <param name="Height">Height of the source and destination.</param>
            <param name="Stride">Stride of the source and destination.</param>
            <param name="Destination">Where the new image will be written.</param>
            <param name="NewAlpha">The new alpha value for all pixels.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:AlphaFromLuminance(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
Sets the alpha value of a given pixel proportionally to the luminance of the pixel.
</summary>
            <param nanme="Source">Pointer to the source data buffer.</param>
            <param name="Width">Width of the source and destination.</param>
            <param name="Height">Height of the source and destination.</param>
            <param name="Stride">Stride of the source and destination.</param>
            <param name="Destination">Where the new image will be written.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:MaskByColor(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.UInt32,System.UInt32,System.Byte)">
            <summary>
Sets the alpha value to <paramref name="AlphaValue" /> if the R, G, and B channels fall into the range specified
by <paramref name="LowMaskColor" /> and <paramref name="HighMaskColor" />.
</summary>
            <param nanme="Source">Pointer to the source data buffer.</param>
            <param name="Width">Width of the source and destination.</param>
            <param name="Height">Height of the source and destination.</param>
            <param name="Stride">Stride of the source and destination.</param>
            <param name="Destination">Where the new image will be written.</param>
            <param name="LowMaskColor">Low color mask value.</param>
            <param name="HighMaskColor">High color mask value.</param>
            <param name="AlphaMask">The value used to set the alpha channel if the pixel falls into the specified range.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:AlphaMaskImage(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Byte)">
            <summary>
Sets the alpha channel value of a pixel to either 0x0 or 0xff depending if it original value is less than or
greater than <paramref name="AlphaLevel" />.
</summary>
            <param nanme="Source">Pointer to the source data buffer.</param>
            <param name="Width">Width of the source and destination.</param>
            <param name="Height">Height of the source and destination.</param>
            <param name="Stride">Stride of the source and destination.</param>
            <param name="Destination">Where the new image will be written.</param>
            <param name="AlphaLevel">Alpha channels greater than or equal to this value will be set to 0xff, and if not, to 0x0.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:AlphaSolarize(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Double)">
            <summary>
Solarizes the only the alpha channel.
</summary>
            <param nanme="Source">Pointer to the source data buffer.</param>
            <param name="Width">Width of the source and destination.</param>
            <param name="Height">Height of the source and destination.</param>
            <param name="Stride">Stride of the source and destination.</param>
            <param name="Destination">Where the new image will be written.</param>
            <param name="Luminance">Determines which pixels will have their alpha channel solarized.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:RenderRampingColorRectangle(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Int32,System.Byte,System.Byte,System.Byte,System.Int32,System.Byte,System.Byte,System.Byte,System.Int32,System.Byte,System.Byte,System.Byte)">
            <summary>
Render a rectangle with ramping colors, e.g., colors whose individual channels are incremented/decremented by position.
</summary>
            <remarks>
This function allows the caller to ramp color channels individually rather than as an entire color.
</remarks>
            <param name="Destination">Where the rectangle will be rendered.</param>
            <param name="BufferWidth">Width of the destination in pixels.</param>
            <param name="BufferHeight">Height of the destination in scan lines.</param>
            <param name="BufferStride">Stride of the destination.</param>
            <param name="RampAlpha">Determines if alpha will be ramped.</param>
            <param name="AlphaStart">Start of alpha values.</param>
            <param name="AlphaIncrement">How to increment alpha by position</param>
            <param name="NonRampAlpha">Alpha value to use if not ramping alpha.</param>
            <param name="RampAlpha">Determines if red will be ramped.</param>
            <param name="redStart">Start of red values.</param>
            <param name="redIncrement">How to increment red by position</param>
            <param name="NonRampred">red value to use if not ramping red.</param>
            <param name="RampAlpha">Determines if green will be ramped.</param>
            <param name="greenStart">Start of green values.</param>
            <param name="greenIncrement">How to increment green by position</param>
            <param name="NonRampgreen">green value to use if not ramping green.</param>
            <param name="RampAlpha">Determines if blue will be ramped.</param>
            <param name="blueStart">Start of blue values.</param>
            <param name="blueIncrement">How to increment blue by position</param>
            <param name="NonRampblue">blue value to use if not ramping blue.</param>
            <returns>Value indicating opertional result.</returns>
        </member>
        <member name="M:RenderLinearGradients(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
Render an image defined by a list of color gradient stops.
</summary>
            <param name="Destination">Where the rectangle will be rendered.</param>
            <param name="BufferWidth">Width of the destination in pixels.</param>
            <param name="BufferHeight">Height of the destination in scan lines.</param>
            <param name="BufferStride">Stride of the destination.</param>
            <param name="IgnoreAlpha">Determines if alpha is used.</param>
            <param name="DoHorizontal">Determines the axis of the gradients.</param>
            <param name="Stops">Pointer to an array of color gradient stops.</param>
            <param name="StopCount">Number of color gradients in <paramref name="Stops" />.</param>
            <returns>Value indicating opertional result.</returns>
        </member>
        <member name="M:GradientIndexFromGradientRange(System.Void*,System.Int32,System.Int32)">
            <summary>
Return the appropriate index in the gradient stop list based on the location in <paramref name="Index" />.
</summary>
            <param name="Stops">Pointer to a list of gradient stops.</param>
            <param name="StopCount">Number of stops in the gradient stop list.</param>
            <param name="Index">The location in the image that determines which gradient stop index to return.</param>
            <returns>The gradient stop index on success, -1 if not found.</returns>
        </member>
        <member name="M:RenderRampingGradientColorRectangle(System.Void*,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
Render a color gradient rectangle.
</summary>
            <param name="Destination">Where the rectangle will be rendered.</param>
            <param name="BufferWidth">Width of the destination in pixels.</param>
            <param name="BufferHeight">Height of the destination in scan lines.</param>
            <param name="BufferStride">Stride of the destination.</param>
            <param name="PackedStartColor">The gradient start color in packed format.</param>
            <param name="PackedEndColor">The gradient end color in packed format.</param>
            <param name="IgnoreAlpha">Determines if alpha is modified. If false, all alphas are set to 0xff.</param>
            <param name="DoHorizontal">Determines the gradient direction.</param>
            <returns>Value indicating operational result.</returns>
        </member>
        <member name="M:ColorInterval(System.UInt32,System.UInt32,System.Double,System.Int32,System.UInt32*)">
            <summary>
Return a color that is between a start and end color. If the start and end colors are the same, that color will be used.
</summary>
            <param name="StartColor">The packed start color.</param>
            <param name="EndColor">The packed end color.</param>
            <param name="NormalizedDistance">The distance of the color to return.</param>
            <param name="IgnoreAlpha">If true, alpha is set to 0xff. Otherwise alpha will be modified as well.</param>
            <param name="FinalColor">Will contain the final color on return.</param>
        </member>
        <member name="M:RenderRandomSubBlockRectangle(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
Render a rectangle that consists of sub-rectangles with random colors.
</summary>
            <param name="Destination">Where the rectangle will be rendered.</param>
            <param name="BufferWidth">Width of the destination in pixels.</param>
            <param name="BufferHeight">Height of the destination in scan lines.</param>
            <param name="BufferStride">Stride of the destination.</param>
            <param name="BlockWidth">Width of sub-blocks.</param>
            <param name="BlockHeight">Height of sub-blocks.</param>
            <param name="Seed">Random number generator seed.</param>
            <returns>Value indicating success.</returns>
        </member>
        <member name="M:RenderRandomColorRectangle(System.Void*,System.Int32,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.UInt32)">
            <summary>
Render a rectangle filled with pixels of random colors.
</summary>
            <param name="Destination">Where the rectangle will be rendered.</param>
            <param name="BufferWidth">Width of the destination in pixels.</param>
            <param name="BufferHeight">Height of the destination in scan lines.</param>
            <param name="BufferStride">Stride of the destination.</param>
            <param name="LowAlpha">Lowest valid alpha value.</param>
            <param name="HighAlpha">Greatest valid alpha value. If LowAlpha and HightAlpha are the same, that value will be used.</param>
            <param name="LowRed">Lowest valid red value.</param>
            <param name="HighRed">Greatest valid red value. If LowRed and HightRed are the same, that value will be used.</param>
            <param name="LowGreen">Lowest valid green value.</param>
            <param name="HighGreen">Greatest valid green value. If LowGreen and HightGreen are the same, that value will be used.</param>
            <param name="LowRed">Lowest valid blue value.</param>
            <param name="HighBlue">Greatest valid blue value. If LowBlue and HightBlue are the same, that value will be used.</param>
            <returns>Value indicating success.</returns>
        </member>
        <member name="M:RandomColor(System.Byte*,System.Byte*,System.Byte*,System.Byte*)">
            <summary>
Return a random color.
</summary>
            <param name="Alpha">On return, a random alpha channel value.</param>
            <param name="Red">On return, a random red channel value.</param>
            <param name="Green">On return, a random green channel value.</param>
            <param name="Blue">On return, a random blue channel value.</param>
        </member>
        <member name="M:rrand2(System.Int32,System.Int32)">
            <summary>
Return a random number between <paramref name="Low" /> and <paramref name="High" /> inclusive.
</summary>
            <param name="Low">Low range value. If not specified, defaults to 0.</param>
            <param name="High">High range value. If not specified, defaults to RAND_MAX.</param>
            <returns>Random number between <paramref name="Low" /> and <paramref name="High" /> inclusive.</returns>
        </member>
        <member name="M:PixelMathOperation(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Perform a mathmematical operation on color channels in <paramref name="SourceBuffer" />.
</summary>
            <param name="SourceBuffer">The source image buffer.</param>
            <param name="SourceWidth">Width of the source image.</param>
            <param name="SourceHeight">Height of the source image.</param>
            <param name="SourceStride">Stride of the source image.</param>
            <param name="DestinationBuffer">The destination buffer. Must have same dimensions as the source buffer.</param>
            <param name="Operation">The operation to perform.</param>
            <param name="NormalizeResults">Normalize results to something visible.</param>
            <param name="NormalizeValues">Normalize values before calculations.</param>
            <param name="ApplyToRed">Apply the operation/constant to the red channel.</param>
            <param name="ApplyToGreen">Apply the operation/constant to the green channel.</param>
            <param name="ApplyToBlue">Apply the operation/constant to the blue channel.</param>
        </member>
        <member name="M:ExecuteOperation2(System.Byte,System.Int32,System.Int32,System.Int32)">
            <summary>
Execute the specified operation on the passed value.
</summary>
            <param name="Value">The value the operation is applied to.</param>
            <param name="Operation">The operation to perform.</param>
            <param name="NormalizeResults">Normalize the value (between 0 and 255) before returning it.</param>
            <param name="NormalizeValues">Normalize the value before calculations.</param>
            <returns>Modified value.</returns>
        </member>
        <member name="M:PixelMathLogicalOperation(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Perform a logical or arithmetic operation on color channels in <paramref name="SourceBuffer" />.
</summary>
            <param name="SourceBuffer">The source image buffer.</param>
            <param name="SourceWidth">Width of the source image.</param>
            <param name="SourceHeight">Height of the source image.</param>
            <param name="SourceStride">Stride of the source image.</param>
            <param name="DestinationBuffer">The destination buffer. Must have same dimensions as the source buffer.</param>
            <param name="Operation">The operation to perform.</param>
            <param name="Constant">The constant to apply.</param>
            <param name="ApplyToRed">Apply the operation/constant to the red channel.</param>
            <param name="ApplyToGreen">Apply the operation/constant to the green channel.</param>
            <param name="ApplyToBlue">Apply the operation/constant to the blue channel.</param>
        </member>
        <member name="M:ExecuteOperation(System.Byte,System.Int32,System.Int32)">
            <summary>
Execute the specified operation with the specified constant on the passed value.
</summary>
            <param name="Value">The value the operation and constant is applied to.</param>
            <param name="Operation">The operation to perform.</param>
            <param name="Constant">The constant to apply to <pararef name="Value" /> with the specified operation.</param>
            <returns>Modified value.</returns>
        </member>
        <member name="M:ExecuteDisplayList(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
Execute a display list on the passed buffer.
</summary>
            <remarks>
The display list is executed in two passes. The first pass renders individual objects and the second pass
composites everything together.
</remarks>
            <param name="Target">Pointer to the buffer where the display list will be executed.</param>
            <param name="TargetWidth">Width of the buffer where drawing will be done.</param>
            <param name="TargetHeight">Height of the buffer where drawing will be done.</param>
            <param name="TargetStride">Stride of the buffer where drawing will be done.</param>
            <param name="RawDisplayList">Pointer to the display list to execute.</param>
            <param name="DisplayListCount">Number of entries in the display list to execute.</param>
            <returns>Value indicating final execution status.</returns>
        </member>
        <member name="F:DisplayListInstruction.ReturnOnFailure">
            <summary>
Return if operation fails without waiting for the rest of the display list to execute.
</summary>
        </member>
        <member name="F:DisplayListInstruction.EdgeAlpha">
            <summary>
Alpha at the edge.
</summary>
        </member>
        <member name="F:DisplayListInstruction.CenterAlpha">
            <summary>
Alpha at the center.
</summary>
        </member>
        <member name="F:DisplayListInstruction.Height">
            <summary>
Height.
</summary>
        </member>
        <member name="F:DisplayListInstruction.Width">
            <summary>
Width.
</summary>
        </member>
        <member name="F:DisplayListInstruction.Bottom">
            <summary>
Bottom side.
</summary>
        </member>
        <member name="F:DisplayListInstruction.Right">
            <summary>
Right side.
</summary>
        </member>
        <member name="F:DisplayListInstruction.Top">
            <summary>
Top side.
</summary>
        </member>
        <member name="F:DisplayListInstruction.Left">
            <summary>
Left side.
</summary>
        </member>
        <member name="F:DisplayListInstruction.Y4">
            <summary>
Fourth point vertical.
</summary>
        </member>
        <member name="F:DisplayListInstruction.X4">
            <summary>
Fourth point horizontal.
</summary>
        </member>
        <member name="F:DisplayListInstruction.Y3">
            <summary>
Third point vertical.
</summary>
        </member>
        <member name="F:DisplayListInstruction.X3">
            <summary>
Third point horizontal.
</summary>
        </member>
        <member name="F:DisplayListInstruction.Y2">
            <summary>
Second point vertical.
</summary>
        </member>
        <member name="F:DisplayListInstruction.X2">
            <summary>
Second point horizontal.
</summary>
        </member>
        <member name="F:DisplayListInstruction.Y1">
            <summary>
First point vertical.
</summary>
        </member>
        <member name="F:DisplayListInstruction.X1">
            <summary>
First point horizontal.
</summary>
        </member>
        <member name="F:DisplayListInstruction.Color4">
            <summary>
Fourth color.
</summary>
        </member>
        <member name="F:DisplayListInstruction.Color3">
            <summary>
Third color.
</summary>
        </member>
        <member name="F:DisplayListInstruction.Color2">
            <summary>
Second color.
</summary>
        </member>
        <member name="F:DisplayListInstruction.Color1">
            <summary>
First color.
</summary>
        </member>
        <member name="F:DisplayListInstruction.Rendered">
            <summary>
Any required rendering completed.
</summary>
        </member>
        <member name="F:DisplayListInstruction.BufferUsed">
            <summary>
Caller sets to true if it uses Buffer.
</summary>
        </member>
        <member name="F:DisplayListInstruction.BufferStride">
            <summary>
Stride of the buffer.
</summary>
        </member>
        <member name="F:DisplayListInstruction.BufferHeight">
            <summary>
Height of the buffer.
</summary>
        </member>
        <member name="F:DisplayListInstruction.BufferWidth">
            <summary>
Width of the buffer.
</summary>
        </member>
        <member name="F:DisplayListInstruction.Buffer">
            <summary>
Used to store intermediate results.
</summary>
        </member>
        <member name="F:DisplayListInstruction.Operand">
            <summary>
The operation to execute.
</summary>
        </member>
        <member name="T:DisplayListInstruction">
            <summary>
Encapsulates one display list instruction.
</summary>
        </member>
        <member name="M:RenderDisplayList(System.Void*,System.Int32,System.Int32,System.Int32,DisplayInstructionList2*,System.Int32)">
            <summary>
Render the objects in <paramref name="DisplayList" /> on <paramref name="Target" />.
</summary>
            <param name="Target">The buffer where rendering will take place.</param>
            <param name="TargetWidth">The width of the target buffer.</param>
            <param name="TargetHeight">The height of the target buffer.</param>
            <param name="TargetStride">The stride of the target buffer.</param>
            <param name="DisplayList">The list of objects to render.</param>
            <param name="DisplayListCount">Number of objects in <paramref name="DisplayList" />.</param>
            <returns>Value indicating result.</returns>
        </member>
        <member name="M:DeleteObjectList(CommonObject*,System.Int32)">
            <summary>
Delete the object list created with <seealso cref="M:MakeObjectList(System.Int32)" />.
</summary>
            <param name="ObjectList">The object list to delete.</param>
            <param name="EntryCount">Number of objects in the object list.</param>
        </member>
        <member name="M:MakeObjectList(System.Int32)">
            <summary>
Return an object list with <paramref name="EntryCount" /> objects.
</summary>
            <param name="EntryCount">Size of the returned object list.</param>
            <returns>Object list the appropriate size.</returns>
        </member>
        <member name="M:CommonObjectRenderer(System.Byte*,System.Int32,System.Int32,System.Int32,CommonObject*,System.Int32)">
            <summary>
Render all of the objects in <paramref name="ObjectList" /> onto <paramref name="Target" />.
</summary>
            <param name="Target">
The buffer where the rendering will take place. It is assumed that the buffer is large enough for all
of the objects, e.g. the dimensions are sufficient.
</param>
            <param name="TargetWidth">The width of the target buffer.</param>
            <param name="TargetHeight">The height of the target buffer.</param>
            <param name="TargetStride">The stride of the target buffer.</param>
            <param name="ObjectList">List of objects to render in <paramref name="Target" />.</param>
            <param name="ObjectCount">Number of objects in <paramref name="ObjectList" />.</param>
            <returns>Success code.</returns>
        </member>
        <member name="M:RenderColorBlobEx(ColorBlobParameters*,CommonObject*)">
            <summary>
Renders circular blobs of color.
</summary>
            <param name="Parameters">Parameter block with information on how to render the color blob.</param>
            <param name="RenderTo">Common object where the blob will be rendered. This function allocates space for the blob.</param>
            <returns>Result code.</returns>
        </member>
        <member name="M:MakeColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,PureColorStruct*,AbsolutePointStruct*,System.Byte*,System.Byte*,System.Byte*)">
            <summary>
Creates a blended color given a coordinate and pure color set.
</summary>
            <param name="X">The horizontal coordinate.</param>
            <param name="Y">The vertical coordinate.</param>
            <param name="Width">The width of the image.</param>
            <param name="Height">The height of the iamge.</param>
            <param name="Hypotenuse">The hypotenuse of the image.</param>
            <param name="PointCount">The number of pure colors.</param>
            <param name="Colors">Array pointer to the set of pure colors.</param>
            <param name="Points">Array pointer to the set of pure color coordinates.</param>
            <param name="FinalR">The red channel value on success.</param>
            <param name="FinalG">The green channel value on success.</param>
            <param name="FinalB">The blue channel value on success.</param>
        </member>
        <member name="M:ColorPercent(System.Double,System.Byte,System.Byte,System.Byte,System.Byte*,System.Byte*,System.Byte*,System.Boolean)">
            <summary>
Returns a percentage of a color.
</summary>
            <param name="Percent">The precent of the returned color.</param>
            <param name="inR">Red channel input.</param>
            <param name="inG">Green channel input.</param>
            <param name="inB">Blue channel input.</param>
            <param name="outR">Red channel output.</param>
            <param name="outG">Green channel output.</param>
            <param name="outB">Blue channel output.</param>
            <param name="Invert">Determines if the result is inverted.</param>
            <returns>Source color at the specified percentage and inversion.</returns>
        </member>
        <member name="M:ColorLuminance2(System.Byte,System.Byte,System.Byte,System.Int32)">
            <summary>
Calculate the luminance of the passed color.
</summary>
            <param name="R">Red channel value.</param>
            <param name="G">Green channel value.</param>
            <param name="B">Blue channel value.</param>
            <param name="Perceived">Determines if perceptual or objective luminance is calculated.</param>
            <returns>Luminance of the passed color.</returns>
        </member>
        <member name="M:HSVtoRGB(System.Double,System.Double,System.Double,System.Double*,System.Double*,System.Double*)">
            <summary>
Convert a color in the HSV color space to the equivalent in the RGB color space.
</summary>
            <remarks>
http://www.cs.rit.edu/~ncs/color/t_convert.html
</remarks>
            <param name="H">The H component to convert. Valid range: 0 - 360.</param>
            <param name="S">The S component to convert. Valid range: 0.0 - 1.0.</param>
            <param name="V">The V component to convert. Valid range: 0.0 - 1.0.</param>
            <param name="R">Will contain the R value.</param>
            <param name="G">Will contain the G value.</param>
            <param name="B">Will contain the B value.</param>
        </member>
        <member name="M:RGBtoHSV(System.Double,System.Double,System.Double,System.Double*,System.Double*,System.Double*)">
            <summary>
Convert a color in the RGB color space to the equivalent in the HSV color space.
</summary>
            <param name="R">The red component to convert. Value ranges from 0.0 to 1.0.</param>
            <param name="G">The green component to convert. Value ranges from 0.0 to 1.0.</param>
            <param name="B">The blue component to convert. Value ranges from 0.0 to 1.0.</param>
            <param name="H">Will contain the H component. Value will range from 0.0 to 360.0.</param>
            <param name="S">Will contain the S component. Value will range from 0.0 to 1.0.</param>
            <param name="V">Will contain the V component. Value will range from 0.0 to 1.0.</param>
        </member>
        <member name="M:ShiftHue(System.Byte*,System.Byte*,System.Byte*,System.Int32)">
            <summary>
Adjust the hue of the specified color by adding the supplied offset.
</summary>
            <param name="R">Red channel value.</param>
            <param name="G">Green channel value.</param>
            <param name="B">Blue channel value.</param>
            <param name="AngleOffset">Offset to be added to the hue.</param>
        </member>
        <member name="M:ChangeHue(System.Byte*,System.Byte*,System.Byte*,System.Int32)">
            <summary>
Change the hue of the supplied RGB color.
</summary>
            <param name="R">Red channel value.</param>
            <param name="G">Green channel value.</param>
            <param name="B">Blue channel value.</param>
            <param name="Angle">Angle to be added to the hue.</param>
        </member>
        <member name="M:AdjustHue(System.Byte*,System.Byte*,System.Byte*,System.Int32)">
            <summary>
Adjust the hue of the supplied RGB color.
</summary>
            <param name="R">Red channel value.</param>
            <param name="G">Green channel value.</param>
            <param name="B">Blue channel value.</param>
            <param name="Angle">Angle to be added to the hue.</param>
        </member>
        <member name="M:GetPixelHue(System.Byte,System.Byte,System.Byte)">
            <summary>
Return the hue of the pixel with the passed colors.
</summary>
            <remarks>
Converts the RGB color to HSL and returns the Hue value.
</remarks>
            <param name="R">Red channel value.</param>
            <param name="G">Green channel value.</param>
            <param name="B">Blue channel value.</param>
            <returns>Hue of the supplied RGB color.</returns>
        </member>
        <member name="M:GetPixelSaturation(System.Byte,System.Byte,System.Byte)">
            <summary>
Return the saturation of the pixel with the passed colors.
</summary>
            <remarks>
Converts the RGB color to HSL and returns the Saturation value.
</remarks>
            <param name="R">Red channel value.</param>
            <param name="G">Green channel value.</param>
            <param name="B">Blue channel value.</param>
            <returns>Saturation of the supplied RGB color.</returns>
        </member>
        <member name="M:GetPixelLuminance(System.Byte,System.Byte,System.Byte)">
            <summary>
Return the luminance of the pixel with the passed colors.
</summary>
            <remarks>
Converts the RGB color to HSL and returns the Luminance value.
</remarks>
            <param name="R">Red channel value.</param>
            <param name="G">Green channel value.</param>
            <param name="B">Blue channel value.</param>
            <returns>Luminance of the supplied RGB color.</returns>
        </member>
        <member name="M:HSLtoRGB2(System.Double,System.Double,System.Double,System.Byte*,System.Byte*,System.Byte*)">
            <summary>
Converts a color in the HSL color space to the equivalent in the RGB color space.
</summary>
            <param name="H">The H component to convert.</param>
            <param name="S">The S component to convert.</param>
            <param name="L">The L component to convert.</param>
            <param name="R">Will contain the red component in byte format.</param>
            <param name="G">Will contain the green component in byte format.</param>
            <param name="B">Will contain the blue component in byte format.</param>
        </member>
        <member name="M:HSLtoRGB(System.Double,System.Double,System.Double,System.Double*,System.Double*,System.Double*)">
            <summary>
Converts a color in the HSL color space to the equivalent in the RGB color space.
</summary>
            <param name="H">The H component to convert.</param>
            <param name="S">The S component to convert.</param>
            <param name="L">The L component to convert.</param>
            <param name="R">Will contain the red component.</param>
            <param name="G">Will contain the green component.</param>
            <param name="B">Will contain the blue component.</param>
        </member>
        <member name="M:RGBtoHSL2(System.Byte,System.Byte,System.Byte,System.Double*,System.Double*,System.Double*)">
            <summary>
Convert a color in the RGB color space to the equivalent color in the HSL color space.
</summary>
            <param name="R">The red component (byte format) to convert.</param>
            <param name="G">The green component (byte format) to convert.</param>
            <param name="B">The blue component (byte format) to convert.</param>
            <param name="H">On return will contain the hue value.</param>
            <param name="S">On return will contain the saturation value.</param>
            <param name="L">On return will contain the lumaninance value.</param>
        </member>
        <member name="M:RGBtoHSL(System.Double,System.Double,System.Double,System.Double*,System.Double*,System.Double*)">
            <summary>
Convert a color in the RGB color space to the equivalent color in the HSL color space.
</summary>
            <param name="R">The red component to convert.</param>
            <param name="G">The green component to convert.</param>
            <param name="B">The blue component to convert.</param>
            <param name="H">On return will contain the hue value.</param>
            <param name="S">On return will contain the saturation value.</param>
            <param name="L">On return will contain the lumaninance value.</param>
        </member>
        <member name="M:RGBtoYCbCr(System.Double,System.Double,System.Double,System.Double*,System.Double*,System.Double*)">
            <summary>
Converts a color in the RGB color space to the YCbCr color space.
</summary>
            <param name="R">The red component to convert.</param>
            <param name="G">The green component to convert.</param>
            <param name="B">The blue component to convert.</param>
            <param name="Y">Will contain the Y component upon conversion.</param>
            <param name="Cb">Will contain the Cb component upon conversion.</param>
            <param name="Cr">Will contain the Cr component upon conversion.</param>
        </member>
        <member name="M:YCbCrtoRGB(System.Double,System.Double,System.Double,System.Double*,System.Double*,System.Double*)">
            <summary>
Converts a color in YCbCr color space to RGB color space.
</summary>
            <param name="Y">The Y component.</param>
            <param name="Cb">The Cb component.</param>
            <param name="Cr">The Cr component.</param>
            <param name="R">The converted red component.</param>
            <param name="G">The converted green component.</param>
            <param name="B">The converted blue component.</param>
        </member>
        <member name="M:Compositor(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
Merge a set of color blobs (in <paramref name="Objectset" />) to <paramref name="Target" />. This is a composite action - the
order of the Objects in the list is relevant - first items are composited first. The background in <paramref name="Target" />
will be merged with the Objects and is assumed to be drawn before calling this function.
</summary>
            <param name="Target">Where the drawing will be done.</param>
            <param name="TargetWidth">Width of the buffer where drawing will be done.</param>
            <param name="TargetHeight">Height of the buffer where drawing will be done.</param>
            <param name="TargetStride">Stride of the buffer where drawing will be done.</param>
            <param name="Objectset">The list of color blobs to merge to <paramref name="Target" />.</param>
            <param name="PlaneCount">Number of Objects in <paramref name="Objectset" />.</param>
            <returns>Operational success indicator.</returns>
        </member>
        <member name="M:GrayLevels(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
Convert the source into a grayscale image with the specified number of grays.
</summary>
            <param name="Buffer">Source image to convert.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Destination">Destination buffer - where the results are written.</param>
            <param name="LevelCount">Number of gray levels.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:GrayLevelsRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
Convert the source into a grayscale image with the specified number of grays.
</summary>
            <param name="Buffer">Source image to convert.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Destination">Destination buffer - where the results are written.</param>
            <param name="LevelCount">Number of gray levels.</param>
            <param name="Left">The left coordinate of the region to convert.</param>
            <param name="Top">The top coordinate of the region to convert.</param>
            <param name="Right">The right coordinate of the region to convert.</param>
            <param name="Bottom">The bottom coordinate of the region to convert.</param>
            <param name="CopyOutOfRegion">If TRUE, pixels out of the region to convert are the same as in the source image.</param>
            <param name="PackedOut">If <paramref name="CopyOutOfRegion" /> is FALSE, this value will be used for pixels out of the region.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:BufferGrayscale(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
Convert an image to a type of grayscale.
</summary>
            <param name="Buffer">Source image to convert.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Destination">Destination buffer - where the results are written.</param>
            <param name="GrayscaleType">Determines the type of grayscale operation to execute.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:ColorLevels(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
Convert the source into an image with the specified number of channel levels.
</summary>
            <param name="Buffer">Source image to convert.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Destination">Destination buffer - where the results are written.</param>
            <param name="LevelCount">Number of channel levels.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:ColorLevelsRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
Convert the source into an image with the specified number of channel levels.
</summary>
            <param name="Buffer">Source image to convert.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Destination">Destination buffer - where the results are written.</param>
            <param name="LevelCount">Number of channel levels.</param>
            <param name="Left">The left coordinate of the region to convert.</param>
            <param name="Top">The top coordinate of the region to convert.</param>
            <param name="Right">The right coordinate of the region to convert.</param>
            <param name="Bottom">The bottom coordinate of the region to convert.</param>
            <param name="CopyOutOfRegion">If TRUE, pixels out of the region to convert are the same as in the source image.</param>
            <param name="PackedOut">If <paramref name="CopyOutOfRegion" /> is FALSE, this value will be used for pixels out of the region.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:BufferGrayscaleRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
Convert an image to a type of grayscale.
</summary>
            <param name="Buffer">Source image to convert.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="GrayscaleType">Determines the type of grayscale operation to execute.</param>
            <param name="Left">The left coordinate of the region to convert.</param>
            <param name="Top">The top coordinate of the region to convert.</param>
            <param name="Right">The right coordinate of the region to convert.</param>
            <param name="Bottom">The bottom coordinate of the region to convert.</param>
            <param name="CopyOutOfRegion">If TRUE, pixels out of the region to convert are the same as in the source image.</param>
            <param name="PackedOut">If <paramref name="CopyOutOfRegion" /> is FALSE, this value will be used for pixels out of the region.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:GammaCorrection(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Double,System.Int32)">
            <summary>
Apply a gamma correction to the source image and return it in the destination image.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Stride">Stride of the source and destination images.</param>
            <param name="Destination">Where the result will be written.</param>
            <param name="Gamma">Normalized gamma value to apply. This value is clamped to 0.0 to 1.0.</param>
            <param name="IncludeAlpha">If TRUE, alpha is also gamma corrected.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:ApplyBrightnessMap(System.Void*,System.Void*,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
Apply a brightness map to the source image and return it in the destination image.
</summary>
            <remarks>
http://en.literateprograms.org/RGB_to_HSV_color_space_conversion_%28C%29
</remarks>
            <param name="Source">Source image.</param>
            <param name="IlluminationMap">The brightness map to apply. Only the red channel is used.</param>
            <param name="Width">Width of the source, destination, and brightness map images.</param>
            <param name="Height">Height of the source, destination, and brightness map images.</param>
            <param name="Stride">Stride of the source, destination, and brightness map images.</param>
            <param name="Destination">Where the result will be written.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:RGBCombine(System.Void*,System.Void*,System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Byte)">
            <summary>
Combine three images, each representing a red, green, or blue channel, and return the result.
</summary>
            <param name="RedSource">Pointer to the red channel image buffer.</param>
            <param name="GreenSource">Pointer to the green channel image buffer.</param>
            <param name="BlueSource">Pointer to the blue channel image buffer.</param>
            <param name="Width">Width of all four buffers.</param>
            <param name="Height">Height of all four buffers.</param>
            <param name="Stride">Stride of all four buffers.</param>
            <param name="Destination">Where the combined image will be written.</param>
            <returns>Value indicating operational result.</returns>
        </member>
        <member name="M:SelectHSLChannels(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
Select which HSL channels are shown.
</summary>
            <param name="Source">Image source for the operation.</param>
            <param name="BufferWidth">Width of the source and destination buffer.</param>
            <param name="BufferHeight">Height of the source and destination buffer.</param>
            <param name="BufferStride">Stride of the source and destination buffer.</param>
            <param name="SelectHue">If TRUE, the hue channel will be selected.</param>
            <param name="SelectSaturation">If TRUE, the saturation channel will be selected.</param>
            <param name="SelectLuminance">If TRUE, the luminance channel will be selected.</param>
            <returns>Value indicating operational status.</returns>
        </member>
        <member name="M:SelectRGBChannels(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Select which RGB channels are shown.
</summary>
            <param name="Source">Image source for the operation.</param>
            <param name="BufferWidth">Width of the source and destination buffer.</param>
            <param name="BufferHeight">Height of the source and destination buffer.</param>
            <param name="BufferStride">Stride of the source and destination buffer.</param>
            <param name="SelectRed">If TRUE, the red channel will be selected.</param>
            <param name="SelectGreen">If TRUE, the green channel will be selected.</param>
            <param name="SelectBlue">If TRUE, the blue channel will be selected.</param>
            <returns>Value indicating operational status.</returns>
        </member>
        <member name="M:RandomChannelSwap(System.Void*,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32)">
            <summary>
Swap the channels of the buffer randomly.
</summary>
            <param name="Target">Target buffer that will have its pixel channels randomized.</param>
            <param name="BufferWidth">Width of the target buffer.</param>
            <param name="BufferHeight">Height of the target buffer.</param>
            <param name="BufferStride">Stride of the buffer.</param>
            <param name="Seed">Random number seed.</param>
            <param name="IncludeAlpha">If true, the alpha channel will be included in the random swaps.</param>
        </member>
        <member name="M:Random4(System.Byte*,System.Byte*,System.Byte*,System.Byte*)">
            <summary>
Shuffle the parameters randomly.
</summary>
            <param name="Alpha">Alpha channel data.</param>
            <param name="Red">Red channel data.</param>
            <param name="Green">Green channel data.</param>
            <param name="Blue">Blue channel data.</param>
        </member>
        <member name="M:Random3(System.Byte*,System.Byte*,System.Byte*)">
            <summary>
Shuffle the parameters randomly.
</summary>
            <param name="Red">Red channel data.</param>
            <param name="Green">Green channel data.</param>
            <param name="Blue">Blue channel data.</param>
        </member>
        <member name="M:shuffle(System.Byte*,System.UInt32)">
            <summary>
Shuffle the array.
</summary>
            <param name="array">The array to shuffle.</param>
            <param name="n">Size of <paramref name="array" />.</param>
        </member>
        <member name="M:ChannelSwap2(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Void*)">
            <summary>
Swap channels with optional thresholds.
</summary>
            <param name="Source">Source image for swapping data.</param>
            <param name="Width">Width of the source and destination.</param>
            <param name="Height">Height of the source and destination.</param>
            <param name="Strie">Stride of the source and destination.</param>
            <param name="SwapOrder">How to swap the channels. No RGB order available as that would be silly.</param>
            <param name="ExecOptions">Optional threshold instructions for when to swap.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:ChannelSwap4(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Double,System.Int32)">
            <summary>
Swap channels in a given pixel.
</summary>
            <param name="Source">Image source for the operation.</param>
            <param name="BufferWidth">Width of the target buffer.</param>
            <param name="BufferHeight">Height of the target buffer.</param>
            <param name="BufferStride">Stride of the buffer.</param>
            <param name="SourceIndices">Indicates the source of a sequential channel.</param>
            <param name="DestIndices">Incidates the destination of a squential channel.</param>
            <param name="IndexCount">Number of indices in both SourceIndices and DestIndices.</param>
            <returns>Value indicating success.</returns>
        </member>
        <member name="M:ChannelSwap3(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
Swap channels in a given pixel.
</summary>
            <param name="Source">Image source for the operation.</param>
            <param name="BufferWidth">Width of the target buffer.</param>
            <param name="BufferHeight">Height of the target buffer.</param>
            <param name="BufferStride">Stride of the buffer.</param>
            <param name="SourceIndices">Indicates the source of a sequential channel.</param>
            <param name="DestIndices">Incidates the destination of a squential channel.</param>
            <param name="IndexCount">Number of indices in both SourceIndices and DestIndices.</param>
            <returns>Value indicating success.</returns>
        </member>
        <member name="M:ChannelSwap(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*,System.Int32)">
            <summary>
Swap channels in a given pixel.
</summary>
            <param name="Target">Target buffer that will have its pixel channels swapped.</param>
            <param name="BufferWidth">Width of the target buffer.</param>
            <param name="BufferHeight">Height of the target buffer.</param>
            <param name="BufferStride">Stride of the buffer.</param>
            <param name="SourceIndices">Indicates the source of a sequential channel.</param>
            <param name="DestIndices">Incidates the destination of a squential channel.</param>
            <param name="IndexCount">Number of indices in both SourceIndices and DestIndices.</param>
            <returns>Value indicating success.</returns>
        </member>
        <member name="M:PixelMigrate(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
Migrate pixels through the buffer. Atomic unit is a pixel, not a channel.
</summary>
            <param name="Target">Target buffer that will have its pixels migrated.</param>
            <param name="BufferWidth">Width of the target buffer.</param>
            <param name="BufferHeight">Height of the target buffer.</param>
            <param name="BufferStride">Stride of the buffer.</param>
        </member>
        <member name="M:ChannelMigrate(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Migrate color data from pixel to pixel.
</summary>
            <param name="Target">Target buffer that will have its pixels rotated.</param>
            <param name="BufferWidth">Width of the target buffer.</param>
            <param name="BufferHeight">Height of the target buffer.</param>
            <param name="BufferStride">Stride of the buffer.</param>
            <param name="MigrateBy">How the pixel bits are shifted.</param>
            <param name="MigrateAlpha">If true, alpha bits will be migrated.</param>
            <param name="MigrateRed">If true, red bits will be migrated.</param>
            <param name="MigrateGreen">If true, blue bits will be migrated.</param>
            <param name="MigrateBlue">If true, green bits will be migrated.</param>
            <returns>Value indicating sucess.</returns>
        </member>
        <member name="M:ChannelShift(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Rotates the value of pixels in the buffer. Values are constrained to individual pixels.
</summary>
            <param name="Target">Target buffer that will have its pixels rotated.</param>
            <param name="BufferWidth">Width of the target buffer.</param>
            <param name="BufferHeight">Height of the target buffer.</param>
            <param name="BufferStride">Stride of the buffer.</param>
            <param name="ShiftBy">How the pixel bits are shifted.</param>
            <returns>Value indicating sucess.</returns>
        </member>
        <member name="M:ExtractPixelData(System.Byte,System.Byte)">
            <summary>
Given a source byte, extract and return the value determined by the mask.
</summary>
            <param name="Source">The source byte whose data will be extracted.</param>
            <param name="MaskSize">Determines the location of the data in the source.</param>
            <returns>The data in the source byte.</returns>
        </member>
        <member name="M:MergePixelData(System.Byte,System.Byte,System.Byte)">
            <summary>
Create a new byte value from <paramref name="Original" /> and the value in <paramref name="Source" /> and return
the result.
</summary>
            <param name="Original">The original value of the byte from the passed buffer.</param>
            <param name="Source">
The value to merge with <paramref name="Original" />. Value is masked apprpropriately to avoid overwriting data.
</param>
            <param name="MaskSize">Determines how much of the original data is used to store <paramref name="Source" />.</param>
            <returns>
New, merged value. 0 is returned on error.
</returns>
        </member>
        <member name="M:ErrorConstantToString(System.Int32)">
            <summary>
Return a string description for the passed error/return code.
</summary>
            <param name="ErrorConstant">The error/return code the description is desired for.</param>
            <returns>Description of the error/return code. If the code is unknown, an empty string is returned.</returns>
        </member>
        <member name="M:RotateBufferRight(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32)">
            <summary>
Rotate the source buffer 90 degrees to the right and place the result in the supplied destination buffer.
</summary>
            <param name="Source">The image to rotate.</param>
            <param name="SourceWidth">Width of the source in pixels.</param>
            <param name="SourceHeight">Height of the source in scan lines.</param>
            <param name="SourceStride">Stride of the source.</param>
            <param name="Destination">Where the rectangle will be rendered.</param>
            <param name="DestinationWidth">Width of the destination in pixels.</param>
            <param name="DestinationHeight">Height of the destination in scan lines.</param>
            <param name="DestinationStride">Stride of the destination.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:CardinalImageRotate(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Rotate an image and place the result in the destination. Rotates the image 90 right or 90 left only.
</summary>
            <param name="Source">Source image.</param>
            <param name="SourceWidth">Width of the source image.</param>
            <param name="SourceHeight">Height of the source image.</param>
            <param name="SourceStride">Stride of the source image.</param>
            <param name="Destination">Destination image.</param>
            <param name="DestinationWidth">Width of the destination image.</param>
            <param name="DestinationHeight">Height of the destination image.</param>
            <param name="DestinationStride">Stride of the destination image.</param>
            <param name="RotateLeft">Determines rotation direction.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:ImageRotate90(System.Void*,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32)">
            <summary>
Rotate an image by 90 degrees and place the result in the destination.
</summary>
            <remarks>
Stride is not required because this function moves pixels as a whole, eg, 32-bit values, not on a
color channel (byte) basis.
</remarks>
            <param name="Source">Source image.</param>
            <param name="SourceWidth">Width of the source image.</param>
            <param name="SourceHeight">Height of the source image.</param>
            <param name="Destination">Destination image.</param>
            <param name="DestinationWidth">Width of the destination image.</param>
            <param name="DestinationHeight">Height of the destination image.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:ImageRotate(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Double,System.UInt32)">
            <summary>
Rotate an image and place the result in the destination.
</summary>
            <param name="Source">Source image.</param>
            <param name="SourceWidth">Width of the source image.</param>
            <param name="SourceHeight">Height of the source image.</param>
            <param name="SourceStride">Stride of the source image.</param>
            <param name="Destination">Destination image.</param>
            <param name="DestinationWidth">Width of the destination image.</param>
            <param name="DestinationHeight">Height of the destination image.</param>
            <param name="DestinationStride">Stride of the destination image.</param>
            <param name="Rotation">Degrees to rotate.</param>
            <param name="FillColor">Background color for the destination image.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:ImageRotateRight180(System.Void*,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32)">
            <summary>
Rotate an image by 180 degrees right (clockwise) and place the result in the destination.
</summary>
            <remarks>
Stride is not required because this function moves pixels as a whole, eg, 32-bit values, not on a
color channel (byte) basis.
</remarks>
            <param name="Source">Source image.</param>
            <param name="SourceWidth">Width of the source image.</param>
            <param name="SourceHeight">Height of the source image.</param>
            <param name="Destination">Destination image.</param>
            <param name="DestinationWidth">Width of the destination image.</param>
            <param name="DestinationHeight">Height of the destination image.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:ImageRotateRight270(System.Void*,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32)">
            <summary>
Rotate an image by 270 degrees right (clockwise) (AKA 90 degrees counterclockwise) and place the result in the destination.
</summary>
            <remarks>
Stride is not required because this function moves pixels as a whole, eg, 32-bit values, not on a
color channel (byte) basis.
</remarks>
            <param name="Source">Source image.</param>
            <param name="SourceWidth">Width of the source image.</param>
            <param name="SourceHeight">Height of the source image.</param>
            <param name="Destination">Destination image.</param>
            <param name="DestinationWidth">Width of the destination image.</param>
            <param name="DestinationHeight">Height of the destination image.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:ImageRotateRight90(System.Void*,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32)">
            <summary>
Rotate an image by 90 degrees right (clockwise) and place the result in the destination.
</summary>
            <remarks>
Stride is not required because this function moves pixels as a whole, eg, 32-bit values, not on a
color channel (byte) basis.
</remarks>
            <param name="Source">Source image.</param>
            <param name="SourceWidth">Width of the source image.</param>
            <param name="SourceHeight">Height of the source image.</param>
            <param name="Destination">Destination image.</param>
            <param name="DestinationWidth">Width of the destination image.</param>
            <param name="DestinationHeight">Height of the destination image.</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:ImageRotateRightBy(System.Void*,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32)">
            <summary>
Rotate the image in <paramref name="Source" /> by the specified number of degrees.
</summary>
            <param name="Source">Source image.</param>
            <param name="SourceWidth">Width of the source image.</param>
            <param name="SourceHeight">Height of the source image.</param>
            <param name="Destination">Destination image.</param>
            <param name="DestinationWidth">Width of the destination image.</param>
            <param name="DestinationHeight">Height of the destination image.</param>
            <param name="RotateHow">
Number of degrees to rotate the image in a clockwise dirction. Must be one of
90, 180, or 270. Other values will result in an error returned.
</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:SwapImageBuffers(System.Void*,System.Void*,System.Int32,System.Int32,System.Int32)">
            <summary>
Swap the contents of two buffers with the same dimensions.
</summary>
            <param name="Buffer1">The first buffer.</param>
            <param name="Buffer2">The second buffer.</param>
            <param name="Width">Width of both buffers.</param>
            <param name="Height">Height of both buffers.</param>
            <param name="Stride">Stride of both buffers.</param>
        </member>
        <member name="M:CopyCircularBuffer(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
Copy a circular region from <paramref name="Source" />. to <paramref name="Destination" />. Non-copied region of the destination
is filled by the color specified in <paramref name="PackedBG" />.
</summary>
            <param name="Source">Pointer to the source image.</param>
            <param name="Width">Width of the source image.</param>
            <param name="Height">Height of the source image.</param>
            <param name="Stride">Stride of the source image.</param>
            <param name="Destination">Where the circular region will be copied to.</param>
            <param name="DestWidth">Width of the destination buffer.</param>
            <param name="DestHeight">Height of the destination buffer.</param>
            <param name="DestStride">Stride of the destination buffer.</param>
            <param name="X">Horizontal coordinate of the circle to copy.</param>
            <param name="Y">Vertical coordinate of the circle to copy.</param>
            <param name="Radius">Radius of the circle to copy.</param>
            <param name="PackedBG">Packed background color used to fill non-circular pixels.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:ClearBuffer2(System.Void*,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
Clears the buffer pointed to by <paramref name="Destination" /> with the color in <paramref name="FillColor" />.
</summary>
            <param name="Destination">The buffer to be cleared.</param>
            <param name="Width">Width of the buffer.</param>
            <param name="Height">Height of the buffer.</param>
            <param name="Stride">Stride of the buffer.</param>
            <param name="FillColor">Packed color used to clear the buffer.</param>
            <returns>Value indication operational success.</returns>
        </member>
        <member name="M:CopyBufferToBuffer(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
Copies the contents of <paramref name="Source" /> to <paramref name="Destination" />.
</summary>
            <param name="Source">Source buffer.</param>
            <param name="Width">Width of the source and destination.</param>
            <param name="Height">Height of the source and destination.</param>
            <param name="Stride">Stride of the source and destination.</param>
            <param name="Destination">Where the contents of <paramref name="Source" /> will be copied.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:PasteRegion4(System.Void*,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Paste a buffer into the destination buffer. Source regions outside the destination will be cropped.
</summary>
            <param name="Destination">The target buffer for the paste.</param>
            <param name="DestWidth">Width of the destination in pixels.</param>
            <param name="DestHeight">Height of the destination in scan lines.</param>
            <param name="Source">The buffer that will be pasted into <paramref name="Destination" />.</param>
            <param name="SourceWidth">Width of the source in pixels.</param>
            <param name="SourceHeight">Height of the source in scan lines.</param>
            <param name="UpperLeft">Pointer to the upper-left coordinate in the destination where the paste will occur.</param>
            <param name="LowerRight">Pointer to the lower-right coordinate in the destination where the paste will occur.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:PasteRegion3(System.Void*,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Void*,System.Void*)">
            <summary>
Paste a buffer into the destination buffer. Source regions outside the destination will be cropped.
</summary>
            <param name="Destination">The target buffer for the paste.</param>
            <param name="DestWidth">Width of the destination in pixels.</param>
            <param name="DestHeight">Height of the destination in scan lines.</param>
            <param name="Source">The buffer that will be pasted into <paramref name="Destination" />.</param>
            <param name="SourceWidth">Width of the source in pixels.</param>
            <param name="SourceHeight">Height of the source in scan lines.</param>
            <param name="UpperLeft">Pointer to the upper-left coordinate in the destination where the paste will occur.</param>
            <param name="LowerRight">Pointer to the lower-right coordinate in the destination where the paste will occur.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:PasteRegion2(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*)">
            <summary>
Paste a buffer into the destination buffer. Source regions outside the destination will be cropped.
</summary>
            <param name="Destination">The target buffer for the paste.</param>
            <param name="DestWidth">Width of the destination in pixels.</param>
            <param name="DestHeight">Height of the destination in scan lines.</param>
            <param name="DestStride">Stride of the destination.</param>
            <param name="Source">The buffer that will be pasted into <paramref name="Destination" />.</param>
            <param name="SourceWidth">Width of the source in pixels.</param>
            <param name="SourceHeight">Height of the source in scan lines.</param>
            <param name="SourceStride">Stride of the source.</param>
            <param name="UpperLeft">Pointer to the upper-left coordinate in the destination where the paste will occur.</param>
            <param name="LowerRight">Pointer to the lower-right coordinate in the destination where the paste will occur.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:PasteRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*)">
            <summary>
Paste a buffer into the destination buffer.
</summary>
            <param name="Destination">The target buffer for the paste.</param>
            <param name="DestWidth">Width of the destination in pixels.</param>
            <param name="DestHeight">Height of the destination in scan lines.</param>
            <param name="DestStride">Stride of the destination.</param>
            <param name="Source">The buffer that will be pasted into <paramref name="Destination" />.</param>
            <param name="SourceWidth">Width of the source in pixels.</param>
            <param name="SourceHeight">Height of the source in scan lines.</param>
            <param name="SourceStride">Stride of the source.</param>
            <param name="UpperLeft">Pointer to the upper-left coordinate in the destination where the paste will occur.</param>
            <param name="LowerRight">Pointer to the lower-right coordinate in the destination where the paste will occur.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:CopyRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Void*,System.Void*)">
            <summary>
Copy a subset region from the source buffer and place it into the destination buffer. The region to be copied must have
coordinates valid for the source buffer. The coordinates must be semantically correct (upper-left less than lower-right).
</summary>
            <param name="Source">The source image.</param>
            <param name="SourceWidth">Width of the source in pixels.</param>
            <param name="SourceHeight">Height of the source in scan lines.</param>
            <param name="SourceStride">Stride of the source.</param>
            <param name="Destination">Where the rectangle will be rendered.</param>
            <param name="DestinationWidth">Width of the destination in pixels.</param>
            <param name="DestinationHeight">Height of the destination in scan lines.</param>
            <param name="DestinationStride">Stride of the destination.</param>
            <param name="UpperLeft">Pointer to the upper-left coordinate of the region to copy.</param>
            <param name="LowerRight">Pointer to the lower-right coordinate of the region to copy.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:CopyVerticalLine(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32)">
            <summary>
Copy a column of data (one pixel wide) from 1 to <paramref name="ColumnCount" /> times to the destination buffer.
</summary>
            <param name="Destination">Where the rectangle will be rendered.</param>
            <param name="Width">Width of the destination in pixels.</param>
            <param name="Height">Height of the destination in scan lines.</param>
            <param name="Stride">Stride of the destination.</param>
            <param name="ColumnBuffer">Pointer to the column to copy.</param>
            <param name="ColumnCount">
Number of times to copy the column to the destination. Vertical starting point in the destination is updated after each copy.
</param>
            <param name="ColumnStart">Where to start copying to the buffer, e.g., which destination column.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:CopyHorizontalLine(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32)">
            <summary>
Copy a single line to a buffer. The line must have the same stride as the buffer.
</summary>
            <param name="Destination">Where the rectangle will be rendered.</param>
            <param name="Width">Width of the destination in pixels.</param>
            <param name="Height">Height of the destination in scan lines.</param>
            <param name="Stride">Stride of the destination.</param>
            <param name="LineBuffer">Pointer to the line to copy.</param>
            <param name="LineCount">
Number of times to copy the line to the destination. Vertical starting point in the destination is updated after each copy.
</param>
            <param name="LineStart">Where to start copying to the buffer, e.g., which line.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:CopyBuffer3(System.Void*,System.UInt32,System.Void*)">
            <summary>
Copies the image (or any memory buffer) in <paramref name="Source" /> to <paramref name="Destination" />.
</summary>
            <param name="Source">Source buffer/image to copy.</param>
            <param name="BufferSize">
Size in bytes of the buffer to copy. Both <paramref name="Source" /> and <paramref name="Destination" />
must be the same size.
</param>
            <param name="Destination">Destination of the copy operation.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:CopyBuffer2(System.Void*,System.Int32,System.Int32,System.Void*)">
            <summary>
Copies the image in <paramref name="Source" /> to <paramref name="Destination" />.
</summary>
            <param name="Source">Source buffer.</param>
            <param name="Width">Width of both <paramref name="Source" /> and <paramref name="Destination" />.</param>
            <param name="Height">Height of both <paramref name="Source" /> and <paramref name="Destination" />.</param>
            <param name="Destination">Destination buffer.</param>
        </member>
        <member name="M:InPlaceReverseScanLine(System.UInt32*,System.Int32)">
            <summary>
Reverse, in place, a scanline.
</summary>
            <param name="ScanLine">The scanline to reverse.</param>
            <param name="PixelCount">Number of pixels in the scanline.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:SwapPixel(System.UInt32*,System.UInt32*)">
            <summary>
Swap two pixels.
</summary>
            <param name="Pixel1">First pixel.</param>
            <param name="Pixel2">Second pixel.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:CountUniqueColors(System.Void*,System.Int32,System.Int32,System.UInt32*)">
            <summary>
Count the number of unique colors in the passed image. Alpha is ignored and zeroed out in all calculations.
</summary>
            <param name="Source">Source image buffer.</param>
            <param name="Width">Width of the image in pixels.</param>
            <param name="Height">Height of the image in scanlines.</param>
            <param name="UniqueColorCount">On success, will contain the number of unique colors.</param>
            <returns>Value indicating operational result.</returns>
        </member>
        <member name="M:ReturnUniqueColors(System.Void*,System.Int32,System.Int32,System.UInt32*,System.Void*,System.Int32)">
            <summary>
Counts and returns the number of unique colors in the passed image. Alpha is ignored and zeroed out in all calculations.
</summary>
            <param name="Source">Source image buffer.</param>
            <param name="Width">Width of the image in pixels.</param>
            <param name="Height">Height of the image in scanlines.</param>
            <param name="UniqueColorCount">On success, will contain the number of unique colors.</param>
            <param name="Results">
Array of color/count pairs. Size of array is dependent on the number of unique colors and
<paramref name="ColorsToReturn" />. Results must be allocated by the caller.
</param>
            <param name="ColorsToReturn">
The number of colors to return. Colors are sorted in descending count order before being returned.
</param>
            <returns>Value indicating operational result.</returns>
        </member>
        <member name="M:GetLargestQuantities(System.UInt32*,System.Int32,System.Int32,ColorResult*)">
            <summary>
Return a list of a specified number of colors based on color counts.
</summary>
            <param name="ColorCounts">Array of counts for all colors in the color space.</param>
            <param name="MaxColors">Size of <paramref name="ColorCounts" />.</param>
            <param name="GreatestCount">Determines the number of colors to return.</param>
            <param name="Results">Where the results are returned.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="F:ColorResult.Initialized">
            <summary>
Structure is initialized.
</summary>
        </member>
        <member name="F:ColorResult.ColorCount">
            <summary>
The number of instances of the color.
</summary>
        </member>
        <member name="F:ColorResult.ColorValue">
            <summary>
The color value (with alpha zeroed out).
</summary>
        </member>
        <member name="T:ColorResult">
            <summary>
Contains one color count value.
</summary>
        </member>
        <member name="M:SimpleHorizontalKaleidoscope(System.Void*,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
Mirror an image horizontally (e.g., left and right). This funtion works on whole pixels so stide is not needed.
</summary>
            <param name="Source">Image source.</param>
            <param name="Width">Width of the source and destination.</param>
            <param name="Height">Height of the source and destination.</param>
            <param name="Destination">Where the final image will be placed.</param>
            <param name="Pivot">If non-zero, the X coordinate where the mirroring will take place.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:SimpleVerticalKaleidoscope(System.Void*,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
Mirror an image vertically (e.g., top and bottom). This funtion works on whole pixels so stide is not needed.
</summary>
            <param name="Source">Image source.</param>
            <param name="Width">Width of the source and destination.</param>
            <param name="Height">Height of the source and destination.</param>
            <param name="Destination">Where the final image will be placed.</param>
            <param name="Pivot">If non-zero, the Y coordinate where the mirroring will take place.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:MeanImageColor(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
Return an image with the mean color derived from <paramref name="Source" />.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Stride">Stride of the source and destination images.</param>
            <param name="Destination">Where the mean color will be drawn.</param>
            <returns>Value indicating operational result.</returns>
        </member>
        <member name="M:MeanImageColorRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
Return an image with the mean color derived from <paramref name="Source" />.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Stride">Stride of the source and destination images.</param>
            <param name="Destination">Where the mean color will be drawn.</param>
            <param name="Left">Left coordinate of the operational region.</param>
            <param name="Top">Top coordinate of the operational region.</param>
            <param name="Right">Right coordinate of the operational region.</param>
            <param name="Bottom">Bottom coordinate of the operational region.</param>
            <param name="CopyOutOfRegion">
If True, non-operational pixels will be copied to the destination. Otherwise, pixels of the color <paramref name="PackedOut" />
will be copied.
</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:ImageMeanColor(System.Void*,System.Int32,System.Int32,System.Int32,System.UInt32*)">
            <summary>
Return the mean color for the image pointed to by <paramref name="Source" />.
</summary>
            <param name="Source">Pointer to the image whose mean color will be returned.</param>
            <param name="Width">Width of the source image.</param>
            <param name="Height">Height of the source image.</param>
            <param name="Stride">Stride of the source image.</param>
            <param name="PackedMeanColor">On success, will contain the image's mean color in packed format.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:ImageMeanColorRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.UInt32*,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Return the mean color for the image pointed to by <paramref name="Source" />.
</summary>
            <param name="Source">Pointer to the image whose mean color will be returned.</param>
            <param name="Width">Width of the source image.</param>
            <param name="Height">Height of the source image.</param>
            <param name="Stride">Stride of the source image.</param>
            <param name="PackedMeanColor">On success, will contain the image's mean color in packed format.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:BrightnessMap(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
Return a brightness (luminance) image derived from <paramref name="Source" />.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Stride">Stride of the source and destination images.</param>
            <param name="Destination">Where the brightness will be drawn.</param>
            <returns>Value indicating operational result.</returns>
        </member>
        <member name="M:BrightnessMapRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
Return a brightness (luminance) image derived from <paramref name="Source" /> for the given region.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Stride">Stride of the source and destination images.</param>
            <param name="Destination">Where the brightness will be drawn.</param>
            <param name="Left">Left coordinate of the operational region.</param>
            <param name="Top">Top coordinate of the operational region.</param>
            <param name="Right">Right coordinate of the operational region.</param>
            <param name="Bottom">Bottom coordinate of the operational region.</param>
            <param name="CopyOutOfRegion">
If True, non-operational pixels will be copied to the destination. Otherwise, pixels of the color <paramref name="PackedOut" />
will be copied.
</param>
            <returns>Value indicating operational result.</returns>
        </member>
        <member name="M:AutoContrast(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Double)">
            <summary>
Auto adjust the contrast of <paramref name="Source" />.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Stride">Stride of the source and destination images.</param>
            <param name="Destination">Where the adjusted image will be drawn.</param>
            <param name="Contrast">Contrast value.</param>
            <returns>Value indicating operational result.</returns>
        </member>
        <member name="M:AutoContrastRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
Auto adjust the contrast of <paramref name="Source" />.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Stride">Stride of the source and destination images.</param>
            <param name="Destination">Where the adjusted image will be drawn.</param>
            <param name="Contrast">Contrast value.</param>
            <param name="Left">Left coordinate of the operational region.</param>
            <param name="Top">Top coordinate of the operational region.</param>
            <param name="Right">Right coordinate of the operational region.</param>
            <param name="Bottom">Bottom coordinate of the operational region.</param>
            <param name="CopyOutOfRegion">
If TRUE, pixels from the source are copied to the destination if they are not in the operational region. If FALSE,
the color in <paramref name="PackedOut" /> is used for non-operational region pixels.
</param>
            <param name="PackedOut">Packed color to use if <paramref name="CopyOutOfRegion" /> is TRUE.</param>
            <returns>Value indicating operational result.</returns>
        </member>
        <member name="M:AutoSaturate(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
Auto adjust the saturation of <paramref name="Source" />.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Stride">Stride of the source and destination images.</param>
            <param name="Destination">Where the saturation adjusted image will be drawn.</param>
            <param name="Saturation">Saturation value.</param>
            <returns>Value indicating operational result.</returns>
        </member>
        <member name="M:AutoSaturateRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
Auto adjust the saturation of <paramref name="Source" />.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Stride">Stride of the source and destination images.</param>
            <param name="Destination">Where the saturation adjusted image will be drawn.</param>
            <param name="Saturation">Saturation value.</param>
            <param name="Left">Left coordinate of the operational region.</param>
            <param name="Top">Top coordinate of the operational region.</param>
            <param name="Right">Right coordinate of the operational region.</param>
            <param name="Bottom">Bottom coordinate of the operational region.</param>
            <param name="CopyOutOfRegion">
If TRUE, pixels from the source are copied to the destination if they are not in the operational region. If FALSE,
the color in <paramref name="PackedOut" /> is used for non-operational region pixels.
</param>
            <param name="PackedOut">Packed color to use if <paramref name="CopyOutOfRegion" /> is TRUE.</param>
            <returns>Value indicating operational result.</returns>
        </member>
        <member name="M:ColorThreshold3(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*,System.Int32)">
            <summary>
Change colors in the image depending on the original pixel's luminance.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Stride">Stride of the source and destination images.</param>
            <param name="Destination">Where the final image will be drawn.</param>
            <param name="ThresholdList">Pointer to a list of thresholds that determine which colors are drawn for which luminances.</param>
            <param name="ListCount">Number of items in the threshold list.</param>
            <returns>Value indicating operational result.</returns>
        </member>
        <member name="M:ColorThreshold2(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Double,System.UInt32,System.Double,System.UInt32)">
            <summary>
Generate a threshold image based on <paramref name="Source" /> with low, middle, and high regions where the middle region consists
of unmodified source data.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Stride">Stride of the source and destination images.</param>
            <param name="Destination">Where the adjusted image will be drawn.</param>
            <param name="LowThreshold">Luminance value below which <paramref name="PackedLowColor" /> will be used in the destination image.</param>
            <param name="PackedLowColor">Color used when the luminance is below (or equal to) <paramref name="LowThreshold" />.</param>
            <param name="HighThreshold">Luminance value above which <paramref name="PackedHighColor" /> will be used in the destination image.</param>
            <param name="PackedHighColor">Color used when the luminance is above (or equal to) <paramref name="HighThreshold" />.</param>
            <returns>Value indicating operational result.</returns>
        </member>
        <member name="M:ColorThreshold(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Double,System.UInt32,System.UInt32)">
            <summary>
Generate a threshold image based on <paramref name="Source" /> with low, and high regions.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Stride">Stride of the source and destination images.</param>
            <param name="Destination">Where the adjusted image will be drawn.</param>
            <param name="Threshold">Luminance value that determines which color will be used.</param>
            <param name="PackedLowColor">Color used when the luminance is below (or equal to) <paramref name="Threshold" />.</param>
            <param name="PackedHighColor">Color used when the luminance is above (or equal to) <paramref name="Threshold" />.</param>
            <returns>Value indicating operational result.</returns>
        </member>
        <member name="M:ColorThreshold0(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Double,System.UInt32,System.Int32)">
            <summary>
Generate a threshold image based on <paramref name="Source" /> with low, and high regions.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Stride">Stride of the source and destination images.</param>
            <param name="Destination">Where the adjusted image will be drawn.</param>
            <param name="Threshold">Luminance value that determines which color will be used.</param>
            <param name="PackedColor">Color used when the luminance is less than <paramref name="Threshold" />.</param>
            <param name="InvertThreshold">If TRUE, the threshold usage flag is inverted.</param>
            <returns>Value indicating operational result.</returns>
        </member>
        <member name="M:SepiaTone(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
Create a sepia toned version of <paramref name="Source" />.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Stride">Stride of the source and destination images.</param>
            <param name="Destination">Where the sepia image will be drawn.</param>
            <returns>Value indicating operational result.</returns>
        </member>
        <member name="M:SepiaToneRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
Create a sepia toned version of <paramref name="Source" />.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Stride">Stride of the source and destination images.</param>
            <param name="Destination">Where the sepia image will be drawn.</param>
            <param name="Left">Left coordinate of the operational region.</param>
            <param name="Top">Top coordinate of the operational region.</param>
            <param name="Right">Right coordinate of the operational region.</param>
            <param name="Bottom">Bottom coordinate of the operational region.</param>
            <param name="CopyOutOfRegion">
If TRUE, pixels from the source are copied to the destination if they are not in the operational region. If FALSE,
the color in <paramref name="PackedOut" /> is used for non-operational region pixels.
</param>
            <param name="PackedOut">Packed color to use if <paramref name="CopyOutOfRegion" /> is TRUE.</param>
            <returns>Value indicating operational result.</returns>
        </member>
        <member name="M:SortChannels(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32)">
            <summary>
Sort the red, green, and blue channels of each pixel according to <paramref name="SortHow" />. Result return in
<paramref name="Destination" />.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the image.</param>
            <param name="Height">Height of the image.</param>
            <param name="Stride">Stride of the image.</param>
            <param name="Destination">Destination image. This buffer must have the same size as the source buffer.</param>
            <param name="SortHow">Determines sort order.</param>
            <param name="StoreSortHowAsAlpha">If TRUE, the sort order is stored in the destination image as the alpha channel value.</param>
            <param name="InvertAlpha">If TRUE, the alpha value is inverted.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:SortChannels2(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Double)">
            <summary>
Sort the red, green, and blue channels of each pixel according to <paramref name="SortHow" />. Result return in
<paramref name="Destination" />.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the image.</param>
            <param name="Height">Height of the image.</param>
            <param name="Stride">Stride of the image.</param>
            <param name="Destination">Destination image. This buffer must have the same size as the source buffer.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:RollingMeanChannels(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32)">
            <summary>
Calculate a running mean for all color channels (with the possible exception of the alpha channel).
</summary>
            <remarks>
Calls RollingMeanChannels2 with parameters derived from a call to this function.
</remarks>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the image.</param>
            <param name="Height">Height of the image.</param>
            <param name="Stride">Stride of the image.</param>
            <param name="Destination">Destination image. This buffer must have the same size as the source buffer.</param>
            <param name="WindowSize">Size of the rolling mean window. Size truncated for early pixels.</param>
            <param name="IncludeAlpha">
Determines if alpha is included in the rolling mean. In general, set this parameter to TRUE if all alpha channel values
are 0xff. Doing this provides better performance.
</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:RollingMeanChannels2(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Calculate a running mean for the specified channels.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the image.</param>
            <param name="Height">Height of the image.</param>
            <param name="Stride">Stride of the image.</param>
            <param name="Destination">Destination image. This buffer must have the same size as the source buffer.</param>
            <param name="AlphaWindowSize">Size of the alpha window. Size truncated for early pixel indices.</param>
            <param name="RedWindowSize">Size of the red window. Size truncated for early pixel indices.</param>
            <param name="GreenWindowSize">Size of the green window. Size truncated for early pixel indices.</param>
            <param name="BlueWindowSize">Size of the blue window. Size truncated for early pixel indices.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:SplitImageIntoHSLChannels(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*,System.Void*,System.Void*)">
            <summary>
Split the source image into component HSL channels.
</summary>
            <param name="Source">Pointer to the image to split.</param>
            <param name="Width">Width of the image.</param>
            <param name="Height">Height of the image.</param>
            <param name="Stride">Stride of the image.</param>
            <param name="AlphaDest">Pointer to the image that will contain the alpha component. If NULL, the alpha component is not split out. Must have same dimensions as <paramref name="Source" />.</param>
            <param name="HueDest">Pointer to the image that will contain the hue component. Must have same dimensions as <paramref name="Source" />.</param>
            <param name="SaturationDest">Pointer to the image that will contain the saturation component. Must have same dimensions as <paramref name="Source" />.</param>
            <param name="LuminanceDest">Pointer to the image that will contain the luminance component. Must have same dimensions as <paramref name="Source" />.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:SplitImageIntoChannels(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*,System.Void*,System.Void*)">
            <summary>
Split the source image into component ARGB channels.
</summary>
            <param name="Source">Pointer to the image to split.</param>
            <param name="Width">Width of the image.</param>
            <param name="Height">Height of the image.</param>
            <param name="Stride">Stride of the image.</param>
            <param name="AlphaDest">Pointer to the image that will contain the alpha component. If NULL, the alpha component is not split out. Must have same dimensions as <paramref name="Source" />.</param>
            <param name="RedDest">Pointer to the image that will contain the red component. Must have same dimensions as <paramref name="Source" />.</param>
            <param name="GreenDest">Pointer to the image that will contain the green component. Must have same dimensions as <paramref name="Source" />.</param>
            <param name="BlueDest">Pointer to the image that will contain the blue component. Must have same dimensions as <paramref name="Source" />.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:HSLChannelMerge(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*,System.Void*)">
            <summary>
Merge three channels into one image. Alpha is set to 0xff.
</summary>
            <param name="Destination">Pointer to the destination image buffer.</param>
            <param name="Width">Width of the image.</param>
            <param name="Height">Height of the image.</param>
            <param name="Stride">Stride of the image.</param>
            <param name="HueChannel">Pointer to the image with the hue channel data. Must have same dimensions as <paramref name="Destination" />.</param>
            <param name="SaturationChannel">Pointer to the image with the saturation channel data. Must have same dimensions as <paramref name="Destination" />.</param>
            <param name="LuminanceChannel">Pointer to the image with the luminance channel data. Must have same dimensions as <paramref name="Destination" />.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:ChannelMergeAlpha(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*,System.Void*,System.Void*)">
            <summary>
Merge four channels (red, green, blue and alpha) into one image.
</summary>
            <param name="Destination">Pointer to the destination image buffer.</param>
            <param name="Width">Width of the image.</param>
            <param name="Height">Height of the image.</param>
            <param name="Stride">Stride of the image.</param>
            <param name="AlphaChannel">Pointer to the image with the alpha channel data. Must have same dimensions as <paramref name="Destination" />.</param>
            <param name="RedChannel">Pointer to the image with the red channel data. Must have same dimensions as <paramref name="Destination" />.</param>
            <param name="GreenChannel">Pointer to the image with the green channel data. Must have same dimensions as <paramref name="Destination" />.</param>
            <param name="BlueChannel">Pointer to the image with the blue channel data. Must have same dimensions as <paramref name="Destination" />.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:ChannelMerge(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*,System.Void*)">
            <summary>
Merge three channels into one image.
</summary>
            <param name="Destination">Pointer to the destination image buffer.</param>
            <param name="Width">Width of the image.</param>
            <param name="Height">Height of the image.</param>
            <param name="Stride">Stride of the image.</param>
            <param name="RedChannel">Pointer to the image with the red channel data. Must have same dimensions as <paramref name="Destination" />.</param>
            <param name="GreenChannel">Pointer to the image with the green channel data. Must have same dimensions as <paramref name="Destination" />.</param>
            <param name="BlueChannel">Pointer to the image with the blue channel data. Must have same dimensions as <paramref name="Destination" />.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:CombineChannels32(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*,System.Void*,System.Void*)">
            <summary>
Merge four channels into one image. Each channel will be placed in a byte in the final UINT32.
</summary>
            <param name="Destination">Pointer to the destination image buffer.</param>
            <param name="Width">Width of the image.</param>
            <param name="Height">Height of the image.</param>
            <param name="Stride">Stride of the image.</param>
            <param name="Channel1">
Pointer to the image with channel 1 data. Must have same dimensions as <paramref name="Destination" />. Data placed
into index 0.
</param>
            <param name="Channel2">
Pointer to the image with channel 2 data. Must have same dimensions as <paramref name="Destination" />. Data placed
into index 1.
</param>
            <param name="Channel3">
Pointer to the image with channel 3 data. Must have same dimensions as <paramref name="Destination" />. Data placed
into index 2.
</param>
            <param name="Channel4">
Pointer to the image with channel 4 data. Must have same dimensions as <paramref name="Destination" />. Data placed
into index 3.
</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:InvertImage(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Boolean)">
            <summary>
Invert the colors of the image pointed to by <paramref name="Source" />.
</summary>
            <param name="Source">Pointer to the image to invert.</param>
            <param name="Width">Width of the image.</param>
            <param name="Height">Height of the image.</param>
            <param name="Stride">Stride of the image.</param>
            <param name="Destination">Destination of the inversion.</param>
            <param name="IncludeAlpha">Determines if alpha is inverted. Usually not a good idea but just in case...</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:InvertImageRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
Invert the colors of the image pointed to by <paramref name="Source" />.
</summary>
            <param name="Source">Pointer to the image to invert.</param>
            <param name="Width">Width of the image.</param>
            <param name="Height">Height of the image.</param>
            <param name="Stride">Stride of the image.</param>
            <param name="Destination">Destination of the inversion.</param>
            <param name="IncludeAlpha">Determines if alpha is inverted. Usually not a good idea but just in case...</param>
            <param name="Left">Left coordinate of the operational region.</param>
            <param name="Top">Top coordinate of the operational region.</param>
            <param name="Right">Right coordinate of the operational region.</param>
            <param name="Bottom">Bottom coordinate of the operational region.</param>
            <param name="CopyOutOfRegion">
If TRUE, pixels from the source are copied to the destination if they are not in the operational region. If FALSE,
the color in <paramref name="PackedOut" /> is used for non-operational region pixels.
</param>
            <param name="PackedOut">Packed color to use if <paramref name="CopyOutOfRegion" /> is TRUE.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:AlphaSolarizeImage2(System.Void*,System.Int32,System.Int32,System.Int32,System.Double,System.Byte)">
            <summary>
Sets the alpha channel based on the luminance of a given pixel.
</summary>
            <remarks>
http://www.cs.umb.edu/~jreyes/csit114-fall-2007/project4/filters.html
</remarks>
            <param name="Source">Pointer to the image buffer that will be solarized.</param>
            <param name="Width">Width of the image.</param>
            <param name="Height">Height of the image.</param>
            <param name="Stride">Stride of the image.</param>
            <param name="Threshold">Determines when solarization will occur. Normalized value. Clamped as normalized.</param>
            <param name="SolarAlpha">The alpha channel value if the luminance passes the <paramref name="Threshold" /> value.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:AlphaSolarizeImage(System.Void*,System.Int32,System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
Solarize the alpha component of the passed image.
</summary>
            <remarks>
http://www.cs.umb.edu/~jreyes/csit114-fall-2007/project4/filters.html
</remarks>
            <param name="Source">Pointer to the image buffer that will be solarized.</param>
            <param name="Width">Width of the image.</param>
            <param name="Height">Height of the image.</param>
            <param name="Stride">Stride of the image.</param>
            <param name="Threshold">Determines when solarization will occur. Normalized value. Clamped as normalized.</param>
            <param name="Invert">If TRUE, solarization is inverted with respect to the threshold.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:SolarizeImage(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Double,System.Int32)">
            <summary>
Solarize the passed image.
</summary>
            <remarks>
http://www.cs.umb.edu/~jreyes/csit114-fall-2007/project4/filters.html
</remarks>
            <param name="Source">Pointer to the image buffer that will be solarized.</param>
            <param name="Width">Width of the image.</param>
            <param name="Height">Height of the image.</param>
            <param name="Stride">Stride of the image.</param>
            <param name="Threshold">Determines when solarization will occur. Normalized value. Clamped as normalized.</param>
            <param name="Invert">If TRUE, solarization is inverted with respect to the threshold.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:ImageDeltaComparison(System.Void*,System.Void*,System.Int32,System.Int32,System.Int32,System.UInt32*)">
            <summary>
Compare two images with a simple byte-by-byte comparison.
</summary>
            <param name="Image1">First image to compare.</param>
            <param name="Image2">Second image to compare.</param>
            <param name="Width">Width of both images.</param>
            <param name="Height">Height of both images.</param>
            <param name="Stride">Stride of both images.</param>
            <param name="MismatchIndex">On miscompares, will contain the index of the first mismatch. Otherwise the contents are not defined.</param>
            <returns>On image equality, returns ImagesMatch. Otherwise returns ImageMismatch.</returns>
        </member>
        <member name="M:ImageDeltaComparisonRegion(System.Void*,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32*)">
            <summary>
Compare a region in two images with a simple byte-by-byte comparison.
</summary>
            <param name="Image1">First image to compare.</param>
            <param name="Image2">Second image to compare.</param>
            <param name="Width">Width of both images.</param>
            <param name="Height">Height of both images.</param>
            <param name="Stride">Stride of both images.</param>
            <param name="Left">The left coordinate of the region to compare.</param>
            <param name="Top">The top coordinate of the region to compare.</param>
            <param name="Right">The right coordinate of the region to compare.</param>
            <param name="Bottom">The bottom coordinate of the region to compare.</param>
            <param name="MismatchIndex">
On miscompares, will contain the index of the first mismatch. Otherwise the contents are not defined. The index is an index
into the entire image, not the specified region.
</param>
            <returns>On image equality, returns ImagesMatch. Otherwise returns ImageMismatch.</returns>
        </member>
        <member name="M:HSLtoRGB8(System.Double,System.Double,System.Double,System.Byte*,System.Byte*,System.Byte*)">
            <summary>
Convert the passed HSL color to an RGB color.
</summary>
            <param name="H">The hue value.</param>
            <param name="S">The saturation value.</param>
            <param name="L">The luminance value.</param>
            <param name="R">Resultant red channel value.</param>
            <param name="G">Resultant green channel value.</param>
            <param name="B">Resultant blue channel value.</param>
        </member>
        <member name="M:HSLtoNormalizedRGB(System.Double,System.Double,System.Double,System.Double*,System.Double*,System.Double*)">
            <summary>
Convert the passed HSL color to a normalized RGB color.
</summary>
            <param name="H">The hue value.</param>
            <param name="S">The saturation value.</param>
            <param name="L">The luminance value.</param>
            <param name="R">Resultant normalized red channel value.</param>
            <param name="G">Resultant normalized green channel value.</param>
            <param name="B">Resultant normalized blue channel value.</param>
        </member>
        <member name="M:RGB8ToHSL(System.Byte,System.Byte,System.Byte,System.Double*,System.Double*,System.Double*)">
            <summary>
Convert the passed RGB value to an HSL value.
</summary>
            <param name="R">Red channel value.</param>
            <param name="G">Green channel value.</param>
            <param name="B">Blue channel value.</param>
            <param name="H">The resultant hue value.</param>
            <param name="S">The resultant saturation value.</param>
            <param name="L">The resultant luminance value.</param>
        </member>
        <member name="M:NormalizedRGBtoHSL(System.Double,System.Double,System.Double,System.Double*,System.Double*,System.Double*)">
            <summary>
Convert the passed RGB value to an HSL value.
</summary>
            <param name="R">Red channel value. Normalized.</param>
            <param name="G">Green channel value. Normalized.</param>
            <param name="B">Blue channel value. Normalized.</param>
            <param name="H">The resultant hue value.</param>
            <param name="S">The resultant saturation value.</param>
            <param name="L">The resultant luminance value.</param>
        </member>
        <member name="M:OverallBrightness(System.Void*,System.Int32,System.Int32,System.Int32)">
            <summary>
Returns mean brightness of the passed image.
</summary>
            <param name="Source">Pointer to the source image to be measured.</param>
            <param name="Width">Width of the images.</param>
            <param name="Height">Height of the images.</param>
            <param name="Stride">Stride of the images.</param>
            <returns>Mean brightness of the image.</returns>
        </member>
        <member name="M:OverallBrightnessRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Returns mean brightness of the passed image.
</summary>
            <param name="Source">Pointer to the source image to be measured.</param>
            <param name="Width">Width of the images.</param>
            <param name="Height">Height of the images.</param>
            <param name="Stride">Stride of the images.</param>
            <param name="Left">Left coordinate of the operational region.</param>
            <param name="Top">Top coordinate of the operational region.</param>
            <param name="Right">Right coordinate of the operational region.</param>
            <param name="Bottom">Bottom coordinate of the operational region.</param>
            <returns>Mean brightness of the image.</returns>
        </member>
        <member name="M:MedianCutToIndexed(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*,System.Int32)">
            <summary>
Reduce the color count in the source image using a median cut algorithm and place the
result in the indexed destination image.
</summary>
            <remarks>
The dimensions (but not stride) must be the same for <paramref name="Source" /> and <paramref name="IndexedDestination" />.
</remarks>
            <param name="Source">Pointer to the source image to be reduced.</param>
            <param name="Width">Width of the images.</param>
            <param name="Height">Height of the images.</param>
            <param name="Stride">Stride of the images.</param>
            <param name="IndexedDestination">
Where the resultant image will be placed. The stride of this image is the same as the width of the image.
</param>
            <param name="PaletteData">Will contain the palette for the indexed image.</param>
            <param name="PaletteSize">Size of the final palette.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:MedianCut(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*)">
http://web.cs.wpi.edu/~matt/courses/cs563/talks/color_quant/CQindex.html
<summary>
Reduce the color count in the source image using a median cut algorithm and place the
result in the destination image.
</summary><remarks><paramref name="Destination" /> must have the same dimensions as <paramref name="Source" />, including stride. Use
MedianCutToIndexed to return an indexed image.
</remarks><param name="Source">Pointer to the source image to be reduced.</param><param name="Width">Width of the images.</param><param name="Height">Height of the images.</param><param name="Stride">Stride of the images.</param><param name="Destination">Where the resultant image will be placed.</param><returns>Value indicating operational success.</returns></member>
        <member name="M:ReduceColors(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*,System.Int32)">
            <summary>
Reduce the colors in an image using an octree.
</summary>
            <param name="Source">Pointer to the source image from which the octree is generated.</param>
            <param name="Width">Width of the source image.</param>
            <param name="Height">Height of the source image.</param>
            <param name="Stride">Stride of the source image.</param>
            <param name="Destination">Resultant (non-indexed) image with reduced colors.</param>
            <param name="OTree">The resultant octree.</param>
            <param name="OTreeCount">TBD</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:ReduceColor2(System.Void*,System.Byte,System.Byte,System.Byte)">
            <summary>
Reduce the passed color to a color from the passed octree.
</summary>
            <remarks>
Packs the passed color and calls ReduceColor.
</remarks>
            <param name="OTree">Octree with the set of desired colors.</param>
            <param name="Red">Red channel of the color to reduce.</param>
            <param name="Green">Green channel of the color to reduce.</param>
            <param name="Blue">Blue channel of the color to reduce.</param>
            <returns>Reduced color based on the passed color.</returns>
        </member>
        <member name="M:ReduceColor(System.Void*,System.UInt32)">
            <summary>
Reduce the packed color to a color from the passed octree.
</summary>
            <param name="OTree">Octree with the set of desired colors.</param>
            <param name="PackedColor">Packed ARGB color to reduce.</param>
            <returns>Reduced color based on <paramref name="PackedColor" />.</returns>
        </member>
        <member name="M:Octree(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32*)">
            <summary>
Generates an octree based on the passed image.
</summary>
            <remarks>
http://www.microsoft.com/msj/archive/S3F1.aspx
http://rosettacode.org/wiki/Color_quantization/C
http://www.codeproject.com/Articles/109133/Octree-Color-Palette
</remarks>
            <param name="Source">Pointer to the source image from which the octree is generated.</param>
            <param name="Width">Width of the source image.</param>
            <param name="Height">Height of the source image.</param>
            <param name="Stride">Stride of the source image.</param>
            <param name="Count">Desired number of colors in the resultant octree.</param>
            <param name="OTree">On success, the octree structure.</param>
            <param name="OTreeCount">TBD.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:RenderColorBlob(System.Void*,System.Int32,System.Int32,System.Int32,System.UInt32,System.Byte,System.Byte,System.UInt32)">
            <summary>
Render a color blob in the provided buffer. The buffer defines the size of the blob to render.
</summary>
            <param name="Target">Where the blob will be rendered.</param>
            <param name="ImageWidth">The width of the blob/target buffer.</param>
            <param name="ImageHeight">The height of the blob/target buffer.</param>
            <param name="ImageStride">The stride of the blob/target buffer.</param>
            <param name="BlobColor">Packed blob color.</param>
            <param name="CenterAlpha">The alpha value at the center of the blob.</param>
            <param name="EdgeAlpha">The alpha value at the edge of the blob.</param>
            <param name="EdgeColor">
The color of the border to draw around the edge of the enclosing rectangle. If this color's alpha is 0x0, no edge drawing is done.
</param>
            <returns>TRUE on success, FALSE on error.</returns>
        </member>
        <member name="M:DrawHorizontalLine(System.Byte*,System.Int32,System.Int32,System.Int32,System.Int32,PureColorType*)">
            <summary>
Draw a horizontal line in <paramref name="Buffer" />.
</summary>
            <param name="Buffer">The buffer where the line will be drawn.</param>
            <param name="Width">The width of the buffer.</param>
            <param name="Height">The height of the buffer.</param>
            <param name="Stride">The stride of the buffer.</param>
            <param name="ColorIndex">Determines where and what color the line will be.</param>
            <param name="ColorSet">Source for line location and color.</param>
        </member>
        <member name="M:DrawVerticalLine(System.Byte*,System.Int32,System.Int32,System.Int32,System.Int32,PureColorType*)">
            <summary>
Draw a vertical line in <paramref name="Buffer" />.
</summary>
            <param name="Buffer">The buffer where the line will be drawn.</param>
            <param name="Width">The width of the buffer.</param>
            <param name="Height">The height of the buffer.</param>
            <param name="Stride">The stride of the buffer.</param>
            <param name="ColorIndex">Determines where and what color the line will be.</param>
            <param name="ColorSet">Source for line location and color.</param>
        </member>
        <member name="M:DrawVerticalLine(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
Draw a vertical line. Does alpha blending.
</summary>
            <param name="Target">Where the drawing will be done.</param>
            <param name="TargetWidth">Width of the buffer where drawing will be done.</param>
            <param name="TargetHeight">Height of the buffer where drawing will be done.</param>
            <param name="TargetStride">Stride of the buffer where drawing will be done.</param>
            <param name="X">The column where the line will be drawn.</param>
            <param name="A">The alpha value of the line to draw.</param>
            <param name="R">The red value of the line to draw.</param>
            <param name="G">The green value of the line to draw.</param>
            <param name="B">The blue value of the line to draw.</param>
        </member>
        <member name="M:DrawHorizontalLine(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
Draw a horizontal line. Does alpha blending.
</summary>
            <param name="Target">Where the drawing will be done.</param>
            <param name="TargetWidth">Width of the buffer where drawing will be done.</param>
            <param name="TargetHeight">Height of the buffer where drawing will be done.</param>
            <param name="TargetStride">Stride of the buffer where drawing will be done.</param>
            <param name="Y">The row where the line will be drawn.</param>
            <param name="A">The alpha value of the line to draw.</param>
            <param name="R">The red value of the line to draw.</param>
            <param name="G">The green value of the line to draw.</param>
            <param name="B">The blue value of the line to draw.</param>
        </member>
        <member name="M:DrawAnyLine(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte,System.Int32,System.Int32)">
            <summary>
Draw a line from the two specfied points using the specified color. Parts of lines that extend beyond the bounds set by
<paramref name="TargetWidth" /> and <paramref name="TargetHeight" /> are not drawn.
</summary>
            <param name="Target">Where the drawing will be done.</param>
            <param name="TargetWidth">Width of the buffer where drawing will be done.</param>
            <param name="TargetHeight">Height of the buffer where drawing will be done.</param>
            <param name="TargetStride">Stride of the buffer where drawing will be done.</param>
            <param name="X1">First horizontal coordinate.</param>
            <param name="Y1">First vertical coordinate.</param>
            <param name="X2">Second horizontal coordinate.</param>
            <param name="Y2">Second vertical coordinate.</param>
            <param name="A">The alpha value of the line to draw.</param>
            <param name="R">The red value of the line to draw.</param>
            <param name="G">The green value of the line to draw.</param>
            <param name="B">The blue value of the line to draw.</param>
            <returns>True on success, false on error.</returns>
        </member>
        <member name="M:DrawLine(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
Draw a horizontal or vertical line.
</summary>
            <param name="Target">Where the drawing will be done.</param>
            <param name="TargetWidth">Width of the buffer where drawing will be done.</param>
            <param name="TargetHeight">Height of the buffer where drawing will be done.</param>
            <param name="TargetStride">Stride of the buffer where drawing will be done.</param>
            <param name="IsHorizontal">Determines if a horizontal or vertical line will be drawn.</param>
            <param name="Coordinate">The column where the line will be drawn.</param>
            <param name="A">The alpha value of the line to draw.</param>
            <param name="R">The red value of the line to draw.</param>
            <param name="G">The green value of the line to draw.</param>
            <param name="B">The blue value of the line to draw.</param>
        </member>
        <member name="M:DrawBlocks(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.UInt32)">
            <summary>
Draws a set of color blocks using alpha blending.
</summary>
            <param name="Target">Where the drawing will take place.</param>
            <param name="TargetWidth">The width of the target in pixels. Each pixel is four bytes wide.</param>
            <param name="TargetHeight">The height of the target in scanlines.</param>
            <param name="TargetStride">The stride of the target.</param>
            <param name="ColorBlockList">Array of information on how to draw the color blocks.</param>
            <param name="ColorBlockCount">Number of color blocks in the ColorBlockList.</param>
            <param name="DefaultColor">The background color when there are no blocks. Format is BGRA.</param>
            <returns>True on success, false on error.</returns>
        </member>
        <member name="M:CreateHistogram(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*,System.Void*,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*,System.Void*,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Create a histogram with the supplied number of bins for the buffer pointer to by <paramref name="Source" />.
</summary>
            <param name="Source">The buffer used to create the histogram.</param>
            <param name="SourceWidth">Width of the buffer in pixels.</param>
            <param name="SourceHeight">Height of the buffer in scan lines.</param>
            <param name="SourceStride">Stride of the buffer.</param>
            <param name="BinCount">Number of bins. Clamped to 8 to 256.</param>
            <param name="RawRed">On success, will contain the raw number of red pixels per bin.</param>
            <param name="PercentRed">On success, will contain the percentage per bin for the red channel.</param>
            <param name="GreenCount">On success, will contain the total number of red pixels.</param>
            <param name="RawGreen">On success, will contain the raw number of green pixels per bin.</param>
            <param name="PercentGreen">On success, will contain the percentage per bin for the green channel.</param>
            <param name="GreenCount">On success, will contain the total number of green pixels.</param>
            <param name="RawBlue">On success, will contain the raw number of blue pixels per bin.</param>
            <param name="PercentBlue">On success, will contain the percentage per bin for the blue channel.</param>
            <param name="BlueCount">On success, will contain the total number of blue pixels.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:CreateHistogramRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*,System.Void*,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*,System.Void*,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Create a histogram with the supplied number of bins for a region in the buffer pointer to by <paramref name="Source" />.
</summary>
            <param name="Source">The buffer used to create the histogram.</param>
            <param name="SourceWidth">Width of the buffer in pixels.</param>
            <param name="SourceHeight">Height of the buffer in scan lines.</param>
            <param name="SourceStride">Stride of the buffer.</param>
            <param name="BinCount">Number of bins. Clamped to 8 to 256.</param>
            <param name="RawRed">On success, will contain the raw number of red pixels per bin.</param>
            <param name="PercentRed">On success, will contain the percentage per bin for the red channel.</param>
            <param name="GreenCount">On success, will contain the total number of red pixels.</param>
            <param name="RawGreen">On success, will contain the raw number of green pixels per bin.</param>
            <param name="PercentGreen">On success, will contain the percentage per bin for the green channel.</param>
            <param name="GreenCount">On success, will contain the total number of green pixels.</param>
            <param name="RawBlue">On success, will contain the raw number of blue pixels per bin.</param>
            <param name="PercentBlue">On success, will contain the percentage per bin for the blue channel.</param>
            <param name="BlueCount">On success, will contain the total number of blue pixels.</param>
            <param name="Left">Left coordinate of the operational region.</param>
            <param name="Top">Top coordinate of the operational region.</param>
            <param name="Right">Right coordinate of the operational region.</param>
            <param name="Bottom">Bottom coordinate of the operational region.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:RestrictHueRange(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Double,System.Double)">
            <summary>
Restrict various HSL channel values to certain ranges.
</summary>
            <param name="SurfaceBuffer">Source image.</param>
            <param name="SourceWidth">Width of the source image.</param>
            <param name="SourceHeight">Height of the source image.</param>
            <param name="SourceStride">Stride of the source image.</param>
            <param name="DestinationBuffer">Destination of the changes. Must be same dimensionally as <paramref name="SourceBuffer" />.</param>
            <param name="LowHue">The low hue range value.</param>
            <param name="HighHue">the high hue range value.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:RestrictHues2(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Double)">
            <summary>
Restrict various HSL channel values to certain ranges.
</summary>
            <param name="SurfaceBuffer">Source image.</param>
            <param name="SourceWidth">Width of the source image.</param>
            <param name="SourceHeight">Height of the source image.</param>
            <param name="SourceStride">Stride of the source image.</param>
            <param name="DestinationBuffer">Destination of the changes. Must be same dimensionally as <paramref name="SourceBuffer" />.</param>
            <param name="HueCount">Number of hues to restrict the image to.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:RGBtoHSLtoRGB(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
Convert each pixel in <pararef name="Source" /> from RGB to HSL and back to RGB.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source image.</param>
            <param name="Height">Height of the source image.</param>
            <param name="Stride">Stride of the source image.</param>
            <param name="Destination">Destination of the changes. Must be same dimensionally as <paramref name="Source" />.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:HSLConditionalModify(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*,System.Int32)">
            <summary>
Conditionally modify H, S, or L values based on the conditions in <paramref name="Conditions" />. Whether
or not modification takes place depends on the hue matching the conditional range.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source image.</param>
            <param name="Height">Height of the source image.</param>
            <param name="Stride">Stride of the source image.</param>
            <param name="Destination">Destination of the changes. Must be same dimensionally as <paramref name="Source" />.</param>
            <param name="Conditions">Pointer to an array of ConditionalHSLAdjustment structures.</param>
            <param name="ConditionalCount">
Number of ConditionalHSLAdustment structures are in the array pointed to by
<paramref name="Conditions" />.
</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:ModifyHSLValue(System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
Modify an HSL value in <paramref name="Source" /> according to <paramref name="Operator" /> and
<paramref name="Operand" />.
</summary>
            <param name="Source">Value to modify.</param>
            <param name="Operand">Operand used to modify <paramref name="Source" />.</param>
            <param name="Operator">How to apply <paramref name="Operand" /> to <paramref name="Source" />.</param>
            <param name="ClampLow">Low clamping value.</param>
            <param name="ClampHigh">High clamping value.</param>
            <returns>Modified value.</returns>
        </member>
        <member name="F:ConditionalHSLAdjustment.LuminanceOperation">
            <summary>
Operation to apply the operand to the luminance.
</summary>
        </member>
        <member name="F:ConditionalHSLAdjustment.LuminanceOperand">
            <summary>
Operand to apply to the source luminance value.
</summary>
        </member>
        <member name="F:ConditionalHSLAdjustment.ModifyLuminance">
            <summary>
Determines if the luminance is modified.
</summary>
        </member>
        <member name="F:ConditionalHSLAdjustment.SaturationOperation">
            <summary>
Operation to apply the operand to the saturation.
</summary>
        </member>
        <member name="F:ConditionalHSLAdjustment.SaturationOperand">
            <summary>
Operand to apply to the source saturation value.
</summary>
        </member>
        <member name="F:ConditionalHSLAdjustment.ModifySaturation">
            <summary>
Determines if the saturation is modified.
</summary>
        </member>
        <member name="F:ConditionalHSLAdjustment.HueOperation">
            <summary>
Operation to apply the operand to the hue.
</summary>
        </member>
        <member name="F:ConditionalHSLAdjustment.HueOperand">
            <summary>
Operand to apply to the source hue value.
</summary>
        </member>
        <member name="F:ConditionalHSLAdjustment.ModifyHue">
            <summary>
Determines if the hue is modified.
</summary>
        </member>
        <member name="F:ConditionalHSLAdjustment.RangeHigh">
            <summary>
Determines the hue high range for conditional changes.
</summary>
        </member>
        <member name="F:ConditionalHSLAdjustment.RangeLow">
            <summary>
Determines the hue low range for conditional changes.
</summary>
        </member>
        <member name="T:ConditionalHSLAdjustment">
            <summary>
Instructions on how to conditionally change colors in HSL mode.
</summary>
        </member>
        <member name="M:HSLBulkSet(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double)">
            <summary>
Set all HSL values as specified.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source image.</param>
            <param name="Height">Height of the source image.</param>
            <param name="Stride">Stride of the source image.</param>
            <param name="Destination">Destination of the changes. Must be same dimensionally as <paramref name="Source" />.</param>
            <param name="SetHue">Determines if the hue is changed.</param>
            <param name="NewHue">New hue value.</param>
            <param name="SetSaturation">Determines if the saturation is changed.</param>
            <param name="NewSaturation">New saturation value.</param>
            <param name="SetLuminance">Determines if the luminance is changed.</param>
            <param name="NewLuminance">New luminance value.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:HSLColorReduction(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Double,System.Int32,System.Double)">
            <summary>
Swap saturation and luminance values for each pixel.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source image.</param>
            <param name="Height">Height of the source image.</param>
            <param name="Stride">Stride of the source image.</param>
            <param name="Destination">Destination of the changes. Must be same dimensionally as <paramref name="Source" />.</param>
            <param name="HueRanges">Number of hue ranges to reduce the hue channel to.</param>
            <param name="ReduceSaturation">Determines if saturation is reduced to a single value.</param>
            <param name="SaturationValue">New saturation value if saturation is reduced.</param>
            <param name="ReduceLuminance">Determines if luminance is reduced to a single value.</param>
            <param name="LuminanceValue">New luminance value if luminance is reduced.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:RoundToClosest(System.Double,System.Double)">
            <summary>
Round <paramref name="ToRound" /> to the nearest multiple of <paramref name="Multiple" />.
</summary>
            <param name="ToRound">The value to round.</param>
            <param name="Multiple">Determines how to round off <paramref name="ToRound" />.</param>
            <returns>Rounded value.</returns>
        </member>
        <member name="M:Silly_SwapSaturationLuminance(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
Swap saturation and luminance values for each pixel.
</summary>
            <param name="SurfaceBuffer">Source image.</param>
            <param name="SourceWidth">Width of the source image.</param>
            <param name="SourceHeight">Height of the source image.</param>
            <param name="SourceStride">Stride of the source image.</param>
            <param name="DestinationBuffer">Destination of the changes. Must be same dimensionally as <paramref name="SourceBuffer" />.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:RestrictHSL(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Restrict various HSL channel values to certain ranges.
</summary>
            <param name="SurfaceBuffer">Source image.</param>
            <param name="SourceWidth">Width of the source image.</param>
            <param name="SourceHeight">Height of the source image.</param>
            <param name="SourceStride">Stride of the source image.</param>
            <param name="DestinationBuffer">Destination of the changes. Must be same dimensionally as <paramref name="SourceBuffer" />.</param>
            <param name="HueRangeSize">Determines how to restrict hue values. Should be an even divisor of 360.0.</param>
            <param name="SaturationRangeSize">Determines how to restrice saturation values.</param>
            <param name="LuminanceRangeSize">Determines how to restrice luminance values.</param>
            <param name="RestrictHue">Determines if hues are restricted.</param>
            <param name="RestrictSaturation">Determines if saturations are restricted.</param>
            <param name="RestrictLuminance">Determines if luminances are restricted.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:DoRestrict(System.Double,System.Double,System.Int32)">
            <summary>
Restict a value to a range.
</summary>
            <param name="SourceValue">
The value to restrict. If the value is greater than <paramref name="MaxRange" />, the value is
changed to <paramref name="MaxRange" />.
</param>
            <param name="MaxRange">The maximum value in the range.</param>
            <param name="Segments">Number of segments to split <paramref name="MaxRange" /> into.</param>
            <returns>Restricted value.</returns>.
</member>
        <member name="M:ImageHueShift(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
Shift the hue of each pixel in the image.
</summary>
            <param name="SurfaceBuffer">Source image.</param>
            <param name="SourceWidth">Width of the source image.</param>
            <param name="SourceHeight">Height of the source image.</param>
            <param name="SourceStride">Stride of the source image.</param>
            <param name="DestinationBuffer">Destination of the changes. Must be same dimensionally as <paramref name="SourceBuffer" />.</param>
            <param name="HueShiftValue">How much to shift the hue by.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:AdjustImageHSLValues(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Double,System.Double,System.Double)">
            <summary>
Adust the HSL values of the image by the specified multipliers.
</summary>
            <param name="SurfaceBuffer">Source image.</param>
            <param name="SourceWidth">Width of the source image.</param>
            <param name="SourceHeight">Height of the source image.</param>
            <param name="SourceStride">Stride of the source image.</param>
            <param name="DestinationBuffer">Destination of the changes. Must be same dimensionally as <paramref name="SourceBuffer" />.</param>
            <param name="HMultiplier">Value to multiply the hue by.</param>
            <param name="SMultiplier">Value to multiply the saturation by.</param>
            <param name="LMultiplier">Value to multiply the luminance by.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:MakeRGBFromHSL(System.Void*,System.UInt32,System.Void*,System.Int32,System.Int32,System.Int32)">
            <summary>
Convert a buffer of double values (representing HSL colors) to a buffer of RGB values.
</summary>
            <param name="HSLBuffer">Buffer of HSL double values, one double each for H, S, and L.</param>
            <param name="DoubleCount">Number of doubles in <paramref name="HSLBuffer" />.</param>
            <param name="Destination">Where the RGB data will be placed.</param>
            <param name="DestinationWidth">Width of the RGB image.</param>
            <param name="DestinationHeight">Height of the RGB image.</param>
            <param name="DestinationStride">Stride of the RGB image.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:GetHSLImage(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
Convert the image in <paramref name="SourceBuffer" /> from RGB to HSL. HSL data are returned in
<paramref name="DoubleBuffer" />.
</summary>
            <param name="SourceWidth">Width of the source image.</param>
            <param name="SourceHeight">Height of the source image.</param>
            <param name="SourceStride">Stride of the source image.</param>
            <param name="DoubleBuffer">
Buffer of doubles, three doubles (in HSL order) for each RGB pixel in <paramref name="SourceBuffer" />.
</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:ImageCombine(System.Void*,System.Int32,System.Int32,System.Void*,System.Int32,System.UInt32)">
            <summary>
Combine Images in <paramref name="Sources" /> into the destination buffer. Images are blitted without regard to transparency,
e.g., no alpha compositing is done.
</summary>
            <param name="Destination">Combination destination.</param>
            <param name="Width">Width of the destination. No sub image width may be larger than this value.</param>
            <param name="Width">Height of the destination. No sub image height may be larger than this value.</param>
            <param name="Sources">List of sub images to combine.</param>
            <param name="Subcount">Number of images in <paramref name="Sources" />.</param>
            <param name="BGColor">Packed color used to clear the destination before combining is done.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:ConvolveWithKernel2(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.UInt32,System.Void*,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
Modify <paramref name="Source" /> with the supplied kernel and return the results in <paramref name="Destination" />.
</summary>
            <param name="Source">Pointer to the source image. Not modified by this function.</param>
            <param name="Width">Width of the source and destination buffers.</param>
            <param name="Height">Height of the source and destination buffers.</param>
            <param name="Stride">Stride of the source and destination buffers.</param>
            <param name="Destination">Where the modified image will be written.</param>
            <param name="PackedBGPixel">Pixel used to clear the destination buffer.</param>
            <param name="Kernel">The kernel to execute against <paramref name="Source" />. Pointer to an array of doubles (but treated as a matrix).</param>
            <param name="KernelX">Width of the kernel's matrix.</param>
            <param name="KernelY">Height of the kernel's matrix.</param>
            <param name="Bias">Matrix bias.</param>
            <param name="Factor">Matrix factor.</param>
            <returns>Value indicating result of operation.</returns>
        </member>
        <member name="M:ConvolveWithKernel3(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.UInt32,System.Void*,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
Modify <paramref name="Source" /> with the supplied kernel and return the results in <paramref name="Destination" />.
</summary>
            <param name="Source">Pointer to the source image. Not modified by this function.</param>
            <param name="Width">Width of the source and destination buffers.</param>
            <param name="Height">Height of the source and destination buffers.</param>
            <param name="Stride">Stride of the source and destination buffers.</param>
            <param name="Destination">Where the modified image will be written.</param>
            <param name="PackedBGPixel">Pixel used to clear the destination buffer.</param>
            <param name="Kernel">The kernel to execute against <paramref name="Source" />. Pointer to an array of doubles (but treated as a matrix).</param>
            <param name="KernelX">Width of the kernel's matrix.</param>
            <param name="KernelY">Height of the kernel's matrix.</param>
            <param name="Bias">Matrix bias.</param>
            <param name="Factor">Matrix factor.</param>
            <param name="SkipTransparentPixels">If TRUE, transparent pixels will not be convolved.</param>
            <param name="UseLuminance">If TRUE, convolution will depend on the original pixel's luminance.</param>
            <param name="Luminance">The luminance threshold that determines if convolution will occur on a given pixel, if <paramref name="UseLuminance" /> is TRUE.</param>
            <returns>Value indicating result of operation.</returns>
        </member>
        <member name="M:MasterConvolveWithKernel(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.UInt32,System.Void*,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
Modify <paramref name="Source" /> with the supplied kernel and return the results in <paramref name="Destination" />.
</summary>
            <param name="Source">Pointer to the source image. Not modified by this function.</param>
            <param name="Width">Width of the source and destination buffers.</param>
            <param name="Height">Height of the source and destination buffers.</param>
            <param name="Stride">Stride of the source and destination buffers.</param>
            <param name="Destination">Where the modified image will be written.</param>
            <param name="PackedBGPixel">Pixel used to clear the destination buffer.</param>
            <param name="Kernel">The kernel to execute against <paramref name="Source" />. Pointer to an array of doubles (but treated as a matrix).</param>
            <param name="KernelX">Width of the kernel's matrix.</param>
            <param name="KernelY">Height of the kernel's matrix.</param>
            <param name="UseAlpha">If TRUE, the alpha channel will be convolved.</param>
            <param name="UseRed">If TRUE, the red channel will be convolved.</param>
            <param name="UseGreen">If TRUE, the green channel will be convolved.</param>
            <param name="UseBlue">If TRUE, the blue channel will be convolved.</param>
            <param name="SkipTransparentPixels">If TRUE, transparent pixels will not be modified.</param>
            <returns>Value indicating result of operation.</returns>
        </member>
        <member name="M:ByteClamp(System.Int32)">
            <summary>
Clamp <paramref name="Value" /> to a BYTE.
</summary>
            <param name="Value">The value to clamp.</param>
            <returns>Value of <paramref name="Value" /> clamped to BYTE range.</returns>
        </member>
        <member name="M:CopySubRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Copy part of an image in <paramref name="Source" /> to <paramref name="Destination" />.
</summary>
            <param name="Source">Source of the region to copy.</param>
            <param name="SourceWidth">Width of the source.</param>
            <param name="SourceHeight">Height of the source.</param>
            <param name="SourceStride">Stride of the source.</param>
            <param name="Destination">Where the copy will be placed. Must be large enough to hold the copy.</param>
            <param name="DestinationWidth">Width of the destination.</param>
            <param name="DestinationHeight">Height of the destination.</param>
            <param name="DestinationStride">Stride of the destination.</param>
            <param name="X1">
Horizontal coordinate in <paramref name="Source" /> where copying will start. Width of the sub-region to copy
is based on <paramref name="DestinationWidth" />.
</param>
            <param name="Y1">
Vertical coordinate in <paramref name="Source" /> where copying will start. Height of the sub-region to copy
is based on <paramref name="DestinationHeight" />.
</param>
            <returns>Value indication operational results.</returns>
        </member>
        <member name="M:CropBuffer2(System.Void*,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Crop <paramref name="SourceBuffer" /> with the supplied region and place the result in <paramref name="DestinationBuffer" />.
</summary>
            <param name="SourceBuffer">Contains the source to be cropped. This buffer is not changed.</param>
            <param name="DestinationBuffer">
Will contain the cropped part of <paramref name="SourceBuffer" /> on exit. The caller must create this buffer which must
be the proper size.
</param>
            <param name="BufferWidth">Width of <paramref name="SourceBuffer" /> in pixels.</param>
            <param name="BufferHeight">Height of <paramref name="SourceBuffer" /> in scan lines.</param>
            <param name="BufferStride">Width of <paramref name="SourceBuffer" /> in bytes.</param>
            <param name="X1">Left side of the crop region.</param>
            <param name="Y1">Top of the crop region.</param>
            <param name="X2">Right side of the crop region.</param>
            <param name="Y2">Bottom of the crop region.</param>
            <returns>Value indicating success.</returns>
        </member>
        <member name="M:BufferInverter(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Boolean,System.Boolean,System.Byte)">
            <summary>
Invert the pixels in the buffer.
</summary>
            <param name="Target">The buffer whose pixels will be inverted.</param>
            <param name="TargetWidth">The width of the target in pixels. Each pixel is four bytes wide.</param>
            <param name="TargetHeight">The height of the target in scanlines.</param>
            <param name="TargetStride">The stride of the target.</param>
            <param name="InversionOperation">The type of inversion.</param>
            <param name="LuminanceThreshold">If a pixel's luminance is greater than this value, the pixel will be inverted.</param>
            <param name="InvertThreshold">If true, <paramref name="LuminanceThreshold" /> will be inverted prior to use.</param>
            <param name="AllowInvertAlpha">Determines if alpha is inverted.</param>
            <returns>Value indicating result of operation.</returns>
        </member>
        <member name="M:BufferInverter2(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Double,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Invert the pixels in the buffer.
</summary>
            <param name="Target">The buffer whose pixels will be inverted.</param>
            <param name="TargetWidth">The width of the target in pixels. Each pixel is four bytes wide.</param>
            <param name="TargetHeight">The height of the target in scanlines.</param>
            <param name="TargetStride">The stride of the target.</param>
            <param name="InversionOperation">The type of inversion.</param>
            <param name="LuminanceThreshold">If a pixel's luminance is greater than this value, the pixel will be inverted.</param>
            <param name="InvertThreshold">If true, <paramref name="LuminanceThreshold" /> will be inverted prior to use.</param>
            <param name="AllowInvertAlpha">Determines if alpha is inverted.</param>
            <returns>Value indicating result of operation.</returns>
        </member>
        <member name="M:BufferInverter3(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
Does a simple color inversion of an image.
</summary>
            <param name="Source">Source image to invert.</param>
            <param name="Width">Width of the source and destination buffers.</param>
            <param name="Height">Height of the source and destination buffers.</param>
            <param name="Stride">Stride of the source and destination buffers.</param>
            <param name="Destination">Where the new image will be written.</param>
            <param name="InvertAlpha">If TRUE, the alpha channel is inverted as well.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:BufferInverter4(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Int32,System.Byte,System.Int32,System.Byte,System.Int32,System.Byte)">
            <summary>
Does a variable color inversion of an image.
</summary>
            <param name="Source">Source image to invert.</param>
            <param name="Width">Width of the source and destination buffers.</param>
            <param name="Height">Height of the source and destination buffers.</param>
            <param name="Stride">Stride of the source and destination buffers.</param>
            <param name="Destination">Where the new image will be written.</param>
            <param name="InvertAlpha">If TRUE, the alpha channel is always inverted.</param>
            <param name="InvertRed">If TRUE, the red channel is always inverted.</param>
            <param name="InvertGreen">If TRUE, the green channel is always inverted.</param>
            <param name="InvertBlue">If TRUE, the blue channel is always inverted.</param>
            <param name="UseAlphaThreshold">
If TRUE (and if <paramref name="InvertAlpha" /> is TRUE), the alpha channel will be inverted if
the source alpha channel value is greater than <paramref name="AlphaThreshold" />.
</param>
            <param name="AlphaThreshold">The value that determines if the alpha channel is inverted if <paramref name="UseAlphaThreshold" /> is TRUE.</param>
            <param name="UseRedThreshold">
If TRUE (and if <paramref name="InvertRed" /> is TRUE), the red channel will be inverted if
the source red channel value is greater than <paramref name="RedThreshold" />.
</param>
            <param name="RedThreshold">The value that determines if the red channel is inverted if <paramref name="UseRedThreshold" /> is TRUE.</param>
            <param name="UseGreenThreshold">
If TRUE (and if <paramref name="InvertGreen" /> is TRUE), the green channel will be inverted if
the green red channel value is greater than <paramref name="GreenThreshold" />.
</param>
            <param name="GreenThreshold">The value that determines if the green channel is inverted if <paramref name="UseGreenThreshold" /> is TRUE.</param>
            <param name="UseBlueThreshold">
If TRUE (and if <paramref name="InvertBlue" /> is TRUE), the blue channel will be inverted if
the source blue channel value is greater than <paramref name="BlueThreshold" />.
</param>
            <param name="BlueThreshold">The value that determines if the blue channel is inverted if <paramref name="UseBlueThreshold" /> is TRUE.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:PixelChannelRollingLogicalOperation(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Byte,System.Int32)">
            <summary>
Perform rolling logical operations on channels inside given pixels.
</summary>
            <param name="Source">Source image that will be manipulated.</param>
            <param name="Width">Width of the source and destination buffers.</param>
            <param name="Height">Height of the source and destination buffers.</param>
            <param name="Stride">Stride of the source and destination buffers.</param>
            <param name="LogicalOperator">Determines the logical operation to apply.</param>
            <param name="RightToLeft">Determines the channel order. If TRUE, channel order is ARGB, otherwise the channel order is BGRA.</param>
            <param name="Mask">Mask value applied to keep some bits unchanged.</param>
            <param name="IncludeAlpha">If TRUE, alpha is manipulated as well.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:ApplyChannelMasks(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte,System.Int32)">
            <summary>
Apply a mask to each specified channel in <paramref name="Source" /> and save the result to <paramref name="Destination" />.
The same mask is applied to each channel.
</summary>
            <param name="Source">Source image that will be manipulated.</param>
            <param name="Width">Width of the source and destination buffers.</param>
            <param name="Height">Height of the source and destination buffers.</param>
            <param name="Stride">Stride of the source and destination buffers.</param>
            <param name="LogicalOperator">Determines the logical operation to apply.</param>
            <param name="AlphaMask">The mask to apply to the alpha channel.</param>
            <param name="RedMask">The mask to apply to the red channel.</param>
            <param name="GreenMask">The mask to apply to the green channel.</param>
            <param name="BlueMask">The mask to apply to the blue channel.</param>
            <param name="IncludeAlpha">If TRUE, alpha is modified with the mask, otherwise, it is left alone.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:ApplyChannelMasks2(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Byte,System.Int32,System.Byte,System.Int32,System.Byte,System.Int32,System.Byte,System.Int32)">
            <summary>
Apply a mask to each specified channel in <paramref name="Source" /> and save the result to <paramref name="Destination" />.
</summary>
            <param name="Source">Source image that will be manipulated.</param>
            <param name="Width">Width of the source and destination buffers.</param>
            <param name="Height">Height of the source and destination buffers.</param>
            <param name="Stride">Stride of the source and destination buffers.</param>
            <param name="LogicalOperator">Determines the logical operation to apply.</param>
            <param name="AlphaMask">The mask to apply to the alpha channel.</param>
            <param name="UseAlpha">If TRUE, <paramref name="AlphaMask" /> is applied to the alpha channel. If not, alpha is not modified.</param>
            <param name="RedMask">The mask to apply to the red channel.</param>
            <param name="UseRed">If TRUE, <paramref name="RedMask" /> is applied to the red channel. If not, red is not modified.</param>
            <param name="GreenMask">The mask to apply to the green channel.</param>
            <param name="UseGreen">If TRUE, <paramref name="GreenMask" /> is applied to the green channel. If not, green is not modified.</param>
            <param name="BlueMask">The mask to apply to the blue channel.</param>
            <param name="UseBlue">If TRUE, <paramref name="BlueMask" /> is applied to the blue channel. If not, blue is not modified.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:SetAlphaByBrightness(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Sets the alpha level of all pixels in <paramref name="Target" /> to <paramref name="NewAlpha" />.
</summary>
            <param name="Target">The buffer where the alpha levels will be set.</param>
            <param name="TargetWidth">The width of the target in pixels. Each pixel is four bytes wide.</param>
            <param name="TargetHeight">The height of the target in scanlines.</param>
            <param name="TargetStride">The stride of the target.</param>
            <param name="Invert">Determines if the brightness ratio is inverted.</param>
            <param name="UseExistingAlpha">If true, the current alpha level is used as the base, if false, 0xff is used as the base.</param>
            <returns>Value that indicates the result of the operation.</returns>
        </member>
        <member name="M:SetAlpha(System.Void*,System.Int32,System.Int32,System.Int32,System.Byte)">
            <summary>
Sets the alpha level of all pixels in <paramref name="Target" /> to <paramref name="NewAlpha" />.
</summary>
            <param name="Target">The buffer where the alpha levels will be set.</param>
            <param name="TargetWidth">The width of the target in pixels. Each pixel is four bytes wide.</param>
            <param name="TargetHeight">The height of the target in scanlines.</param>
            <param name="TargetStride">The stride of the target.</param>
            <param name="NewAlpha">The new alpha value.</param>
            <returns>Value that indicates the result of the operation.</returns>
        </member>
        <member name="M:CropBuffer(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
Crops the source buffer as per the size in the region and returns the result in the target buffer. The cropped region will
be aligned to the upper-left corder in the target buffer on completion.
</summary>
            <param name="Target">Will contain the cropped buffer.</param>
            <param name="TargetWidth">The width of the target buffer.</param>
            <param name="TargetHeight">The height of the target buffer.</param>
            <param name="TargetStride">The stride of the target buffer.</param>
            <param name="Source">The source buffer.</param>
            <param name="SourceWidth">The width of the source buffer.</param>
            <param name="SourceHeight">The height of the source buffer.</param>
            <param name="SourceStride">The stride of the source buffer.</param>
            <param name="RegionPtr">
Determines the final region after the crop. This function assumes the values in Region have been validated by the caller.
</param>
            <returns>TRUE on success, FALSE on failure.</returns>
        </member>
        <member name="M:ClearBuffer(System.Void*,System.Int32,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte,System.Int32,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
Clears the specified buffer with the specified color value. Optionally draws a grid.
</summary>
            <param name="Target">The buffer to clear.</param>
            <param name="TargetWidth">Width of the buffer where drawing will be done.</param>
            <param name="TargetHeight">Height of the buffer where drawing will be done.</param>
            <param name="TargetStride">Stride of the buffer where drawing will be done.</param>
            <param name="ClearA">The alpha channel value for a cleared color.</param>
            <param name="ClearR">The red channel value for a cleared color.</param>
            <param name="ClearG">The green channel value for a cleared color.</param>
            <param name="ClearB">The blue channel value for a cleared color.</param>
            <param name="DrawGrid">Determines if a grid is drawn over the cleared buffer.</param>
            <param name="GridA">The alpha channel value the grid color.</param>
            <param name="GridR">The red channel value the grid color.</param>
            <param name="GridG">The green channel value the grid color.</param>
            <param name="GridB">The blue channel value the grid color.</param>
            <param name="GridCellWidth">Horizontal distance between grid lines.</param>
            <param name="GridCellHeight">Vertical distance between grid lines.</param>
            <returns>True on success, false on error.</returns>
        </member>
        <member name="M:CreateAlphaMaskFromLuminance(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Double,System.Int32,System.UInt32)">
            <summary>
Create a mask based on the luminance of a given pixel. Masked pixel alpha value not changed.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Stride">Stride of the source and destination images.</param>
            <param name="Luminance">Determines if a pixel is part of the mask or not. If not, the pixel is saved as transparent in the destination.</param>
            <param name="UseMaskedPixel">
If TRUE, <paramref name="MaskedPixelColor" /> is used for pixels that meet the luminance requirement, otherwise
the original pixel is used.
</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:CreateMaskFromLuminance(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Double,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
Create a mask from image data in <paramref name="ImageSource" /> and return the masked image in <paramref name="Target" />.
</summary>
            <param name="Target">Will contain the masked image on success.</param>
            <param name="TargetWidth">Width of the buffer where drawing will be done.</param>
            <param name="TargetHeight">Height of the buffer where drawing will be done.</param>
            <param name="TargetStride">Stride of the buffer where drawing will be done.</param>
            <param name="ImageSource">
The source image that determines the resultant mask. Must have the same dimensions and stride as <paramref name="Target" />.
</param>
            <param name="Threshold">
The luninance threshold. Source pixels with a luminance less than this value will not be included in the returned buffer.
</param>
            <param name="AlphaToo">Determines if alpha values are used in determination of target mask values.</param>
            <param name="MaskA">
The alpha value to write if the source pixel is less than <paramref name="Threshold" />. If <paramref name="AlphaToo" /> is false,
0x0 will be used as the alpha value.
</param>
            <param name="MaskR">The red channel value to write if the source pixel is less than <paramref name="Threshold" />.</param>
            <param name="MaskG">The green channel value to write if the source pixel is less than <paramref name="Threshold" />.</param>
            <param name="MaskB">The blue channel value to write if the source pixel is less than <paramref name="Threshold" />.</param>
            <returns>True on success, false on error.</returns>
        </member>
        <member name="M:CreateMask(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.UInt32,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
Create a mask from image data in <paramref name="ImageSource" /> and return the masked image in <paramref name="Target" />.
</summary>
            <param name="Target">Will contain the masked image on success.</param>
            <param name="TargetWidth">Width of the buffer where drawing will be done.</param>
            <param name="TargetHeight">Height of the buffer where drawing will be done.</param>
            <param name="TargetStride">Stride of the buffer where drawing will be done.</param>
            <param name="ImageSource">
The source image that determines the resultant mask. Must have the same dimensions and stride as <paramref name="Target" />.
</param>
            <param name="Threshold">
Determines if a pixel from <paramref name="ImageSource" /> or the mask values is written to <paramref name="Target" />. If any
color channel value is less than the corresponding color channel value in this parameter, the mask value is written. This parameter
is in BGRA format.
</param>
            <param name="AlphaToo">Determines if alpha values are used in determination of target mask values.</param>
            <param name="MaskA">
The alpha value to write if the source pixel is less than <paramref name="Threshold" />. If <paramref name="AlphaToo" /> is false,
0x0 will be used as the alpha value.
</param>
            <param name="MaskR">The red channel value to write if the source pixel is less than <paramref name="Threshold" />.</param>
            <param name="MaskG">The green channel value to write if the source pixel is less than <paramref name="Threshold" />.</param>
            <param name="MaskB">The blue channel value to write if the source pixel is less than <paramref name="Threshold" />.</param>
            <returns>True on success, false on error.</returns>
        </member>
        <member name="M:CreateBitMask(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>
Create a bit mask.
</summary>
            <param name="Target">The buffer of bytes that make up the bit mask.</param>
            <param name="TargetWidth">Width of the buffer where drawing will be done.</param>
            <param name="TargetHeight">Height of the buffer where drawing will be done.</param>
            <param name="Left">The left coordinate of the start of the masked region.</param>
            <param name="Top">The top coordinate of the start of the masked region.</param>
            <param name="Width">The width of the masked region.</param>
            <param name="Height">The height of the masked region.</param>
            <param name="BitOnValue">The value written to the masked region.</param>
            <param name="BitOffValue">The value written to the unmasked region.</param>
        </member>
        <member name="M:MergePlanes3(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
Merge a set of color blobs (in <paramref name="PlaneSet" />) to <paramref name="Target" />.
</summary>
            <param name="Target">Where the drawing will be done.</param>
            <param name="TargetWidth">Width of the buffer where drawing will be done.</param>
            <param name="TargetHeight">Height of the buffer where drawing will be done.</param>
            <param name="TargetStride">Stride of the buffer where drawing will be done.</param>
            <param name="PlaneSet">The list of color blobs to merge to <paramref name="Target" />.</param>
            <param name="PlaneCount">Number of planes in <paramref name="PlaneSet" />.</param>
            <returns>Operational success indicator.</returns>
        </member>
        <member name="M:MergePlanes4(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Void*)">
            <summary>
Merge a set of color blobs (in <paramref name="PlaneSet" />) to <paramref name="Target" />. This is a composite action - the
order of the planes in the list is relevant - first items are composited first. The background in <paramref name="Target" />
will be merged with the planes and is assumed to be drawn before calling this function.
</summary>
            <param name="Target">Where the drawing will be done.</param>
            <param name="TargetWidth">Width of the buffer where drawing will be done.</param>
            <param name="TargetHeight">Height of the buffer where drawing will be done.</param>
            <param name="TargetStride">Stride of the buffer where drawing will be done.</param>
            <param name="PlaneSet">The list of color blobs to merge to <paramref name="Target" />.</param>
            <param name="PlaneCount">Number of planes in <paramref name="PlaneSet" />.</param>
            <returns>Operational success indicator.</returns>
        </member>
        <member name="M:MergePlanes2(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
Merge a set of color blobs (in <paramref name="PlaneSet" />) to <paramref name="Target" />.
</summary>
            <param name="Target">Where the drawing will be done.</param>
            <param name="TargetWidth">Width of the buffer where drawing will be done.</param>
            <param name="TargetHeight">Height of the buffer where drawing will be done.</param>
            <param name="TargetStride">Stride of the buffer where drawing will be done.</param>
            <param name="PlaneSet">The list of color blobs to merge to <paramref name="Target" />.</param>
            <param name="PlaneCount">Number of planes in <paramref name="PlaneSet" />.</param>
            <returns>Operational success indicator.</returns>
        </member>
        <member name="M:MergePlanes(System.Void*,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Merges a set of sub-planes into the final plane. Assumes that all sub-planes have had their coordinates validated and
corrected as necessary.
</summary>
            <remarks>
This function assumes all planes have had their coordinates normalized to all non-negative values.
</remarks>
            <param name="Target">The target buffer where there planes will be merged to.</param>
            <param name="PlaneSet">Array of planes that will be merged.</param>
            <param name="PlaneCount">Number of planes in <paramref name="PlaneSet" />.</param>
            <param name="Width">Width of the target buffer.</param>
            <param name="Height">Height of the target buffer.</param>
            <param name="Stride">Stride of the target buffer.</param>
            <returns>TRUE on success, FALSE on error.</returns>
        </member>
        <member name="M:PointInPlane(System.Int32,System.Int32,PlaneSetStruct*)">
            <summary>
Determines if the logical point (<paramref name="X" />,<paramref name="Y" />) is in <paramref name="Plane" />.
</summary>
            <param name="X">Logical horizontal coordinate.</param>
            <param name="Y">Logical vertical coordinate.</param>
            <param name="Plane">The plane that will be tested.</param>
            <returns>TRUE if (<paramref name="X" />,<paramref name="Y" />) is in the plane, FALSE if not.</returns>
        </member>
        <member name="M:MakeDotIndices(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AbsolutePointStruct*,System.Int32)">
            <summary>
Return a set of points given the top,left and bottom,right coordinates.
</summary>
            <param name="Left">The left side of the region.</param>
            <param name="Top">The top of the region.</param>
            <param name="Right">The right side of the region.</param>
            <param name="Bottom">The bottom of the region.</param>
            <param name="Width">The width of the buffer.</param>
            <param name="Height">The height of the buffer.</param>
            <param name="Stride">The stride of the buffer.</param>
            <param name="PointList">Pointer to an array of points generated by this function.</param>
            <param name="DotCount">The maximum number of dots given the region defintion.</param>
            <returns>Quantity of points actually generated.</returns>
        </member>
        <member name="M:BlendColors2(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
Given a set of colors and their locations, create data that can be used in an Image (BGRA32 format) that has all of the
colors blended appropriately.
</summary>
            <param name="Target">The location where the colors will be placed - must be allocated prior to calling this function.</param>
            <param name="Width">The width of the image/target buffer.</param>
            <param name="Height">The height of the image/target buffer.</param>
            <param name="Stride">The stride of the image/target buffer.</param>
            <param name="PureColorCount">The number of colors used as primary colors for blending.</param>
            <param name="PureColors">
Pointer to an array of PureColorTypes that contain the primary colors and locations from which the 
blending is generated/calculated.
</param>
            <returns>TRUE on success, FALSE on parametric fail.</returns>
        </member>
        <member name="M:DrawPointIndicator(System.Byte*,System.Int32,System.Int32,System.Int32,System.Int32,PureColorType*)">
            <summary>
Draw a block/point in <paramref name="Buffer" />.
</summary>
            <param name="Buffer">The buffer where the line will be drawn.</param>
            <param name="Width">The width of the buffer.</param>
            <param name="Height">The height of the buffer.</param>
            <param name="Stride">The stride of the buffer.</param>
            <param name="ColorIndex">Determines where and what color the line will be.</param>
            <param name="ColorSet">Source for line location and color.</param>
        </member>
        <member name="M:ColorPointIndex2(System.Int32,System.Int32,PureColorType*,System.Int32)">
            <summary>
Determines if the point X,Y is a pure color point.
</summary>
            <param name="X">Horizontal location of the point to test.</param>
            <param name="Y">Vertical location of the point to test.</param>
            <param name="ColorSet">Pointer to the set of pure colors.</param>
            <param name="PurePointCount">Number of pure colors in ColorSet.</param>
            <returns>The index of the pure color at X,Y, -1 if not a pure color point.</returns>
        </member>
        <member name="M:MakeColor2(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,PureColorType*,System.Byte*,System.Byte*,System.Byte*,System.Byte*)">
            <summary>
Create the blended color at the specified point in the buffer.
</summary>
            <param name="Target">The location where the colors will be placed - must be allocated prior to calling this function.</param>
            <param name="Width">The width of the image/target buffer.</param>
            <param name="Height">The height of the image/target buffer.</param>
            <param name="PurePointCount">Number of pure colors in the set of pure colors.</param>
            <param name="Colors">Points to an array of pure colors.</param>
            <param name="FinalA">Pointer to the final alpha level.</param>
            <param name="FinalR">Pointer to the final red level.</param>
            <param name="FinalG">Pointer to the final green level.</param>
            <param name="FinalB">Pointer to the final blue level.</param>
            <returns>TRUE on success, FALSE on parametric fail.</returns>
        </member>
        <member name="M:ColorPercent2(System.Double,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte*,System.Byte*,System.Byte*,System.Byte*,System.Double,System.Double,System.Boolean)">
            <summary>
Returns a percentage of a color.
</summary>
            <param name="Percent">The precent of the returned color.</param>
            <param name="inA">Alpha channel input. Not currently used.</param>
            <param name="inR">Red channel input.</param>
            <param name="inG">Green channel input.</param>
            <param name="inB">Blue channel input.</param>
            <param name="outA">Alpha channel output.</param>
            <param name="outR">Red channel output.</param>
            <param name="outG">Green channel output.</param>
            <param name="outB">Blue channel output.</param>
            <param name="AlphaStart">Starting (at the pure color point location) alpha level.</param>
            <param name="AlphaEnd">Ending alpha level.</param>
            <param name="UseAlpha">Determines if alpha calculations are made. If not, alpha is always 0xff.</param>
        </member>
        <member name="M:SetChannel(System.Int32,System.Byte,ChannelIDs)">
            <summary>
Clears then sets the specified channel to the specified channel value.
</summary>
            <param name="Source">The source pixel value.</param>
            <param name="ChannelValue">The value to set - replaces old value.</param>
            <param name="ChannelID">Determines the location of the channel.</param>
            <returns>New pixel value with the appropriate channel cleared then set with passed data.</returns>
        </member>
        <member name="M:InverseChannelMask(ChannelIDs)">
            <summary>
Return an inverse mask for the given channel. Assumes pixel structure of AARRGGBB.
</summary>
            <returns>Inverse mask for the specified channel.</returns>
        </member>
        <member name="M:SetPixel(System.Byte*,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
Sets one pixel.
</summary>
            <param name="Buffer">The start of the buffer where the pixel will be set.</param>
            <param name="Index">The offset into the buffer where to set the pixel values.</param>
            <param name="A">The alpha value.</param>
            <param name="R">The red value.</param>
            <param name="G">The green value.</param>
            <param name="B">The blue value.</param>
        </member>
        <member name="M:MergeChannel(System.Int32,System.Byte,ChannelIDs)">
            <summary>
Merges a given channel's value into the source value and returns the results.
</summary>
            <remarks>
This function does not clear channels before merging them so it is best to start with a <paramref name="Source" /> value of 0x0.
</remarks>
            <param name="Source">
The pixel value where <paramref name="ChannelValue" /> will be merged. For the purposes of this function, it is
assumed that the format of this parameter is AARRGGBB.
</param>
            <param name="ChannelValue">The value to merge with the source, e.g., the channel value.</param>
            <param name="ChannelID">Determines which channel is being merged (the location of the merge) into <paramref name="Source" />.</param>
            <returns>
                <paramref name="Source" /> merged with <paramref name="ChannelValue" />.</returns>
        </member>
        <member name="M:GetChannel(System.Int32,ChannelIDs)">
            <summary>
Extract and return the specified channel value from <paramref name="AllChannels" />.
</summary>
            <param name="AllChannels">The source for channel information. Must be in the form of AARRGGBB.</param>
            <param name="ChannelID">Determines which channel is extracted and returned.</param>
            <returns>The specified channel from <paramref name="AllChannels" />.</returns>
        </member>
        <member name="T:ChannelIDs">
            <summary>
IDs of the various channels in an ARGB pixel.
</summary>
            <remarks>
The values assigned to the enums are used to shift the source pixel to the proper location in order to
extract the channel as efficiently as possible (e.g., in a calculation, not with a bunch of IF statements).
</remarks>
        </member>
        <member name="F:Blue">
            <summary>
The blue channel.
</summary>
        </member>
        <member name="F:Green">
            <summary>
The green channel.
</summary>
        </member>
        <member name="F:Red">
            <summary>
The red channel.
</summary>
        </member>
        <member name="F:Alpha">
            <summary>
The alpha channel.
</summary>
        </member>
        <member name="M:BlendColors(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*)">
            <summary>
Given a set of colors and their locations, create data that can be used in an Image (BGRA32 format) that has all of the
colors blended appropriately.
</summary>
            <param name="Target">The location where the colors will be placed - must be allocated prior to calling this function.</param>
            <param name="Width">The width of the image/target buffer.</param>
            <param name="Height">The height of the image/target buffer.</param>
            <param name="Stride">The stride of the image/target buffer.</param>
            <param name="PureColorCount">The number of colors used as primary colors for blending.</param>
            <param name="ColorLocations">
Pointer to an array of AbsolutePointStructs that determines the location of the pure colors. No error checking is done.
</param>
            <param name="PureColors">Pointer to an array of PureColorStructs that contain the primary colors from which the blending is generated.</param>
            <returns>TRUE on success, FALSE on parametric fail.</returns>
        </member>
        <member name="M:ColorPointIndex(System.Int32,System.Int32,AbsolutePointStruct*,System.Int32)">
            <summary>
Determines if (X,Y) is a pure color point.
</summary>
            <param name="X">The horizontal coordinate.</param>
            <param name="Y">The vertical coordinate.</param>
            <param name="Points">Array pointer to the set of pure color points.</param>
            <param name="PointCount">Number of pure color points in Points.</param>
            <returns>The index of the pure color at (X,Y) if at a pure color point, -1 if not at a pure color point.</returns>
        </member>
        <member name="M:Distance(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Calculates the distance between (X1,Y1) and (X2,Y2).
</summary>
            <param name="X1">First horizontal coordinate.</param>
            <param name="Y1">First vertical coordinate.</param>
            <param name="X2">Second horizontal coordinate.</param>
            <param name="Y2">Second vertical coordinate.</param>
            <returns>The distance between (X1,Y1) and (X2,Y2).</returns>
        </member>
        <member name="M:delta(System.Double,System.Double)">
            <summary>
Return the delta between the two parameters.
</summary>
            <param name="Op1">First operand.</param>
            <param name="Op2">Second operation.</param>
            <returns>The delta between the two operands.</returns>
        </member>
        <member name="M:ColorLuminanceSc(System.Double,System.Double,System.Double)">
            <summary>
Calculate and return a brightness/luminance value for the passed color channel values. This function is exposed to
managed programs but uses the same function as do other functions - that way the same algorithm is used for everything.
</summary>
            <param name="R">The normalized red channel value.</param>
            <param name="G">The normalized green channel value.</param>
            <param name="B">The normalzied blue channel value.</param>
            <returns>Luninance of the passed color channels</returns>
        </member>
        <member name="M:ColorLuminance(System.Byte,System.Byte,System.Byte)">
            <summary>
Calculate and return a brightness/luminance value for the passed color channel values. This function is exposed to
managed programs but uses the same function as do other functions - that way the same algorithm is used for everything.
</summary>
            <param name="R">The red channel value.</param>
            <param name="G">The green channel value.</param>
            <param name="B">The blue channel value.</param>
            <returns>Luninance of the passed color channels</returns>
        </member>
        <member name="M:PixelLuminanceSc(System.Double,System.Double,System.Double)">
            <summary>
Calculate and return a brightness/luminance value for the passed color channel values.
</summary>
            <param name="R">The normalized red channel value.</param>
            <param name="G">The normalized green channel value.</param>
            <param name="B">The normalized blue channel value.</param>
            <returns>Luninance of the passed color channels</returns>
        </member>
        <member name="M:PixelLuminance(System.Byte,System.Byte,System.Byte)">
            <summary>
Calculate and return a brightness/luminance value for the passed color channel values.
</summary>
            <param name="R">The red channel value.</param>
            <param name="G">The green channel value.</param>
            <param name="B">The blue channel value.</param>
            <returns>Luninance of the passed color channels</returns>
        </member>
        <member name="M:DoNothing">
            <summary>
Expensive version of a NOP.
</summary>
        </member>
        <member name="M:GetPixelAtLocation2(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Return the pixel at the specified location in the image.
</summary>
            <param name="Source">Image where the pixel lives.</param>
            <param name="SourceWidth">Width of the image in pixels.</param>
            <param name="SourceHeight">Height of the image in scanlines.</param>
            <param name="SourceStride">Stride of the image in bytes.</param>
            <param name="X">Horizontal pixel location.</param>
            <param name="Y">Vertical pixel location.</param>
            <returns>The pixel (in BGRA format) at the specified location.</returns>
        </member>
        <member name="M:GetPixelAtLocation(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Return the pixel at the specified location in the image.
</summary>
            <param name="Source">Image where the pixel lives.</param>
            <param name="SourceWidth">Width of the image in pixels.</param>
            <param name="SourceHeight">Height of the image in scanlines.</param>
            <param name="X">Horizontal pixel location.</param>
            <param name="Y">Vertical pixel location.</param>
            <returns>The pixel (in BGRA format) at the specified location.</returns>
        </member>
        <member name="M:DataMerge(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Void*,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Merge data (in the form of a BYTE array) with <paramref name="Source" /> into <paramref name="Destination" />.
</summary>
            <remarks>
A header prefixes the data that is merged. The format of the header is Mask Size:Byte Count. Mask size if a byte value and
Byte Count is a UINT32 value. The bits used for the header depends on <paramref name="ByTwo" />.
</remarks>
            <param name="Buffer">Source image to whose bits will be randomized.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Destination">Destination buffer - where the results are written.</param>
            <param name="DataBuffer">The data to merge with <paramref name="Source" />.</param>
            <param name="DataCount">Number of byte entries in <paramref name="DataBuffer" />.</param>
            <param name="ByTwo">Determines the number of bits used to merge.</param>
            <param name="IncludeAlpha">Write bits in the alpha channel.</param>
            <param name="IncludeRed">Write bits in the red channel.</param>
            <param name="IncludeGreen">Write bits in the green channel.</param>
            <param name="IncludeBlue">Write bits in the blue channel.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:AddDataToRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
Merge data from a buffer with the source and place the result in the destination buffer.
</summary>
            <param name="Buffer">Source image to whose bits will be randomized.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Destination">Destination buffer - where the results are written.</param>
            <param name="Left">The left coordinate of the region to use.</param>
            <param name="Top">The top coordinate of the region to use.</param>
            <param name="Right">The right coordinate of the region to use.</param>
            <param name="Bottom">The bottom coordinate of the region to use.</param>
            <param name="RelativeXOffset">Horizontal offset.</param>
            <param name="RelativeYOffset">Vertical offset.</param>
            <param name="ChannelMask">Determines where character bits will be written.</param>
            <param name="IncludeAlpha">Write bits in the alpha channel.</param>
            <param name="IncludeRed">Write bits in the red channel.</param>
            <param name="IncludeGreen">Write bits in the green channel.</param>
            <param name="IncludeBlue">Write bits in the blue channel.</param>
            <param name="DataSource">Pointer to the buffer of data to add.</param>
            <param name="DataSourceLength">Number of bytes in <paramref name="DataSource" />.</param>
        </member>
        <member name="M:AddStringToRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Int32,System.Int32,System.Int32,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int32)">
            <summary>
Add a string of 8-bit characters to the supplied buffer by setting bits in the specified bit mask.
</summary>
            <param name="Buffer">Source image to whose bits will be randomized.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Destination">Destination buffer - where the results are written.</param>
            <param name="Left">The left coordinate of the region to use.</param>
            <param name="Top">The top coordinate of the region to use.</param>
            <param name="Right">The right coordinate of the region to use.</param>
            <param name="Bottom">The bottom coordinate of the region to use.</param>
            <param name="RelativeXOffset">Horizontal offset.</param>
            <param name="RelativeYOffset">Vertical offset.</param>
            <param name="ChannelMask">Determines where character bits will be written.</param>
            <param name="IncludeAlpha">Write bits in the alpha channel.</param>
            <param name="IncludeRed">Write bits in the red channel.</param>
            <param name="IncludeGreen">Write bits in the green channel.</param>
            <param name="IncludeBlue">Write bits in the blue channel.</param>
            <param name="Text">The text to add to the string.</param>
            <param name="TextLength">Length of the text to add to the string.</param>
        </member>
        <member name="M:GetBits(System.Byte,System.Byte)">
            <summary>
Return the bits in <paramref name="Source" /> as defined by <paramref name="Mask" />. Returned bits are shifted right the
appropriate number (as defined by <paramref name="Mask" /> bits.
</summary>
            <param name="Source">The value whose bits are desired.</param>
            <param name="Mask">Defines the bits to return.</param>
            <returns>The bits in <paramref name="Source" /> as specified by <paramref name="Mask" />.</returns>
        </member>
        <member name="M:MaskOffset(System.Byte)">
            <summary>
Return the number of zeros on the right size of <paramref name="Mask" />.
</summary>
            <param name="Mask">The value to count zeros.</param>
            <returns>The number of zeros on the right size of <paramref name="Mask" />.</returns>
        </member>
        <member name="M:CanFit(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Int32)">
            <summary>
Determines if the specified string can fit into available space.
</summary>
            <param name="Left">Left side of the region.</param>
            <param name="Top">Top of the region.</param>
            <param name="Right">Right side of the region.</param>
            <param name="Bottom">Bottom of the region.</param>
            <param name="IncludeAlpha">Determines if the alpha channel is available for use.</param>
            <param name="IncludeRed">Determines if the red channel is available for use.</param>
            <param name="IncludeGreen">Determines if the green channel is available for use.</param>
            <param name="IncludeBlue">Determines if the blue channel is available for use.</param>
            <param name="ChannelMask">The number of bits to use in each available channel.</param>
            <param name="TextLength">Number of characters in the string.</param>
            <returns>TRUE if the text can fit, FALSE if not.</returns>
        </member>
        <member name="M:BytesRequiredToFit(System.Byte,System.Int32)">
            <summary>
Determines the number of bytes needed to store the string given bits available in <paramref name="ChannelMask" />.
</summary>
            <param name="ChannelMask">The number of bits to use.</param>
            <param name="TextLength">Number of characters in the string.</param>
            <returns>Number of required bytes needed to store a string of characters. Returns -1 on error.</returns>
        </member>
        <member name="M:BytePerCharacter(System.Byte)">
            <summary>
Determines the number of bytes needed per character given the available bits to use.
</summary>
            <param name="ChannelMask">Available bits per byte.</param>
            <returns>Number of bytes needed to store one character. Returns -1 on error.</returns>
        </member>
        <member name="M:RandomizeImageBits2(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Byte,System.UInt32)">
            <summary>
Randomize bits in all channels specified by the supplied bit mask.
</summary>
            <param name="Buffer">Source image to whose bits will be randomized.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Destination">Destination buffer - where the results are written.</param>
            <param name="RandomizeMask">The mask used to determine which bits are randomized. If this value is 0x0, no action is taken.</param>
            <param name="RandomSeed">Random number generator seed.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:RandomizeImageBits1(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Byte,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Randomize bits in the specicified channels specified by the supplied bit mask.
</summary>
            <remarks>
If no channels are selected or if the random mask is 0x0, no action will be taken and the destinaion buffer will not be filled.
</remarks>
            <param name="Buffer">Source image to whose bits will be randomized.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Destination">Destination buffer - where the results are written.</param>
            <param name="RandomizeMask">The mask used to determine which bits are randomized. If this value is 0x0, no action is taken.</param>
            <param name="RandomSeed">Random number generator seed.</param>
            <param name="IncludeAlpha">Randomize the alpha channel.</param>
            <param name="IncludeRed">Randomize the red channel.</param>
            <param name="IncludeGreen">Randomize the green channel.</param>
            <param name="IncludeBlue">Randomize the blue channel.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:RandomizeImageBitsRegion(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Randomize bits in the specicified channels specified by the supplied bit mask for the specified region in the source.
</summary>
            <remarks>
If no channels are selected or if the random mask is 0x0, no action will be taken and the destinaion buffer will not be filled.
</remarks>
            <param name="Buffer">Source image to whose bits will be randomized.</param>
            <param name="Width">Width of the source and destination images.</param>
            <param name="Height">Height of the source and destination images.</param>
            <param name="Destination">Destination buffer - where the results are written.</param>
            <param name="Left">The left coordinate of the region to convert.</param>
            <param name="Top">The top coordinate of the region to convert.</param>
            <param name="Right">The right coordinate of the region to convert.</param>
            <param name="Bottom">The bottom coordinate of the region to convert.</param>
            <param name="RandomizeMask">The mask used to determine which bits are randomized. If this value is 0x0, no action is taken.</param>
            <param name="RandomSeed">Random number generator seed.</param>
            <param name="IncludeAlpha">Randomize the alpha channel.</param>
            <param name="IncludeRed">Randomize the red channel.</param>
            <param name="IncludeGreen">Randomize the green channel.</param>
            <param name="IncludeBlue">Randomize the blue channel.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:Deinterlace(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
Deinterlace (using a simple pixel mean algorithm) the source image and place the result in the destination buffer.
</summary>
            <param name="Source">Pointer to the source image. Not modified by this function.</param>
            <param name="Width">Width of the source and destination buffers.</param>
            <param name="Height">Height of the source and destination buffers.</param>
            <param name="Stride">Stride of the source and destination buffers.</param>
            <param name="Destination">Where the modified image will be written.</param>
            <param name="StartingLine">Where the deinterlacing will start - usually set to 0 or 1 but may be anywhere in the image.</param>
            <returns>Value indicating result of operation.</returns>
        </member>
        <member name="M:MeanOfTwoPixels(System.Void*,System.Int32,System.Int32,System.Byte*,System.Byte*,System.Byte*,System.Byte*)">
            <summary>
Returns the mean of two pixels in two locations in the supplied image buffer.
</summary>
            <param name="Address1">Address of the first pixel.</param>
            <param name="Address2">Address of the second pixel.</param>
            <param name="FinalA">Will contain the mean alpha channel value.</param>
            <param name="FinalR">Will contain the mean red channel value.</param>
            <param name="FinalG">Will contain the mean green channel value.</param>
            <param name="FinalB">Will contain the mean blue channel value.</param>
            <returns>Value indicating result of operation.</returns>
        </member>
        <member name="M:PixelIsCloseToColor(System.Void*,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
Determines if the pixel in the specified location is close to the specified color.
</summary>
            <param name="Source">The image buffer to check.</param>
            <param name="PixelLocation">The location of the pixel in the buffer.</param>
            <param name="R">The red component.</param>
            <param name="G">The green component.</param>
            <param name="B">The blue component.</param>
            <param name="Range">How close the color must be to "match".</param>
            <returns>TRUE if the pixel falls within the range of the passed color, false if not.</returns>
        </member>
        <member name="M:PixelIsColor(System.Void*,System.Int32,System.Byte,System.Byte,System.Byte)">
            <summary>
Determines if the pixel in the specified location is the specified color.
</summary>
            <param name="Source">The image buffer to check.</param>
            <param name="PixelLocation">The location of the pixel in the buffer.</param>
            <param name="R">The red component.</param>
            <param name="G">The green component.</param>
            <param name="B">The blue component.</param>
            <returns>TRUE if the pixel matches the passed color, false if not.</returns>
        </member>
        <member name="M:SquishImage(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Squishes an image by removing scan lines or vertical columns according to a user-defined frequency.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source image.</param>
            <param name="Height">Height of the source image.</param>
            <param name="Stride">Stride of the source image.</param>
            <param name="Destination">Destination image.</param>
            <param name="DestWidth">Width of the destination image.</param>
            <param name="DestHeight">Height of the destination image.</param>
            <param name="DestStride">Stride of the destination image.</param>
            <param name="HorizontalFrequency">The frequency of included columns.</param>
            <param name="VerticalFrequency">The frequency of included rows.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:TranslateRegionInImage(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
Translate a region in a buffer to a different location and return the result in a new buffer.
</summary>
            <param name="Source">Source image.</param>
            <param name="Width">Width of the source image.</param>
            <param name="Height">Height of the source image.</param>
            <param name="Stride">Stride of the source image.</param>
            <param name="Destination">Destination image.</param>
            <param name="RegionLeft">Left-side of the region to move.</param>
            <param name="RegionTop">Top of the region to move.</param>
            <param name="RegionRight">Right-side of the region to move.</param>
            <param name="RegionBottom">Bottom of the region to move.</param>
            <param name="NewX">New X coordinate of the upper-left corner of the translated region.</param>
            <param name="NewY">New Y coordinate of the upper-left corner of the translated region.</param>
            <param name="DoCopy">If TRUE, the region is copied. If FALSE, the old region is filled with <paramref name="GapColor" />.</param>
            <param name="GapColor">ARGB color to fill the region's original location if <paramref name="DoCopy" /> is FALSE.</param>
            <returns>Value indicating operational results.</returns>
        </member>
        <member name="M:ULtoLRByte(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Byte)">
            <summary>
Mirror the image vertically then horizontally on a byte level.
</summary>
            <param name="Source">Pointer to the source image</param>
            <param name="Width">Width of the source and destination buffers.</param>
            <param name="Height">Height of the source and destination buffers.</param>
            <param name="Stride">Stride of the source and destination buffers.</param>
            <param name="Destination">Pointer to the buffer that will contained the final image.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:ULtoLRPixel(System.Void*,System.Int32,System.Int32,System.Void*)">
            <summary>
Mirror the image vertically then horizontally on a pixel level.
</summary>
            <param name="Source">Pointer to the source image</param>
            <param name="Width">Width of the source and destination buffers.</param>
            <param name="Height">Height of the source and destination buffers.</param>
            <param name="Destination">Pointer to the buffer that will contained the final image.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:VerticalMirrorByte(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Byte)">
            <summary>
Create a vertical mirror image of <paramref name="Source" /> and return it in <paramref name="Destination" />. Mirroring is done
on a byte level.
</summary>
            <param name="Source">Pointer to the image to vertically mirror.</param>
            <param name="Width">Width of the source and destination buffers.</param>
            <param name="Height">Height of the source and destination buffers.</param>
            <param name="Stride">Stride of the source and destination buffers.</param>
            <param name="Destination">Pointer to the buffer that will contained the mirrored image.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:VerticalMirrorPixel(System.Void*,System.Int32,System.Int32,System.Void*)">
            <summary>
Create a vertical mirror image of <paramref name="Source" /> and return it in <paramref name="Destination" />. Mirroring is done
on a pixel level.
</summary>
            <remarks>
Don't need stride since we're working on a pixel level.
</remarks>
            <param name="Source">Pointer to the image to vertically mirror.</param>
            <param name="Width">Width of the source and destination buffers.</param>
            <param name="Height">Height of the source and destination buffers.</param>
            <param name="Destination">Pointer to the buffer that will contained the mirrored image.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:VerticalMirrorPixelRegion(System.Void*,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Create a vertical mirror image of a region in <paramref name="Source" /> and return it in <paramref name="Destination" />. 
Mirroring is done a pixel level.
</summary>
            <remarks>
Don't need stride since we're working on a pixel level.
</remarks>
            <param name="Source">Pointer to the image to vertically mirror.</param>
            <param name="Width">Width of the source and destination buffers.</param>
            <param name="Height">Height of the source and destination buffers.</param>
            <param name="Destination">Pointer to the buffer that will contained the mirrored image.</param>
            <param name="X1">Left side of the region.</param>
            <param name="Y1">Top of the region.</param>
            <param name="X2">Right side of the region.</param>
            <param name="Y2">Bottom of the region.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:HorizontalMirrorByte(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Byte)">
            <summary>
Create a horizontal mirror image of <paramref name="Source" /> and return it in <paramref name="Destination" />. Mirroring is
done at a byte level.
</summary>
            <param name="Source">Pointer to the image to horizontally mirror.</param>
            <param name="Width">Width of the source and destination buffers.</param>
            <param name="Height">Height of the source and destination buffers.</param>
            <param name="Stride">Stride of the source and destination buffers.</param>
            <param name="Destination">Pointer to the buffer that will contained the mirrored image.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:HorizontalMirrorPixel(System.Void*,System.Int32,System.Int32,System.Void*)">
            <summary>
Create a horizontal mirror image of <paramref name="Source" /> and return it in <paramref name="Destination" />. Mirroring is
done at a pixel level.
</summary>
            <remarks>
Stride is not needed since we're working at a pixel level.
</remarks>
            <param name="Source">Pointer to the image to horizontally mirror.</param>
            <param name="Width">Width of the source and destination buffers.</param>
            <param name="Height">Height of the source and destination buffers.</param>
            <param name="Destination">Pointer to the buffer that will contained the mirrored image.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="M:HorizontalMirrorPixelRegion(System.Void*,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Create a horizontal mirror image of a region in <paramref name="Source" /> and return it in <paramref name="Destination" />. Mirroring is
done at a pixel level.
</summary>
            <remarks>
Stride is not needed since we're working at a pixel level.
</remarks>
            <param name="Source">Pointer to the image to horizontally mirror.</param>
            <param name="Width">Width of the source and destination buffers.</param>
            <param name="Height">Height of the source and destination buffers.</param>
            <param name="Destination">Pointer to the buffer that will contained the mirrored image.</param>
            <param name="X1">Left side of the region.</param>
            <param name="Y1">Top of the region.</param>
            <param name="X2">Right side of the region.</param>
            <param name="Y2">Bottom of the region.</param>
            <returns>Value indicating operational success.</returns>
        </member>
        <member name="F:OctreeNode.Count">
            <summary>
Color count.
</summary>
        </member>
        <member name="F:OctreeNode.Color">
            <summary>
The color of the node.
</summary>
        </member>
        <member name="T:OctreeNode">
            <summary>
One octree node.
</summary>
        </member>
        <member name="F:RegionStruct.Right">
            <summary>
The right side of the region.
</summary>
        </member>
        <member name="F:RegionStruct.Bottom">
            <summary>
The bottom of the region.
</summary>
        </member>
        <member name="F:RegionStruct.Left">
            <summary>
The left side of the region.
</summary>
        </member>
        <member name="F:RegionStruct.Top">
            <summary>
The top of the region.
</summary>
        </member>
        <member name="T:RegionStruct">
            <summary>
Defines a region.
</summary>
        </member>
        <member name="F:ImageDefintionStruct.Stride">
            <summary>
Stride of the region.
</summary>
        </member>
        <member name="F:ImageDefintionStruct.Height">
            <summary>
Height of the region.
</summary>
        </member>
        <member name="F:ImageDefintionStruct.Width">
            <summary>
Width of the region.
</summary>
        </member>
        <member name="F:ImageDefintionStruct.Y">
            <summary>
Upper of the upper-left corner.
</summary>
        </member>
        <member name="F:ImageDefintionStruct.X">
            <summary>
Left of the upper-left corner.
</summary>
        </member>
        <member name="F:ImageDefintionStruct.Buffer">
            <summary>
Pointer to the bits in the region.
</summary>
        </member>
        <member name="T:ImageDefintionStruct">
            <summary>
Defines a region in an image or an entire image depending on usage. Not all fields are necessarily used.
</summary>
        </member>
        <member name="F:PureColorStruct.Blue">
            <summary>
The blue channel value.
</summary>
        </member>
        <member name="F:PureColorStruct.Green">
            <summary>
The green channel value.
</summary>
        </member>
        <member name="F:PureColorStruct.Red">
            <summary>
The red channel value.
</summary>
        </member>
        <member name="F:PureColorStruct.Alpha">
            <summary>
The alpha channel value.
</summary>
        </member>
        <member name="F:PureColorStruct.UseAlpha">
            <summary>
Determines if the alpha channel should be used.
</summary>
        </member>
        <member name="T:PureColorStruct">
            <summary>
Defines a color value.
</summary>
        </member>
        <member name="F:LineDefinitionStruct.DrawHorizontalLines">
            <summary>
Determines if horiztonal lines are drawn.
</summary>
        </member>
        <member name="F:LineDefinitionStruct.DrawVerticalLines">
            <summary>
Determines if vertical lines are drawn.
</summary>
        </member>
        <member name="F:LineDefinitionStruct.DrawPointIndicator">
            <summary>
Determines if the point indicator is drawn.
</summary>
        </member>
        <member name="F:LineDefinitionStruct.Blue">
            <summary>
The blue channel value.
</summary>
        </member>
        <member name="F:LineDefinitionStruct.Green">
            <summary>
The green channel value.
</summary>
        </member>
        <member name="F:LineDefinitionStruct.Red">
            <summary>
The red channel value.
</summary>
        </member>
        <member name="F:LineDefinitionStruct.Alpha">
            <summary>
The alpha channel value.
</summary>
        </member>
        <member name="F:LineDefinitionStruct.Y">
            <summary>
Vertical coordinate.
</summary>
        </member>
        <member name="F:LineDefinitionStruct.X">
            <summary>
Horizontal coordinate.
</summary>
        </member>
        <member name="T:LineDefinitionStruct">
            <summary>
Defines a point from which vertical and horizontal lines will be drawn.
</summary>
        </member>
        <member name="F:PureColorType.DrawPointIndicator">
            <summary>
Determines if the point indicator is drawn.
</summary>
        </member>
        <member name="F:PureColorType.DrawVerticalIndicator">
            <summary>
Determines if vertical indicators are drawn.
</summary>
        </member>
        <member name="F:PureColorType.DrawHorizontalIndicator">
            <summary>
Determines if horizontal indicators are drawn.
</summary>
        </member>
        <member name="F:PureColorType.UseAlpha">
            <summary>
Determines if alpha values are calculated.
</summary>
        </member>
        <member name="F:PureColorType.UseRadius">
            <summary>
Determines if the Radius value is used.
</summary>
        </member>
        <member name="F:PureColorType.AlphaEnd">
            <summary>
Ending alpha value (at 100% of either the Hypotenuse or Radius). Ignored if UseAlpha is false.
</summary>
        </member>
        <member name="F:PureColorType.AlphaStart">
            <summary>
Starting alpha value (e.g. the alpha value at X,Y). Ignored if UseAlpha is false.
</summary>
        </member>
        <member name="F:PureColorType.Radius">
            <summary>
The radius that determines the percent value for the colors. Used only if UseRadius is true.
</summary>
        </member>
        <member name="F:PureColorType.Hypotenuse">
            <summary>
The value of the hypotenuse used to calculate color percents. Ignored if UseRadius is true.
</summary>
        </member>
        <member name="F:PureColorType.Blue">
            <summary>
The blue channel value.
</summary>
        </member>
        <member name="F:PureColorType.Green">
            <summary>
The green channel value.
</summary>
        </member>
        <member name="F:PureColorType.Red">
            <summary>
The red channel value.
</summary>
        </member>
        <member name="F:PureColorType.Alpha">
            <summary>
The alpha channel value.
</summary>
        </member>
        <member name="F:PureColorType.Y">
            <summary>
Vertical coordinate.
</summary>
        </member>
        <member name="F:PureColorType.X">
            <summary>
Horizontal coordinate.
</summary>
        </member>
        <member name="T:PureColorType">
            <summary>
Defines a pure color type.
</summary>
        </member>
        <member name="F:AbsolutePointStruct.Y">
            <summary>
Vertical coordinate.
</summary>
        </member>
        <member name="F:AbsolutePointStruct.X">
            <summary>
Horizontal coordinate.
</summary>
        </member>
        <member name="T:AbsolutePointStruct">
            <summary>
Determines an absolute point.
</summary>
        </member>
        <member name="F:RelativePointStruct.Y">
            <summary>
Relative vertical coordinate.
</summary>
        </member>
        <member name="F:RelativePointStruct.X">
            <summary>
Relative horizontal coordinate.
</summary>
        </member>
        <member name="T:RelativePointStruct">
            <summary>
Defines a relative `. Assumes values clamped from 0.0 to 1.0.
</summary>
        </member>
        <member name="F:GradientStop.AbsGap">
            <summary>
Absolute gap size.
</summary>
        </member>
        <member name="F:GradientStop.AbsEnd">
            <summary>
Absolute end of the gradient range.
</summary>
        </member>
        <member name="F:GradientStop.AbsStart">
            <summary>
Absolute start of the gradient range.
</summary>
        </member>
        <member name="F:GradientStop.EndColor">
            <summary>
Ending color.
</summary>
        </member>
        <member name="F:GradientStop.StartColor">
            <summary>
Starting color.
</summary>
        </member>
        <member name="T:GradientStop">
            <summary>
One gradient stop.
</summary>
        </member>
        <member name="F:DisplayInstructionList2.Object">
            <summary>
Not currently used.
</summary>
        </member>
        <member name="F:DisplayInstructionList2.Parameters">
            <summary>
Pointer to a parameter block specific to Operand.
</summary>
        </member>
        <member name="F:DisplayInstructionList2.ReturnOnFailure">
            <summary>
Determines if control is returned to the caller if this particular display list item fails.
</summary>
        </member>
        <member name="F:DisplayInstructionList2.Operand">
            <summary>
The type of object to display.
</summary>
        </member>
        <member name="T:DisplayInstructionList2">
            <summary>
Display list structure.
</summary>
        </member>
        <member name="F:CommonObject.Bottom">
            <summary>
Bottom side of the object.
</summary>
        </member>
        <member name="F:CommonObject.Right">
            <summary>
Right side of the object.
</summary>
        </member>
        <member name="F:CommonObject.Top">
            <summary>
Top side of the object.
</summary>
        </member>
        <member name="F:CommonObject.Left">
            <summary>
Left side of the object.
</summary>
        </member>
        <member name="F:CommonObject.ObjectStride">
            <summary>
The stride of the buffer.
</summary>
        </member>
        <member name="F:CommonObject.ObjectHeight">
            <summary>
The height of the buffer.
</summary>
        </member>
        <member name="F:CommonObject.ObjectWidth">
            <summary>
The width of the buffer.
</summary>
        </member>
        <member name="F:CommonObject.ObjectBuffer">
            <summary>
The buffer that will be blended/rendered.
</summary>
        </member>
        <member name="F:CommonObject.ObjectAction">
            <summary>
Tells the renderer what action to take with this object.
</summary>
        </member>
        <member name="T:CommonObject">
            <summary>
Defines a common structure for rendering of all objects.
</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'M:MeanImageColorValue(System.Void*,System.Int32,System.Int32,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:MeanImageColor2(System.Void*,System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.UInt32*)'. -->
    </members>
</doc>